15c15
< <meta content="xml2rfc 3.17.4" name="generator">
---
> <meta content="xml2rfc 3.19.1" name="generator">
23,26c23,26
<   xml2rfc 3.17.4
<     Python 3.9.15
<     ConfigArgParse 1.5.3
<     google-i18n-address 3.0.0
---
>   xml2rfc 3.19.1
>     Python 3.11.7
>     ConfigArgParse 1.7
>     google-i18n-address 3.1.0
28,34c28,34
<     Jinja2 3.1.2
<     lxml 4.9.0
<     platformdirs 3.8.0
<     pycountry 22.3.5
<     PyYAML 6.0
<     requests 2.28.0
<     setuptools 44.1.1
---
>     Jinja2 3.1.3
>     lxml 4.9.4
>     platformdirs 4.1.0
>     pycountry 23.12.11
>     PyYAML 6.0.1
>     requests 2.31.0
>     setuptools 65.5.0
36,37c36
<     wcwidth 0.2.5
<     weasyprint 56.1
---
>     wcwidth 0.2.13
39c38
< <link href="rfc9414.xml" rel="alternate" type="application/rfc+xml">
---
> <link href="rfc/rfc9414.xml" rel="alternate" type="application/rfc+xml">
83a83
>   overflow-wrap: break-word;
262,263c262
< a[href].selfRef,
< .iref + a[href].internal {
---
> a[href].selfRef {
314a314,316
> blockquote > *:last-child {
>   margin-bottom: 0;
> }
652d653
< 
1204a1206
> <link href="https://datatracker.ietf.org/doc/draft-irtf-pearg-numeric-ids-history-11" rel="prev">
1207c1209
<   <link href="https://datatracker.ietf.org/doc/draft-irtf-pearg-numeric-ids-history-11" rel="prev">
---
>   <script type="application/javascript">async function addMetadata(){try{const e=document.styleSheets[0].cssRules;for(let t=0;t<e.length;t++)if(/#identifiers/.exec(e[t].selectorText)){const a=e[t].cssText.replace("#identifiers","#external-updates");document.styleSheets[0].insertRule(a,document.styleSheets[0].cssRules.length)}}catch(e){console.log(e)}const e=document.getElementById("external-metadata");if(e)try{var t,a="",o=function(e){const t=document.getElementsByTagName("meta");for(let a=0;a<t.length;a++)if(t[a].getAttribute("name")===e)return t[a].getAttribute("content");return""}("rfc.number");if(o){t="https://www.rfc-editor.org/rfc/rfc"+o+".json";try{const e=await fetch(t);a=await e.json()}catch(e){t=document.URL.indexOf("html")>=0?document.URL.replace(/html$/,"json"):document.URL+".json";const o=await fetch(t);a=await o.json()}}if(!a)return;e.style.display="block";const s="",d="https://datatracker.ietf.org/doc",n="https://datatracker.ietf.org/ipr/search",c="https://www.rfc-editor.org/info",l=a.doc_id.toLowerCase(),i=a.doc_id.slice(0,3).toLowerCase(),f=a.doc_id.slice(3).replace(/^0+/,""),u={status:"Status",obsoletes:"Obsoletes",obsoleted_by:"Obsoleted By",updates:"Updates",updated_by:"Updated By",see_also:"See Also",errata_url:"Errata"};let h="<dl style='overflow:hidden' id='external-updates'>";["status","obsoletes","obsoleted_by","updates","updated_by","see_also","errata_url"].forEach(e=>{if("status"==e){a[e]=a[e].toLowerCase();var t=a[e].split(" "),o=t.length,w="",p=1;for(let e=0;e<o;e++)p<o?w=w+r(t[e])+" ":w+=r(t[e]),p++;a[e]=w}else if("obsoletes"==e||"obsoleted_by"==e||"updates"==e||"updated_by"==e){var g,m="",b=1;g=a[e].length;for(let t=0;t<g;t++)a[e][t]&&(a[e][t]=String(a[e][t]).toLowerCase(),m=b<g?m+"<a href='"+s+"/rfc/".concat(a[e][t])+"'>"+a[e][t].slice(3)+"</a>, ":m+"<a href='"+s+"/rfc/".concat(a[e][t])+"'>"+a[e][t].slice(3)+"</a>",b++);a[e]=m}else if("see_also"==e){var y,L="",C=1;y=a[e].length;for(let t=0;t<y;t++)if(a[e][t]){a[e][t]=String(a[e][t]);var _=a[e][t].slice(0,3),v=a[e][t].slice(3).replace(/^0+/,"");L=C<y?"RFC"!=_?L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+_+" "+v+"</a>, ":L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+v+"</a>, ":"RFC"!=_?L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+_+" "+v+"</a>":L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+v+"</a>",C++}a[e]=L}else if("errata_url"==e){var R="";R=a[e]?R+"<a href='"+a[e]+"'>Errata exist</a> | <a href='"+d+"/"+l+"'>Datatracker</a>| <a href='"+n+"/?"+i+"="+f+"&submit="+i+"'>IPR</a> | <a href='"+c+"/"+l+"'>Info page</a>":"<a href='"+d+"/"+l+"'>Datatracker</a> | <a href='"+n+"/?"+i+"="+f+"&submit="+i+"'>IPR</a> | <a href='"+c+"/"+l+"'>Info page</a>",a[e]=R}""!=a[e]?"Errata"==u[e]?h+=`<dt>More info:</dt><dd>${a[e]}</dd>`:h+=`<dt>${u[e]}:</dt><dd>${a[e]}</dd>`:"Errata"==u[e]&&(h+=`<dt>More info:</dt><dd>${a[e]}</dd>`)}),h+="</dl>",e.innerHTML=h}catch(e){console.log(e)}else console.log("Could not locate metadata <div> element");function r(e){return e.charAt(0).toUpperCase()+e.slice(1)}}window.removeEventListener("load",addMetadata),window.addEventListener("load",addMetadata);</script>
1210c1212
< <script src="https://www.rfc-editor.org/js/metadata.min.js"></script>
---
> <script src="metadata.min.js"></script>
1454c1456
< <p id="section-4-7">The following subsections document the timelines for a number of sample transient numeric identifiers that illustrate how the problem discussed in this document has affected protocols from different layers over time. These sample transient numeric identifiers have different interoperability requirements and failure severities (see <span><a href="https://www.rfc-editor.org/rfc/rfc9415#section-6" class="relref">Section 6</a> of [<a href="#RFC9415" class="cite xref">RFC9415</a>]</span>), and thus are considered to be representative of the problem being analyzed in this document.<a href="#section-4-7" class="pilcrow">¶</a></p>
---
> <p id="section-4-7">The following subsections document the timelines for a number of sample transient numeric identifiers that illustrate how the problem discussed in this document has affected protocols from different layers over time. These sample transient numeric identifiers have different interoperability requirements and failure severities (see <span><a href="https://rfc-editor.org/rfc/rfc9415#section-6" class="relref">Section 6</a> of [<a href="#RFC9415" class="cite xref">RFC9415</a>]</span>), and thus are considered to be representative of the problem being analyzed in this document.<a href="#section-4-7" class="pilcrow">¶</a></p>
1463c1465
< The IPv6 Identification was originally specified in <span>[<a href="#RFC1883" class="cite xref">RFC1883</a>]</span>. It serves the same purpose as its IPv4 counterpart, but rather than being part of the base header (as in the IPv4 case), it is part of the Fragment Header (which may or may not be present in an IPv6 packet). <span><a href="https://www.rfc-editor.org/rfc/rfc1883#section-4.5" class="relref">Section 4.5</a> of [<a href="#RFC1883" class="cite xref">RFC1883</a>]</span> states that the Identification must be different than that of any other fragmented packet sent recently (within the maximum likely lifetime of a packet) with the same Source Address and Destination Address. Subsequently, it notes that this requirement can be met by means of a wrap-around 32-bit counter that is incremented each time a packet must be fragmented and that it is an implementation choice whether to use a global or a per-destination counter. Thus, the specification of the IPv6 Identification is similar to that of the IPv4 case, with the only difference that, in the IPv6 case, the suggestions to use simple counters is more explicit. <span>[<a href="#RFC2460" class="cite xref">RFC2460</a>]</span> is the first revision of the core IPv6 specification and maintains the same text for the specification of the IPv6 Identification field. <span>[<a href="#RFC8200" class="cite xref">RFC8200</a>]</span>, the second revision of the core IPv6 specification, removes the suggestion from <span>[<a href="#RFC2460" class="cite xref">RFC2460</a>]</span> to use a counter for the generation of IPv6 Identification values and points to <span>[<a href="#RFC7739" class="cite xref">RFC7739</a>]</span> for sample algorithms for their generation.<a href="#section-4.1-3" class="pilcrow">¶</a></p>
---
> The IPv6 Identification was originally specified in <span>[<a href="#RFC1883" class="cite xref">RFC1883</a>]</span>. It serves the same purpose as its IPv4 counterpart, but rather than being part of the base header (as in the IPv4 case), it is part of the Fragment Header (which may or may not be present in an IPv6 packet). <span><a href="https://rfc-editor.org/rfc/rfc1883#section-4.5" class="relref">Section 4.5</a> of [<a href="#RFC1883" class="cite xref">RFC1883</a>]</span> states that the Identification must be different than that of any other fragmented packet sent recently (within the maximum likely lifetime of a packet) with the same Source Address and Destination Address. Subsequently, it notes that this requirement can be met by means of a wrap-around 32-bit counter that is incremented each time a packet must be fragmented and that it is an implementation choice whether to use a global or a per-destination counter. Thus, the specification of the IPv6 Identification is similar to that of the IPv4 case, with the only difference that, in the IPv6 case, the suggestions to use simple counters is more explicit. <span>[<a href="#RFC2460" class="cite xref">RFC2460</a>]</span> is the first revision of the core IPv6 specification and maintains the same text for the specification of the IPv6 Identification field. <span>[<a href="#RFC8200" class="cite xref">RFC8200</a>]</span>, the second revision of the core IPv6 specification, removes the suggestion from <span>[<a href="#RFC2460" class="cite xref">RFC2460</a>]</span> to use a counter for the generation of IPv6 Identification values and points to <span>[<a href="#RFC7739" class="cite xref">RFC7739</a>]</span> for sample algorithms for their generation.<a href="#section-4.1-3" class="pilcrow">¶</a></p>
1588c1590
< <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span> suggests that the choice of the ISN of a connection is not arbitrary but aims to reduce the chances of a stale segment from being accepted by a new incarnation of a previous connection. <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span> suggests the use of a global 32-bit ISN generator that is incremented by 1 roughly every 4 microseconds. However, as a matter of fact, protection against stale segments from a previous incarnation of the connection is enforced by preventing the creation of a new incarnation of a previous connection before 2*MSL has passed since a segment corresponding to the old incarnation was last seen (where "MSL" is the "Maximum Segment Lifetime" <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span>). This is accomplished by the TIME-WAIT state and TCP's "quiet time" concept (see <span><a href="https://www.rfc-editor.org/rfc/rfc1323#appendix-B" class="relref">Appendix B</a> of [<a href="#RFC1323" class="cite xref">RFC1323</a>]</span>). Based on the assumption that ISNs are monotonically increasing across connections, many stacks (e.g., 4.2BSD-derived) use the ISN of an incoming SYN segment to perform "heuristics" that enable the creation of a new incarnation of a connection while the previous incarnation is still in the TIME-WAIT state (see p. 945 of <span>[<a href="#Wright1994" class="cite xref">Wright1994</a>]</span>). This avoids an interoperability problem that may arise when a node establishes connections to a specific TCP end-point at a high rate <span>[<a href="#Silbersack2005" class="cite xref">Silbersack2005</a>]</span>.<a href="#section-4.2-1" class="pilcrow">¶</a></p>
---
> <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span> suggests that the choice of the ISN of a connection is not arbitrary but aims to reduce the chances of a stale segment from being accepted by a new incarnation of a previous connection. <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span> suggests the use of a global 32-bit ISN generator that is incremented by 1 roughly every 4 microseconds. However, as a matter of fact, protection against stale segments from a previous incarnation of the connection is enforced by preventing the creation of a new incarnation of a previous connection before 2*MSL has passed since a segment corresponding to the old incarnation was last seen (where "MSL" is the "Maximum Segment Lifetime" <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span>). This is accomplished by the TIME-WAIT state and TCP's "quiet time" concept (see <span><a href="https://rfc-editor.org/rfc/rfc1323#appendix-B" class="relref">Appendix B</a> of [<a href="#RFC1323" class="cite xref">RFC1323</a>]</span>). Based on the assumption that ISNs are monotonically increasing across connections, many stacks (e.g., 4.2BSD-derived) use the ISN of an incoming SYN segment to perform "heuristics" that enable the creation of a new incarnation of a connection while the previous incarnation is still in the TIME-WAIT state (see p. 945 of <span>[<a href="#Wright1994" class="cite xref">Wright1994</a>]</span>). This avoids an interoperability problem that may arise when a node establishes connections to a specific TCP end-point at a high rate <span>[<a href="#Silbersack2005" class="cite xref">Silbersack2005</a>]</span>.<a href="#section-4.2-1" class="pilcrow">¶</a></p>
1618c1620
<           <dd style="margin-left: 1.5em" id="section-4.2-3.12">OpenBSD implements TCP ISN randomization based on random increments (please see <span><a href="https://www.rfc-editor.org/rfc/rfc9415#appendix-A.2" class="relref">Appendix A.2</a> of [<a href="#RFC9415" class="cite xref">RFC9415</a>]</span>) <span>[<a href="#OpenBSD-TCP-ISN-I" class="cite xref">OpenBSD-TCP-ISN-I</a>]</span>.<a href="#section-4.2-3.12" class="pilcrow">¶</a>
---
>           <dd style="margin-left: 1.5em" id="section-4.2-3.12">OpenBSD implements TCP ISN randomization based on random increments (please see <span><a href="https://rfc-editor.org/rfc/rfc9415#appendix-A.2" class="relref">Appendix A.2</a> of [<a href="#RFC9415" class="cite xref">RFC9415</a>]</span>) <span>[<a href="#OpenBSD-TCP-ISN-I" class="cite xref">OpenBSD-TCP-ISN-I</a>]</span>.<a href="#section-4.2-3.12" class="pilcrow">¶</a>
1622c1624
<           <dd style="margin-left: 1.5em" id="section-4.2-3.14">OpenBSD implements TCP ISN randomization using simple randomization (please see <span><a href="https://www.rfc-editor.org/rfc/rfc9415#section-7.1" class="relref">Section 7.1</a> of [<a href="#RFC9415" class="cite xref">RFC9415</a>]</span>)  <span>[<a href="#OpenBSD-TCP-ISN-R" class="cite xref">OpenBSD-TCP-ISN-R</a>]</span>.<a href="#section-4.2-3.14" class="pilcrow">¶</a>
---
>           <dd style="margin-left: 1.5em" id="section-4.2-3.14">OpenBSD implements TCP ISN randomization using simple randomization (please see <span><a href="https://rfc-editor.org/rfc/rfc9415#section-7.1" class="relref">Section 7.1</a> of [<a href="#RFC9415" class="cite xref">RFC9415</a>]</span>)  <span>[<a href="#OpenBSD-TCP-ISN-R" class="cite xref">OpenBSD-TCP-ISN-R</a>]</span>.<a href="#section-4.2-3.14" class="pilcrow">¶</a>
