13c13
< <meta content="xml2rfc 3.9.1" name="generator">
---
> <meta content="xml2rfc 3.19.1" name="generator">
20,37c20,33
<   xml2rfc 3.9.1
<     Python 3.6.10
<     appdirs 1.4.4
<     ConfigArgParse 1.2.3
<     google-i18n-address 2.3.5
<     html5lib 1.0.1
<     intervaltree 3.0.2
<     Jinja2 2.11.2
<     kitchen 1.2.6
<     lxml 4.4.2
<     pycairo 1.19.0
<     pycountry 19.8.18
<     pyflakes 2.1.1
<     PyYAML 5.3.1
<     requests 2.22.0
<     setuptools 40.6.2
<     six 1.14.0
<     WeasyPrint 51
---
>   xml2rfc 3.19.1
>     Python 3.11.7
>     ConfigArgParse 1.7
>     google-i18n-address 3.1.0
>     intervaltree 3.1.0
>     Jinja2 3.1.3
>     lxml 4.9.4
>     platformdirs 4.1.0
>     pycountry 23.12.11
>     PyYAML 6.0.1
>     requests 2.31.0
>     setuptools 65.5.0
>     six 1.16.0
>     wcwidth 0.2.13
39c35
< <link href="rfc9064.xml" rel="alternate" type="application/rfc+xml">
---
> <link href="rfc/rfc9064.xml" rel="alternate" type="application/rfc+xml">
49c45
<   commented changes found necssary during the development of the v3
---
>   commented changes found necessary during the development of the v3
58a55,60
> :root {
>   --font-sans: 'Noto Sans', Arial, Helvetica, sans-serif;
>   --font-serif: 'Noto Serif', 'Times', 'Times New Roman', serif;
>   --font-mono: 'Roboto Mono', Courier, 'Courier New', monospace;
> }
> 
61d62
<   width: extend-to-zoom;
76c77
<   font-family: 'Noto Sans', Arial, Helvetica, sans-serif;
---
>   font-family: var(--font-sans);
78a80
>   overflow-wrap: break-word;
164a167,175
> svg[font-family~="serif" i], svg [font-family~="serif" i] {
>   font-family: var(--font-serif);
> }
> svg[font-family~="sans-serif" i], svg [font-family~="sans-serif" i] {
>   font-family: var(--font-sans);
> }
> svg[font-family~="monospace" i], svg [font-family~="monospace" i] {
>   font-family: var(--font-mono);
> }
179,182d189
<   border: none;
<   /* this isn't optimal, but it's an existence proof.  PrinceXML doesn't
<      support flexbox yet.
<   */
183a191
>   border: none;
261c269
< tt, code, pre, code {
---
> tt, code, pre {
263c271
<   font-family: 'Roboto Mono', monospace;
---
>   font-family: var(--font-mono);
302a311,313
> blockquote > *:last-child {
>   margin-bottom: 0;
> }
392a404,409
> /* Fix PDF info block run off issue */
> @media print {
>   #identifiers dd {
>     float: none;
>   }
> }
494c511
<   font-family: "Noto Sans",Arial,Helvetica,sans-serif;
---
>   font-family: var(--font-sans);
634d650
< 
656a673,675
>   .breakable pre {
>     break-inside: auto;
>   }
724c743
<   /* The follwing is commented out here, but set appropriately by in code, as
---
>   /* The following is commented out here, but set appropriately by in code, as
824c843
< tt, code, pre, code {
---
> tt, code, pre {
829c848
< pre.sourcecode,
---
> .sourcecode pre,
865c884
< /* Make the alternative author contact informatio look less like just another
---
> /* Make the alternative author contact information look less like just another
1046a1066
>   .artwork > pre,
1061c1081
< and increase the contrast between border and odd row background sligthtly */
---
> and increase the contrast between border and odd row background slightly */
1067a1088,1090
> tr {
>   break-inside: avoid;
> }
1087c1110
<   break-before: avoid-page;
---
>   break-before: auto;
1118c1141
< /* Text in compact lists should not get extra bottim margin space,
---
> /* Text in compact lists should not get extra bottom margin space,
1143c1166
< /* Tweak the comact list text */
---
> /* Tweak the compact list text */
1161c1184
< dd > div:first-child > pre.sourcecode,
---
> dd > div.sourcecode:first-child,
1175c1198
< li > p:last-of-type {
---
> li > p:last-of-type:only-child {
1179a1203
> <link href="https://datatracker.ietf.org/doc/draft-oran-icnrg-qosarch-06" rel="prev">
1182c1206
<   <link href="https://datatracker.ietf.org/doc/draft-oran-icnrg-qosarch-06" rel="prev">
---
>   <script type="application/javascript">async function addMetadata(){try{const e=document.styleSheets[0].cssRules;for(let t=0;t<e.length;t++)if(/#identifiers/.exec(e[t].selectorText)){const a=e[t].cssText.replace("#identifiers","#external-updates");document.styleSheets[0].insertRule(a,document.styleSheets[0].cssRules.length)}}catch(e){console.log(e)}const e=document.getElementById("external-metadata");if(e)try{var t,a="",o=function(e){const t=document.getElementsByTagName("meta");for(let a=0;a<t.length;a++)if(t[a].getAttribute("name")===e)return t[a].getAttribute("content");return""}("rfc.number");if(o){t="https://www.rfc-editor.org/rfc/rfc"+o+".json";try{const e=await fetch(t);a=await e.json()}catch(e){t=document.URL.indexOf("html")>=0?document.URL.replace(/html$/,"json"):document.URL+".json";const o=await fetch(t);a=await o.json()}}if(!a)return;e.style.display="block";const s="",d="https://datatracker.ietf.org/doc",n="https://datatracker.ietf.org/ipr/search",c="https://www.rfc-editor.org/info",l=a.doc_id.toLowerCase(),i=a.doc_id.slice(0,3).toLowerCase(),f=a.doc_id.slice(3).replace(/^0+/,""),u={status:"Status",obsoletes:"Obsoletes",obsoleted_by:"Obsoleted By",updates:"Updates",updated_by:"Updated By",see_also:"See Also",errata_url:"Errata"};let h="<dl style='overflow:hidden' id='external-updates'>";["status","obsoletes","obsoleted_by","updates","updated_by","see_also","errata_url"].forEach(e=>{if("status"==e){a[e]=a[e].toLowerCase();var t=a[e].split(" "),o=t.length,w="",p=1;for(let e=0;e<o;e++)p<o?w=w+r(t[e])+" ":w+=r(t[e]),p++;a[e]=w}else if("obsoletes"==e||"obsoleted_by"==e||"updates"==e||"updated_by"==e){var g,m="",b=1;g=a[e].length;for(let t=0;t<g;t++)a[e][t]&&(a[e][t]=String(a[e][t]).toLowerCase(),m=b<g?m+"<a href='"+s+"/rfc/".concat(a[e][t])+"'>"+a[e][t].slice(3)+"</a>, ":m+"<a href='"+s+"/rfc/".concat(a[e][t])+"'>"+a[e][t].slice(3)+"</a>",b++);a[e]=m}else if("see_also"==e){var y,L="",C=1;y=a[e].length;for(let t=0;t<y;t++)if(a[e][t]){a[e][t]=String(a[e][t]);var _=a[e][t].slice(0,3),v=a[e][t].slice(3).replace(/^0+/,"");L=C<y?"RFC"!=_?L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+_+" "+v+"</a>, ":L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+v+"</a>, ":"RFC"!=_?L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+_+" "+v+"</a>":L+"<a href='"+s+"/info/"+_.toLowerCase().concat(v.toLowerCase())+"'>"+v+"</a>",C++}a[e]=L}else if("errata_url"==e){var R="";R=a[e]?R+"<a href='"+a[e]+"'>Errata exist</a> | <a href='"+d+"/"+l+"'>Datatracker</a>| <a href='"+n+"/?"+i+"="+f+"&submit="+i+"'>IPR</a> | <a href='"+c+"/"+l+"'>Info page</a>":"<a href='"+d+"/"+l+"'>Datatracker</a> | <a href='"+n+"/?"+i+"="+f+"&submit="+i+"'>IPR</a> | <a href='"+c+"/"+l+"'>Info page</a>",a[e]=R}""!=a[e]?"Errata"==u[e]?h+=`<dt>More info:</dt><dd>${a[e]}</dd>`:h+=`<dt>${u[e]}:</dt><dd>${a[e]}</dd>`:"Errata"==u[e]&&(h+=`<dt>More info:</dt><dd>${a[e]}</dd>`)}),h+="</dl>",e.innerHTML=h}catch(e){console.log(e)}else console.log("Could not locate metadata <div> element");function r(e){return e.charAt(0).toUpperCase()+e.slice(1)}}window.removeEventListener("load",addMetadata),window.addEventListener("load",addMetadata);</script>
1184,1185c1208,1209
< <body>
< <script src="https://www.rfc-editor.org/js/metadata.min.js"></script>
---
> <body class="xml2rfc">
> <script src="metadata.min.js"></script>
1273,1278c1297,1302
< <nav class="toc"><ul class="compact ulBare toc ulEmpty">
< <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.1">
<             <p id="section-toc.1-1.1.1" class="keepWithNext"><a href="#section-1" class="xref">1</a>.  <a href="#name-introduction" class="xref">Introduction</a></p>
< <ul class="ulBare toc compact ulEmpty">
< <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.1.2.1">
<                 <p id="section-toc.1-1.1.2.1.1" class="keepWithNext"><a href="#section-1.1" class="xref">1.1</a>.  <a href="#name-applicability-assessment-by" class="xref">Applicability Assessment by ICNRG Chairs</a></p>
---
> <nav class="toc"><ul class="compact toc ulBare ulEmpty">
> <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.1">
>             <p id="section-toc.1-1.1.1" class="keepWithNext"><a href="#section-1" class="auto internal xref">1</a>.  <a href="#name-introduction" class="internal xref">Introduction</a></p>
> <ul class="compact toc ulBare ulEmpty">
> <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.1.2.1">
>                 <p id="section-toc.1-1.1.2.1.1" class="keepWithNext"><a href="#section-1.1" class="auto internal xref">1.1</a>.  <a href="#name-applicability-assessment-by" class="internal xref">Applicability Assessment by ICNRG Chairs</a></p>
1282,1283c1306,1307
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.2">
<             <p id="section-toc.1-1.2.1" class="keepWithNext"><a href="#section-2" class="xref">2</a>.  <a href="#name-requirements-language" class="xref">Requirements Language</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.2">
>             <p id="section-toc.1-1.2.1" class="keepWithNext"><a href="#section-2" class="auto internal xref">2</a>.  <a href="#name-requirements-language" class="internal xref">Requirements Language</a></p>
1285,1289c1309,1313
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.3">
<             <p id="section-toc.1-1.3.1"><a href="#section-3" class="xref">3</a>.  <a href="#name-background-on-quality-of-se" class="xref">Background on Quality of Service in Network Protocols</a></p>
< <ul class="ulBare toc compact ulEmpty">
< <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.3.2.1">
<                 <p id="section-toc.1-1.3.2.1.1"><a href="#section-3.1" class="xref">3.1</a>.  <a href="#name-basics-on-how-icn-protocols" class="xref">Basics on How ICN Protocols like NDN and CCNx Work</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.3">
>             <p id="section-toc.1-1.3.1"><a href="#section-3" class="auto internal xref">3</a>.  <a href="#name-background-on-quality-of-se" class="internal xref">Background on Quality of Service in Network Protocols</a></p>
> <ul class="compact toc ulBare ulEmpty">
> <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.3.2.1">
>                 <p id="section-toc.1-1.3.2.1.1"><a href="#section-3.1" class="auto internal xref">3.1</a>.  <a href="#name-basics-on-how-icn-protocols" class="internal xref">Basics on How ICN Protocols like NDN and CCNx Work</a></p>
1291,1292c1315,1316
<               <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.3.2.2">
<                 <p id="section-toc.1-1.3.2.2.1"><a href="#section-3.2" class="xref">3.2</a>.  <a href="#name-congestion-control-basics-r" class="xref">Congestion Control Basics Relevant to ICN</a></p>
---
>               <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.3.2.2">
>                 <p id="section-toc.1-1.3.2.2.1"><a href="#section-3.2" class="auto internal xref">3.2</a>.  <a href="#name-congestion-control-basics-r" class="internal xref">Congestion Control Basics Relevant to ICN</a></p>
1296,1297c1320,1321
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.4">
<             <p id="section-toc.1-1.4.1"><a href="#section-4" class="xref">4</a>.  <a href="#name-what-can-we-control-to-achi" class="xref">What Can We Control to Achieve QoS in ICN?</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.4">
>             <p id="section-toc.1-1.4.1"><a href="#section-4" class="auto internal xref">4</a>.  <a href="#name-what-can-we-control-to-achi" class="internal xref">What Can We Control to Achieve QoS in ICN?</a></p>
1299,1300c1323,1324
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.5">
<             <p id="section-toc.1-1.5.1"><a href="#section-5" class="xref">5</a>.  <a href="#name-how-does-this-relate-to-qos" class="xref">How Does This Relate to QoS in TCP/IP?</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.5">
>             <p id="section-toc.1-1.5.1"><a href="#section-5" class="auto internal xref">5</a>.  <a href="#name-how-does-this-relate-to-qos" class="internal xref">How Does This Relate to QoS in TCP/IP?</a></p>
1302,1306c1326,1330
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.6">
<             <p id="section-toc.1-1.6.1"><a href="#section-6" class="xref">6</a>.  <a href="#name-why-is-icn-different-can-we" class="xref">Why Is ICN Different? Can We Do Better?</a></p>
< <ul class="ulBare toc compact ulEmpty">
< <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.6.2.1">
<                 <p id="section-toc.1-1.6.2.1.1"><a href="#section-6.1" class="xref">6.1</a>.  <a href="#name-equivalence-class-capabilit" class="xref">Equivalence Class Capabilities</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.6">
>             <p id="section-toc.1-1.6.1"><a href="#section-6" class="auto internal xref">6</a>.  <a href="#name-why-is-icn-different-can-we" class="internal xref">Why Is ICN Different? Can We Do Better?</a></p>
> <ul class="compact toc ulBare ulEmpty">
> <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.6.2.1">
>                 <p id="section-toc.1-1.6.2.1.1"><a href="#section-6.1" class="auto internal xref">6.1</a>.  <a href="#name-equivalence-class-capabilit" class="internal xref">Equivalence Class Capabilities</a></p>
1308,1309c1332,1333
<               <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.6.2.2">
<                 <p id="section-toc.1-1.6.2.2.1"><a href="#section-6.2" class="xref">6.2</a>.  <a href="#name-topology-interactions-with-" class="xref">Topology Interactions with QoS</a></p>
---
>               <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.6.2.2">
>                 <p id="section-toc.1-1.6.2.2.1"><a href="#section-6.2" class="auto internal xref">6.2</a>.  <a href="#name-topology-interactions-with-" class="internal xref">Topology Interactions with QoS</a></p>
1311,1312c1335,1336
<               <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.6.2.3">
<                 <p id="section-toc.1-1.6.2.3.1"><a href="#section-6.3" class="xref">6.3</a>.  <a href="#name-specification-of-qos-treatm" class="xref">Specification of QoS Treatments</a></p>
---
>               <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.6.2.3">
>                 <p id="section-toc.1-1.6.2.3.1"><a href="#section-6.3" class="auto internal xref">6.3</a>.  <a href="#name-specification-of-qos-treatm" class="internal xref">Specification of QoS Treatments</a></p>
1314,1315c1338,1339
<               <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.6.2.4">
<                 <p id="section-toc.1-1.6.2.4.1"><a href="#section-6.4" class="xref">6.4</a>.  <a href="#name-icn-forwarding-semantics-ef" class="xref">ICN Forwarding Semantics Effect on QoS</a></p>
---
>               <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.6.2.4">
>                 <p id="section-toc.1-1.6.2.4.1"><a href="#section-6.4" class="auto internal xref">6.4</a>.  <a href="#name-icn-forwarding-semantics-ef" class="internal xref">ICN Forwarding Semantics Effect on QoS</a></p>
1317,1318c1341,1342
<               <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.6.2.5">
<                 <p id="section-toc.1-1.6.2.5.1"><a href="#section-6.5" class="xref">6.5</a>.  <a href="#name-qos-interactions-with-cachi" class="xref">QoS Interactions with Caching</a></p>
---
>               <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.6.2.5">
>                 <p id="section-toc.1-1.6.2.5.1"><a href="#section-6.5" class="auto internal xref">6.5</a>.  <a href="#name-qos-interactions-with-cachi" class="internal xref">QoS Interactions with Caching</a></p>
1322,1326c1346,1350
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.7">
<             <p id="section-toc.1-1.7.1"><a href="#section-7" class="xref">7</a>.  <a href="#name-strawman-principles-for-an-" class="xref">Strawman Principles for an ICN QoS Architecture</a></p>
< <ul class="ulBare toc compact ulEmpty">
< <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.7.2.1">
<                 <p id="section-toc.1-1.7.2.1.1"><a href="#section-7.1" class="xref">7.1</a>.  <a href="#name-can-intserv-like-traffic-co" class="xref">Can Intserv-Like Traffic Control in ICN Provide Richer QoS Semantics?</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.7">
>             <p id="section-toc.1-1.7.1"><a href="#section-7" class="auto internal xref">7</a>.  <a href="#name-strawman-principles-for-an-" class="internal xref">Strawman Principles for an ICN QoS Architecture</a></p>
> <ul class="compact toc ulBare ulEmpty">
> <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.7.2.1">
>                 <p id="section-toc.1-1.7.2.1.1"><a href="#section-7.1" class="auto internal xref">7.1</a>.  <a href="#name-can-intserv-like-traffic-co" class="internal xref">Can Intserv-Like Traffic Control in ICN Provide Richer QoS Semantics?</a></p>
1330,1331c1354,1355
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.8">
<             <p id="section-toc.1-1.8.1"><a href="#section-8" class="xref">8</a>.  <a href="#name-iana-considerations" class="xref">IANA Considerations</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.8">
>             <p id="section-toc.1-1.8.1"><a href="#section-8" class="auto internal xref">8</a>.  <a href="#name-iana-considerations" class="internal xref">IANA Considerations</a></p>
1333,1334c1357,1358
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.9">
<             <p id="section-toc.1-1.9.1"><a href="#section-9" class="xref">9</a>.  <a href="#name-security-considerations" class="xref">Security Considerations</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.9">
>             <p id="section-toc.1-1.9.1"><a href="#section-9" class="auto internal xref">9</a>.  <a href="#name-security-considerations" class="internal xref">Security Considerations</a></p>
1336,1340c1360,1364
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.10">
<             <p id="section-toc.1-1.10.1"><a href="#section-10" class="xref">10</a>. <a href="#name-references" class="xref">References</a></p>
< <ul class="ulBare toc compact ulEmpty">
< <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.10.2.1">
<                 <p id="section-toc.1-1.10.2.1.1"><a href="#section-10.1" class="xref">10.1</a>.  <a href="#name-normative-references" class="xref">Normative References</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.10">
>             <p id="section-toc.1-1.10.1"><a href="#section-10" class="auto internal xref">10</a>. <a href="#name-references" class="internal xref">References</a></p>
> <ul class="compact toc ulBare ulEmpty">
> <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.10.2.1">
>                 <p id="section-toc.1-1.10.2.1.1"><a href="#section-10.1" class="auto internal xref">10.1</a>.  <a href="#name-normative-references" class="internal xref">Normative References</a></p>
1342,1343c1366,1367
<               <li class="ulBare toc compact ulEmpty" id="section-toc.1-1.10.2.2">
<                 <p id="section-toc.1-1.10.2.2.1"><a href="#section-10.2" class="xref">10.2</a>.  <a href="#name-informative-references" class="xref">Informative References</a></p>
---
>               <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.10.2.2">
>                 <p id="section-toc.1-1.10.2.2.1"><a href="#section-10.2" class="auto internal xref">10.2</a>.  <a href="#name-informative-references" class="internal xref">Informative References</a></p>
1347,1348c1371,1372
<           <li class="compact ulBare toc ulEmpty" id="section-toc.1-1.11">
<             <p id="section-toc.1-1.11.1"><a href="#appendix-A" class="xref"></a><a href="#name-authors-address" class="xref">Author's Address</a></p>
---
>           <li class="compact toc ulBare ulEmpty" id="section-toc.1-1.11">
>             <p id="section-toc.1-1.11.1"><a href="#appendix-A" class="auto internal xref"></a><a href="#name-authors-address" class="internal xref">Author's Address</a></p>
1359c1383
< <p id="section-1-1">The TCP/IP protocol suite used on today's Internet has over 30 years of accumulated research and engineering into the provisioning of QoS machinery, employed with varying success in different environments. ICN protocols like NDN <span>[<a href="#NDN" class="xref">NDN</a>]</span> and CCNx <span>[<a href="#RFC8569" class="xref">RFC8569</a>]</span> <span>[<a href="#RFC8609" class="xref">RFC8609</a>]</span> have an accumulated ten years of research and very little deployment. We therefore have the opportunity to either recapitulate the approaches taken with TCP/IP (e.g., Intserv <span>[<a href="#RFC2998" class="xref">RFC2998</a>]</span> and Diffserv <span>[<a href="#RFC2474" class="xref">RFC2474</a>]</span>) or design a new architecture and associated mechanisms aligned with the properties of ICN protocols, which differ substantially from those of TCP/IP. This position paper advocates the latter approach and comprises the author's personal views on how QoS capabilities ought to be accommodated in ICN protocols like CCNx or NDN. Specifically, these protocols differ in fundamental ways from TCP/IP. The important differences are summarized in <a href="#IPvsICN" class="xref">Table 1</a>:<a href="#section-1-1" class="pilcrow">¶</a></p>
---
> <p id="section-1-1">The TCP/IP protocol suite used on today's Internet has over 30 years of accumulated research and engineering into the provisioning of QoS machinery, employed with varying success in different environments. ICN protocols like NDN <span>[<a href="#NDN" class="cite xref">NDN</a>]</span> and CCNx <span>[<a href="#RFC8569" class="cite xref">RFC8569</a>]</span> <span>[<a href="#RFC8609" class="cite xref">RFC8609</a>]</span> have an accumulated ten years of research and very little deployment. We therefore have the opportunity to either recapitulate the approaches taken with TCP/IP (e.g., Intserv <span>[<a href="#RFC2998" class="cite xref">RFC2998</a>]</span> and Diffserv <span>[<a href="#RFC2474" class="cite xref">RFC2474</a>]</span>) or design a new architecture and associated mechanisms aligned with the properties of ICN protocols, which differ substantially from those of TCP/IP. This position paper advocates the latter approach and comprises the author's personal views on how QoS capabilities ought to be accommodated in ICN protocols like CCNx or NDN. Specifically, these protocols differ in fundamental ways from TCP/IP. The important differences are summarized in <a href="#IPvsICN" class="auto internal xref">Table 1</a>:<a href="#section-1-1" class="pilcrow">¶</a></p>
1405c1429
<         <p id="section-1-3.1">Note: Flow balance is a property of NDN and CCNx that ensures one Interest packet provokes a response of no more than one Data packet. Further discussion of the relevance of this to QoS can be found in <span>[<a href="#I-D.oran-icnrg-flowbalance" class="xref">FLOWBALANCE</a>]</span>.<a href="#section-1-3.1" class="pilcrow">¶</a></p>
---
>         <p id="section-1-3.1">Note: Flow balance is a property of NDN and CCNx that ensures one Interest packet provokes a response of no more than one Data packet. Further discussion of the relevance of this to QoS can be found in <span>[<a href="#I-D.oran-icnrg-flowbalance" class="cite xref">FLOWBALANCE</a>]</span>.<a href="#section-1-3.1" class="pilcrow">¶</a></p>
1407,1408c1431,1432
< <p id="section-1-4">This document proposes specific design patterns to achieve both flow classification and differentiated QoS treatment for ICN on both a flow and aggregate basis. It also considers the effect of caches in addition to memory, CPU, and link bandwidth as resources that should be subject to explicitly unfair resource allocation. The proposed methods are intended to operate purely at the network layer, providing the primitives needed to achieve both transport and higher-layer QoS objectives. It does not propose detailed protocol machinery to achieve these goals; it leaves these to supplementary specifications, such as <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="xref">FLOWCLASS</a>]</span> and <span>[<a href="#I-D.anilj-icnrg-dnc-qos-icn" class="xref">DNC-QOS-ICN</a>]</span>. It explicitly excludes any discussion of QoE, which can only be assessed and controlled at the application layer or above.<a href="#section-1-4" class="pilcrow">¶</a></p>
< <p id="section-1-5">Much of this document is derived from presentations the author has given at ICNRG meetings over the last few years that are available through the IETF datatracker (see, for example, <span>[<a href="#Oran2018QoSslides" class="xref">Oran2018QoSslides</a>]</span>).<a href="#section-1-5" class="pilcrow">¶</a></p>
---
> <p id="section-1-4">This document proposes specific design patterns to achieve both flow classification and differentiated QoS treatment for ICN on both a flow and aggregate basis. It also considers the effect of caches in addition to memory, CPU, and link bandwidth as resources that should be subject to explicitly unfair resource allocation. The proposed methods are intended to operate purely at the network layer, providing the primitives needed to achieve both transport and higher-layer QoS objectives. It does not propose detailed protocol machinery to achieve these goals; it leaves these to supplementary specifications, such as <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="cite xref">FLOWCLASS</a>]</span> and <span>[<a href="#I-D.anilj-icnrg-dnc-qos-icn" class="cite xref">DNC-QOS-ICN</a>]</span>. It explicitly excludes any discussion of QoE, which can only be assessed and controlled at the application layer or above.<a href="#section-1-4" class="pilcrow">¶</a></p>
> <p id="section-1-5">Much of this document is derived from presentations the author has given at ICNRG meetings over the last few years that are available through the IETF datatracker (see, for example, <span>[<a href="#Oran2018QoSslides" class="cite xref">Oran2018QoSslides</a>]</span>).<a href="#section-1-5" class="pilcrow">¶</a></p>
1425,1426c1449,1450
<     to be interpreted as described in BCP 14 <span>[<a href="#RFC2119" class="xref">RFC2119</a>]</span>
<         <span>[<a href="#RFC8174" class="xref">RFC8174</a>]</span> when, and only when, they appear in all capitals,
---
>     to be interpreted as described in BCP 14 <span>[<a href="#RFC2119" class="cite xref">RFC2119</a>]</span>
>         <span>[<a href="#RFC8174" class="cite xref">RFC8174</a>]</span> when, and only when, they appear in all capitals,
1454c1478
< <li class="normal" id="section-3-6.1">Applications with steep utility functions <span>[<a href="#Shenker2006" class="xref">Shenker2006</a>]</span>, such as real-time multimedia<a href="#section-3-6.1" class="pilcrow">¶</a>
---
> <li class="normal" id="section-3-6.1">Applications with steep utility functions <span>[<a href="#Shenker2006" class="cite xref">Shenker2006</a>]</span>, such as real-time multimedia<a href="#section-3-6.1" class="pilcrow">¶</a>
1463c1487
< <li class="normal" id="section-3-8.1">Some signaled QoS schemes, such as the Resource reSerVation Protocol (RSVP) <span>[<a href="#RFC2205" class="xref">RFC2205</a>]</span>, maintain state in routers for each flow, which scales linearly with the number of flows. For core routers through which pass millions to billions of flows, the memory required is infeasible to provide.<a href="#section-3-8.1" class="pilcrow">¶</a>
---
> <li class="normal" id="section-3-8.1">Some signaled QoS schemes, such as the Resource reSerVation Protocol (RSVP) <span>[<a href="#RFC2205" class="cite xref">RFC2205</a>]</span>, maintain state in routers for each flow, which scales linearly with the number of flows. For core routers through which pass millions to billions of flows, the memory required is infeasible to provide.<a href="#section-3-8.1" class="pilcrow">¶</a>
1465c1489
<         <li class="normal" id="section-3-8.2">The Internet is comprised of many minimally cooperating autonomous systems <span>[<a href="#AS" class="xref">AS</a>]</span>. There are practically no successful examples of QoS deployments crossing the AS boundaries of multiple service providers. In almost all cases, this limits the applicability of QoS capabilities to be intra-domain.<a href="#section-3-8.2" class="pilcrow">¶</a>
---
>         <li class="normal" id="section-3-8.2">The Internet is comprised of many minimally cooperating autonomous systems <span>[<a href="#AS" class="cite xref">AS</a>]</span>. There are practically no successful examples of QoS deployments crossing the AS boundaries of multiple service providers. In almost all cases, this limits the applicability of QoS capabilities to be intra-domain.<a href="#section-3-8.2" class="pilcrow">¶</a>
1468c1492
< <p id="section-3-9">This document adopts a narrow definition of QoS as <em>managed unfairness</em> (see note below). However, much of the networking literature uses the term more colloquially, applying it to any mechanism that improves overall performance. One could use a different, broader definition of QoS that encompasses optimizing the allocation of network resources across all offered traffic without considering individual users' traffic. A consequence would be the need to cover whether (and how) ICN might result in better overall performance than IP under constant resource conditions, which is a much broader goal than that attempted here. The chosen narrower scope comports with the commonly understood meaning of "QoS" in the research community. Under this scope, and under constant resource constraints, the only way to provide traffic discrimination is in fact to sacrifice fairness. Readers assuming the broader context will find a large class of proven techniques to be ignored. This is intentional. Among these are seamless producer mobility schemes like <span><a href="#Auge2018" class="xref">MAP-Me</a> [<a href="#Auge2018" class="xref">Auge2018</a>]</span> and network coding of ICN data as discussed in <span>[<a href="#I-D.irtf-nwcrg-nwc-ccn-reqs" class="xref">NWC-CCN-REQS</a>]</span>.<a href="#section-3-9" class="pilcrow">¶</a></p>
---
> <p id="section-3-9">This document adopts a narrow definition of QoS as <em>managed unfairness</em> (see note below). However, much of the networking literature uses the term more colloquially, applying it to any mechanism that improves overall performance. One could use a different, broader definition of QoS that encompasses optimizing the allocation of network resources across all offered traffic without considering individual users' traffic. A consequence would be the need to cover whether (and how) ICN might result in better overall performance than IP under constant resource conditions, which is a much broader goal than that attempted here. The chosen narrower scope comports with the commonly understood meaning of "QoS" in the research community. Under this scope, and under constant resource constraints, the only way to provide traffic discrimination is in fact to sacrifice fairness. Readers assuming the broader context will find a large class of proven techniques to be ignored. This is intentional. Among these are seamless producer mobility schemes like <span><a href="#Auge2018" class="internal xref">MAP-Me</a> [<a href="#Auge2018" class="cite xref">Auge2018</a>]</span> and network coding of ICN data as discussed in <span>[<a href="#I-D.irtf-nwcrg-nwc-ccn-reqs" class="cite xref">NWC-CCN-REQS</a>]</span>.<a href="#section-3-9" class="pilcrow">¶</a></p>
1473c1497
< <p id="section-3-12">For those unfamiliar with ICN protocols, a brief description of how NDN and CCNx operate as a packet network is in <a href="#ICNbasics" class="xref">Section 3.1</a>. Some further background on congestion control for ICN follows in <a href="#CCbasics" class="xref">Section 3.2</a>.<a href="#section-3-12" class="pilcrow">¶</a></p>
---
> <p id="section-3-12">For those unfamiliar with ICN protocols, a brief description of how NDN and CCNx operate as a packet network is in <a href="#ICNbasics" class="auto internal xref">Section 3.1</a>. Some further background on congestion control for ICN follows in <a href="#CCbasics" class="auto internal xref">Section 3.2</a>.<a href="#section-3-12" class="pilcrow">¶</a></p>
1479c1503
< <p id="section-3.1-1">The following summarizes the salient features of the NDN and CCNx ICN protocols relevant to congestion control and QoS. Quite extensive tutorial information may be found in a number of places, including material available from <span>[<a href="#NDNTutorials" class="xref">NDNTutorials</a>]</span>.<a href="#section-3.1-1" class="pilcrow">¶</a></p>
---
> <p id="section-3.1-1">The following summarizes the salient features of the NDN and CCNx ICN protocols relevant to congestion control and QoS. Quite extensive tutorial information may be found in a number of places, including material available from <span>[<a href="#NDNTutorials" class="cite xref">NDNTutorials</a>]</span>.<a href="#section-3.1-1" class="pilcrow">¶</a></p>
1497c1521
<           <li id="section-3.2-2.3">Beyond the basic protections against starvation, achieve "fairness" among competing traffic. Two common objective functions are max-min fairness <span>[<a href="#minmaxfairness" class="xref">minmaxfairness</a>]</span> and proportional fairness <span>[<a href="#proportionalfairness" class="xref">proportionalfairness</a>]</span>, both of which have been implemented and deployed successfully on packet networks for many years.<a href="#section-3.2-2.3" class="pilcrow">¶</a>
---
>           <li id="section-3.2-2.3">Beyond the basic protections against starvation, achieve "fairness" among competing traffic. Two common objective functions are max-min fairness <span>[<a href="#minmaxfairness" class="cite xref">minmaxfairness</a>]</span> and proportional fairness <span>[<a href="#proportionalfairness" class="cite xref">proportionalfairness</a>]</span>, both of which have been implemented and deployed successfully on packet networks for many years.<a href="#section-3.2-2.3" class="pilcrow">¶</a>
1500c1524
< <p id="section-3.2-3">Before moving on to QoS, it is useful to consider how congestion control works in NDN or CCNx. Unlike the IP protocol family, which relies exclusively on end-to-end congestion control (e.g., TCP <span>[<a href="#RFC0793" class="xref">RFC0793</a>]</span>, DCCP <span>[<a href="#RFC4340" class="xref">RFC4340</a>]</span>, SCTP <span>[<a href="#RFC4960" class="xref">RFC4960</a>]</span>, and QUIC <span>[<a href="#RFC9000" class="xref">RFC9000</a>]</span>), CCNx and NDN can employ hop-by-hop congestion control. There is per-Interest/Data state at every hop of the path, and therefore outstanding Interests provide information that can be used to optimize resource allocation for data returning on the inverse path, such as bandwidth sharing, prioritization, and overload control. In current designs, this allocation is often done using Interest counting. By accepting one Interest packet from a downstream node, this implicitly provides a guarantee (either hard or soft) that there is sufficient bandwidth on the inverse direction of the link to send back one Data packet. A number of congestion control schemes have been developed for ICN that operate in this fashion, for example, <span>[<a href="#Wang2013" class="xref">Wang2013</a>]</span>, <span>[<a href="#Mahdian2016" class="xref">Mahdian2016</a>]</span>, <span>[<a href="#Song2018" class="xref">Song2018</a>]</span>, and <span>[<a href="#Carofiglio2012" class="xref">Carofiglio2012</a>]</span>. Other schemes, like <span>[<a href="#Schneider2016" class="xref">Schneider2016</a>]</span>, neither count nor police Interests but instead monitor queues using AQM (active queue management) to mark returning Data packets that have experienced congestion. This later class of schemes is similar to those used on IP in the sense that they depend on consumers adequately reducing their rate of Interest injection to avoid Data packet drops due to buffer overflow in forwarders. The former class of schemes is (arguably) more robust against misbehavior by consumers.<a href="#section-3.2-3" class="pilcrow">¶</a></p>
---
> <p id="section-3.2-3">Before moving on to QoS, it is useful to consider how congestion control works in NDN or CCNx. Unlike the IP protocol family, which relies exclusively on end-to-end congestion control (e.g., TCP <span>[<a href="#RFC0793" class="cite xref">RFC0793</a>]</span>, DCCP <span>[<a href="#RFC4340" class="cite xref">RFC4340</a>]</span>, SCTP <span>[<a href="#RFC4960" class="cite xref">RFC4960</a>]</span>, and QUIC <span>[<a href="#RFC9000" class="cite xref">RFC9000</a>]</span>), CCNx and NDN can employ hop-by-hop congestion control. There is per-Interest/Data state at every hop of the path, and therefore outstanding Interests provide information that can be used to optimize resource allocation for data returning on the inverse path, such as bandwidth sharing, prioritization, and overload control. In current designs, this allocation is often done using Interest counting. By accepting one Interest packet from a downstream node, this implicitly provides a guarantee (either hard or soft) that there is sufficient bandwidth on the inverse direction of the link to send back one Data packet. A number of congestion control schemes have been developed for ICN that operate in this fashion, for example, <span>[<a href="#Wang2013" class="cite xref">Wang2013</a>]</span>, <span>[<a href="#Mahdian2016" class="cite xref">Mahdian2016</a>]</span>, <span>[<a href="#Song2018" class="cite xref">Song2018</a>]</span>, and <span>[<a href="#Carofiglio2012" class="cite xref">Carofiglio2012</a>]</span>. Other schemes, like <span>[<a href="#Schneider2016" class="cite xref">Schneider2016</a>]</span>, neither count nor police Interests but instead monitor queues using AQM (active queue management) to mark returning Data packets that have experienced congestion. This later class of schemes is similar to those used on IP in the sense that they depend on consumers adequately reducing their rate of Interest injection to avoid Data packet drops due to buffer overflow in forwarders. The former class of schemes is (arguably) more robust against misbehavior by consumers.<a href="#section-3.2-3" class="pilcrow">¶</a></p>
1508c1532
< <p id="section-3.2-6">A useful discussion of these properties and how they demonstrate the advantages of ICN approaches to congestion control can be found in <span>[<a href="#Carofiglio2016" class="xref">Carofiglio2016</a>]</span>.<a href="#section-3.2-6" class="pilcrow">¶</a></p>
---
> <p id="section-3.2-6">A useful discussion of these properties and how they demonstrate the advantages of ICN approaches to congestion control can be found in <span>[<a href="#Carofiglio2016" class="cite xref">Carofiglio2016</a>]</span>.<a href="#section-3.2-6" class="pilcrow">¶</a></p>
1518c1542
< <p id="section-4-1">QoS is achieved through managed unfairness in the allocation of resources in network elements, particularly in the routers that forward ICN packets. Hence, the first-order questions are the following: Which resources need to be allocated? How do you ascertain which traffic gets those allocations? In the case of CCNx or NDN, the important network element resources are given in <a href="#ICNresources" class="xref">Table 2</a>:<a href="#section-4-1" class="pilcrow">¶</a></p>
---
> <p id="section-4-1">QoS is achieved through managed unfairness in the allocation of resources in network elements, particularly in the routers that forward ICN packets. Hence, the first-order questions are the following: Which resources need to be allocated? How do you ascertain which traffic gets those allocations? In the case of CCNx or NDN, the important network element resources are given in <a href="#ICNresources" class="auto internal xref">Table 2</a>:<a href="#section-4-1" class="pilcrow">¶</a></p>
1568c1592
< <p id="section-5-1">TCP/IP has fewer resource types to manage than ICN, and in some cases, the allocation methods are simpler, as shown in <a href="#TCPIPresources" class="xref">Table 3</a>:<a href="#section-5-1" class="pilcrow">¶</a></p>
---
> <p id="section-5-1">TCP/IP has fewer resource types to manage than ICN, and in some cases, the allocation methods are simpler, as shown in <a href="#TCPIPresources" class="auto internal xref">Table 3</a>:<a href="#section-5-1" class="pilcrow">¶</a></p>
1609c1633
< <p id="section-5-4">For these resources, IP has specified three fundamental things, as shown in <a href="#IPQoSspecifiers" class="xref">Table 4</a>:<a href="#section-5-4" class="pilcrow">¶</a></p>
---
> <p id="section-5-4">For these resources, IP has specified three fundamental things, as shown in <a href="#IPQoSspecifiers" class="auto internal xref">Table 4</a>:<a href="#section-5-4" class="pilcrow">¶</a></p>
1649,1650c1673,1674
< <p id="section-5-7">With Intserv, RSVP <span>[<a href="#RFC2205" class="xref">RFC2205</a>]</span> carries two data structures: the Flow Specifier (FLOWSPEC) and the Traffic Specifier (TSPEC). The former fulfills the requirement to identify the equivalence class to which the QoS being signaled applies. The latter comprises the desired QoS treatment along with a description of the dynamic character of the traffic (e.g., average bandwidth and delay, peak bandwidth, etc.). Both of these encounter substantial scaling limits, which has meant that Intserv has historically been limited to confined topologies, and/or high-value usages, like traffic engineering.<a href="#section-5-7" class="pilcrow">¶</a></p>
< <p id="section-5-8">With Diffserv, the protocol encoding (six bits in the TOS field of the IP header) artificially limits the number of classes one can specify. These are documented in <span>[<a href="#RFC4594" class="xref">RFC4594</a>]</span>. Nonetheless, when used with fine-grained equivalence classes, one still runs into limits on the number of queues required.<a href="#section-5-8" class="pilcrow">¶</a></p>
---
> <p id="section-5-7">With Intserv, RSVP <span>[<a href="#RFC2205" class="cite xref">RFC2205</a>]</span> carries two data structures: the Flow Specifier (FLOWSPEC) and the Traffic Specifier (TSPEC). The former fulfills the requirement to identify the equivalence class to which the QoS being signaled applies. The latter comprises the desired QoS treatment along with a description of the dynamic character of the traffic (e.g., average bandwidth and delay, peak bandwidth, etc.). Both of these encounter substantial scaling limits, which has meant that Intserv has historically been limited to confined topologies, and/or high-value usages, like traffic engineering.<a href="#section-5-7" class="pilcrow">¶</a></p>
> <p id="section-5-8">With Diffserv, the protocol encoding (six bits in the TOS field of the IP header) artificially limits the number of classes one can specify. These are documented in <span>[<a href="#RFC4594" class="cite xref">RFC4594</a>]</span>. Nonetheless, when used with fine-grained equivalence classes, one still runs into limits on the number of queues required.<a href="#section-5-8" class="pilcrow">¶</a></p>
1664,1665c1688,1689
< <p id="section-6.1-1">First and foremost, hierarchical names are a much richer basis for specifying equivalence classes than IP 5-tuples. The IP address (or prefix) can only separate traffic by topology to the granularity of hosts and cannot express actual computational instances nor sets of data. Ports give some degree of per-instance demultiplexing, but this tends to be both coarse and ephemeral, while confounding the demultiplexing function with the assignment of QoS treatments to particular subsets of the data. Some degree of finer granularity is possible with IPv6 by exploiting the ability to use up to 64 bits of address for classifying traffic. In fact, the Hybrid Information-Centric Networking (hICN) project <span>[<a href="#I-D.muscariello-intarea-hicn" class="xref">HICN</a>]</span>, while adopting the request-response model of CCNx, uses IPv6 addresses as the available namespace, and IPv6 packets (plus "fake" TCP headers) as the wire format.<a href="#section-6.1-1" class="pilcrow">¶</a></p>
< <p id="section-6.1-2">Nonetheless, the flexibility of tokenized (i.e., strings treated as opaque tokens), variable length, hierarchical names allows one to directly associate classes of traffic for QoS purposes with the structure of an application namespace. The classification can be as coarse or fine-grained as desired by the application. While not <em>always</em> the case, there is typically a straightforward association between how objects are named and how they are grouped together for common treatment. Examples abound; a number can be conveniently found in <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="xref">FLOWCLASS</a>]</span>.<a href="#section-6.1-2" class="pilcrow">¶</a></p>
---
> <p id="section-6.1-1">First and foremost, hierarchical names are a much richer basis for specifying equivalence classes than IP 5-tuples. The IP address (or prefix) can only separate traffic by topology to the granularity of hosts and cannot express actual computational instances nor sets of data. Ports give some degree of per-instance demultiplexing, but this tends to be both coarse and ephemeral, while confounding the demultiplexing function with the assignment of QoS treatments to particular subsets of the data. Some degree of finer granularity is possible with IPv6 by exploiting the ability to use up to 64 bits of address for classifying traffic. In fact, the Hybrid Information-Centric Networking (hICN) project <span>[<a href="#I-D.muscariello-intarea-hicn" class="cite xref">HICN</a>]</span>, while adopting the request-response model of CCNx, uses IPv6 addresses as the available namespace, and IPv6 packets (plus "fake" TCP headers) as the wire format.<a href="#section-6.1-1" class="pilcrow">¶</a></p>
> <p id="section-6.1-2">Nonetheless, the flexibility of tokenized (i.e., strings treated as opaque tokens), variable length, hierarchical names allows one to directly associate classes of traffic for QoS purposes with the structure of an application namespace. The classification can be as coarse or fine-grained as desired by the application. While not <em>always</em> the case, there is typically a straightforward association between how objects are named and how they are grouped together for common treatment. Examples abound; a number can be conveniently found in <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="cite xref">FLOWCLASS</a>]</span>.<a href="#section-6.1-2" class="pilcrow">¶</a></p>
1672c1696
< <p id="section-6.2-1">In ICN, QoS is not pre-bound to network topology since names are non-topological, unlike unicast IP addresses. This allows QoS to be applied to multi-destination and multipath environments in a straightforward manner, rather than requiring either multicast with coarse class-based scheduling or complex signaling like that in RSVP Traffic Engineering (RSVP-TE) <span>[<a href="#RFC3209" class="xref">RFC3209</a>]</span> that is needed to make point-to-multipoint Multiprotocol Label Switching (MPLS) work.<a href="#section-6.2-1" class="pilcrow">¶</a></p>
---
> <p id="section-6.2-1">In ICN, QoS is not pre-bound to network topology since names are non-topological, unlike unicast IP addresses. This allows QoS to be applied to multi-destination and multipath environments in a straightforward manner, rather than requiring either multicast with coarse class-based scheduling or complex signaling like that in RSVP Traffic Engineering (RSVP-TE) <span>[<a href="#RFC3209" class="cite xref">RFC3209</a>]</span> that is needed to make point-to-multipoint Multiprotocol Label Switching (MPLS) work.<a href="#section-6.2-1" class="pilcrow">¶</a></p>
1695c1719
< <p id="section-6.3-5">Such mechanisms are typically described in NDN and CCNx as <em>forwarding strategies</em>. However, there is little or no guidance for which application actions or protocol machinery a forwarder should use to select the appropriate forwarding strategy for arriving Interest messages. See <span>[<a href="#BenAbraham2018" class="xref">BenAbraham2018</a>]</span> for an investigation of these issues. Associating forwarding strategies with the equivalence classes and QoS treatments directly can make them more accessible and useful to implement and deploy.<a href="#section-6.3-5" class="pilcrow">¶</a></p>
---
> <p id="section-6.3-5">Such mechanisms are typically described in NDN and CCNx as <em>forwarding strategies</em>. However, there is little or no guidance for which application actions or protocol machinery a forwarder should use to select the appropriate forwarding strategy for arriving Interest messages. See <span>[<a href="#BenAbraham2018" class="cite xref">BenAbraham2018</a>]</span> for an investigation of these issues. Associating forwarding strategies with the equivalence classes and QoS treatments directly can make them more accessible and useful to implement and deploy.<a href="#section-6.3-5" class="pilcrow">¶</a></p>
1697c1721
< <p id="section-6.3-7">One complication in the handling of ICN QoS treatments is not present in IP and hence worth mentioning. CCNx and NDN both perform <em>Interest aggregation</em> (see <span><a href="https://www.rfc-editor.org/rfc/rfc8569#section-2.4.2" class="relref">Section 2.4.2</a> of [<a href="#RFC8569" class="xref">RFC8569</a>]</span>). If an Interest arrives matching an existing PIT entry, but with a different QoS treatment from an Interest already forwarded, it can be tricky to decide whether to aggregate the Interest or forward it, and how to keep track of the differing QoS treatments for the two Interests. Exploration of the details surrounding these situations is beyond the scope of this document; further discussion can be found for the general case of flow balance and congestion control in <span>[<a href="#I-D.oran-icnrg-flowbalance" class="xref">FLOWBALANCE</a>]</span> and specifically for QoS treatments in <span>[<a href="#I-D.anilj-icnrg-dnc-qos-icn" class="xref">DNC-QOS-ICN</a>]</span>.<a href="#section-6.3-7" class="pilcrow">¶</a></p>
---
> <p id="section-6.3-7">One complication in the handling of ICN QoS treatments is not present in IP and hence worth mentioning. CCNx and NDN both perform <em>Interest aggregation</em> (see <span><a href="https://rfc-editor.org/rfc/rfc8569#section-2.4.2" class="relref">Section 2.4.2</a> of [<a href="#RFC8569" class="cite xref">RFC8569</a>]</span>). If an Interest arrives matching an existing PIT entry, but with a different QoS treatment from an Interest already forwarded, it can be tricky to decide whether to aggregate the Interest or forward it, and how to keep track of the differing QoS treatments for the two Interests. Exploration of the details surrounding these situations is beyond the scope of this document; further discussion can be found for the general case of flow balance and congestion control in <span>[<a href="#I-D.oran-icnrg-flowbalance" class="cite xref">FLOWBALANCE</a>]</span> and specifically for QoS treatments in <span>[<a href="#I-D.anilj-icnrg-dnc-qos-icn" class="cite xref">DNC-QOS-ICN</a>]</span>.<a href="#section-6.3-7" class="pilcrow">¶</a></p>
1704c1728
< <p id="section-6.4-1">IP has three forwarding semantics, with different QoS needs (Unicast, Anycast, Multicast). ICN has the single forwarding semantic, so any QoS machinery can be uniformly applied across any request/response invocation. This applies whether the forwarder employs dynamic destination routing, multi-destination forwarding with next hops tried serially, multi-destination with next hops used in parallel, or even localized flooding (e.g., directly on Layer 2 multicast mechanisms). Additionally, the pull-based model of ICN avoids a number of thorny multicast QoS problems that IP has (see <span>[<a href="#Wang2000" class="xref">Wang2000</a>]</span>, <span>[<a href="#RFC3170" class="xref">RFC3170</a>]</span>, and <span>[<a href="#Tseng2003" class="xref">Tseng2003</a>]</span>).<a href="#section-6.4-1" class="pilcrow">¶</a></p>
---
> <p id="section-6.4-1">IP has three forwarding semantics, with different QoS needs (Unicast, Anycast, Multicast). ICN has the single forwarding semantic, so any QoS machinery can be uniformly applied across any request/response invocation. This applies whether the forwarder employs dynamic destination routing, multi-destination forwarding with next hops tried serially, multi-destination with next hops used in parallel, or even localized flooding (e.g., directly on Layer 2 multicast mechanisms). Additionally, the pull-based model of ICN avoids a number of thorny multicast QoS problems that IP has (see <span>[<a href="#Wang2000" class="cite xref">Wang2000</a>]</span>, <span>[<a href="#RFC3170" class="cite xref">RFC3170</a>]</span>, and <span>[<a href="#Tseng2003" class="cite xref">Tseng2003</a>]</span>).<a href="#section-6.4-1" class="pilcrow">¶</a></p>
1722,1723c1746,1747
< <p id="section-6.5-3">See <span>[<a href="#RFC8569" class="xref">RFC8569</a>]</span> for the formal definitions.<a href="#section-6.5-3" class="pilcrow">¶</a></p>
< <p id="section-6.5-4">ICN flow classifiers, such as those in <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="xref">FLOWCLASS</a>]</span> can be used to achieve soft or hard partitioning (see note below) of cache resources in the CS of an ICN forwarder. For example, cached content for a given equivalence class can be considered <em>fate shared</em> in a cache whereby objects from the same equivalence class can be purged as a group rather than individually. This can recover cache space more quickly and at lower overhead than pure per-object replacement when a cache is under extreme pressure and in danger of thrashing. In addition, since the forwarder remembers the QoS treatment for each pending Interest in its PIT, the above cache controls can be augmented by policy to prefer retention of cached content for some equivalence classes as part of the cache replacement algorithm.<a href="#section-6.5-4" class="pilcrow">¶</a></p>
---
> <p id="section-6.5-3">See <span>[<a href="#RFC8569" class="cite xref">RFC8569</a>]</span> for the formal definitions.<a href="#section-6.5-3" class="pilcrow">¶</a></p>
> <p id="section-6.5-4">ICN flow classifiers, such as those in <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="cite xref">FLOWCLASS</a>]</span> can be used to achieve soft or hard partitioning (see note below) of cache resources in the CS of an ICN forwarder. For example, cached content for a given equivalence class can be considered <em>fate shared</em> in a cache whereby objects from the same equivalence class can be purged as a group rather than individually. This can recover cache space more quickly and at lower overhead than pure per-object replacement when a cache is under extreme pressure and in danger of thrashing. In addition, since the forwarder remembers the QoS treatment for each pending Interest in its PIT, the above cache controls can be augmented by policy to prefer retention of cached content for some equivalence classes as part of the cache replacement algorithm.<a href="#section-6.5-4" class="pilcrow">¶</a></p>
1736c1760
< <p id="section-7-2"><strong>Define equivalence classes using the name hierarchy rather than creating an independent traffic class definition</strong>. This directly associates the specification of equivalence classes of traffic with the structure of the application namespace. It can allow hierarchical decomposition of equivalence classes in a natural way because of the way hierarchical ICN names are constructed. Two practical mechanisms are presented in <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="xref">FLOWCLASS</a>]</span> with different trade-offs between security and the ability to aggregate flows. Either the prefix-based mechanism (the equivalence class component count (EC3) scheme) or the explicit name component-based mechanism (the equivalence class name component type (ECNCT) scheme), or both, could be adopted as the part of the QoS architecture for defining equivalence classes.<a href="#section-7-2" class="pilcrow">¶</a></p>
---
> <p id="section-7-2"><strong>Define equivalence classes using the name hierarchy rather than creating an independent traffic class definition</strong>. This directly associates the specification of equivalence classes of traffic with the structure of the application namespace. It can allow hierarchical decomposition of equivalence classes in a natural way because of the way hierarchical ICN names are constructed. Two practical mechanisms are presented in <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="cite xref">FLOWCLASS</a>]</span> with different trade-offs between security and the ability to aggregate flows. Either the prefix-based mechanism (the equivalence class component count (EC3) scheme) or the explicit name component-based mechanism (the equivalence class name component type (ECNCT) scheme), or both, could be adopted as the part of the QoS architecture for defining equivalence classes.<a href="#section-7-2" class="pilcrow">¶</a></p>
1747c1771
< <p id="section-7-7">See <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="xref">FLOWCLASS</a>]</span> for specific mechanisms to achieve this.<a href="#section-7-7" class="pilcrow">¶</a></p>
---
> <p id="section-7-7">See <span>[<a href="#I-D.moiseenko-icnrg-flowclass" class="cite xref">FLOWCLASS</a>]</span> for specific mechanisms to achieve this.<a href="#section-7-7" class="pilcrow">¶</a></p>
1786c1810
< <li class="normal" id="section-7-18.1">A "burst" treatment, where an initial Interest gives an aggregate data size to request allocation of link capacity for a large burst of Interest/Data exchanges. The Interest can be rejected at any hop if the resources are not available. Such a treatment can also accommodate Data implosion produced by the discovery procedures of management protocols like <span>[<a href="#I-D.irtf-icnrg-ccninfo" class="xref">CCNINFO</a>]</span>.<a href="#section-7-18.1" class="pilcrow">¶</a>
---
> <li class="normal" id="section-7-18.1">A "burst" treatment, where an initial Interest gives an aggregate data size to request allocation of link capacity for a large burst of Interest/Data exchanges. The Interest can be rejected at any hop if the resources are not available. Such a treatment can also accommodate Data implosion produced by the discovery procedures of management protocols like <span>[<a href="#I-D.irtf-icnrg-ccninfo" class="cite xref">CCNINFO</a>]</span>.<a href="#section-7-18.1" class="pilcrow">¶</a>
1788c1812
<         <li class="normal" id="section-7-18.2">A "reliable" treatment, which affects preference for allocation of PIT space for the Interest and CS space for the Data in order to improve the robustness of IoT data delivery in a constrained environment, as is described in <span>[<a href="#I-D.gundogan-icnrg-iotqos" class="xref">IOTQOS</a>]</span>.<a href="#section-7-18.2" class="pilcrow">¶</a>
---
>         <li class="normal" id="section-7-18.2">A "reliable" treatment, which affects preference for allocation of PIT space for the Interest and CS space for the Data in order to improve the robustness of IoT data delivery in a constrained environment, as is described in <span>[<a href="#I-D.gundogan-icnrg-iotqos" class="cite xref">IOTQOS</a>]</span>.<a href="#section-7-18.2" class="pilcrow">¶</a>
1790c1814
<         <li class="normal" id="section-7-18.3">A "search" treatment, which, within the specified Interest Lifetime, tries many paths either in parallel or serially to potentially many content sources, to maximize the probability that the requested item will be found. This is done at the expense of the extra bandwidth of both forwarding Interests and receiving multiple responses upstream of an aggregation point. The treatment can encode a value expressing trade-offs like breadth-first versus depth-first search, and bounds on the total resource expenditure. Such a treatment would be useful for instrumentation protocols like <span>[<a href="#I-D.irtf-icnrg-icntraceroute" class="xref">ICNTRACEROUTE</a>]</span>.<a href="#section-7-18.3" class="pilcrow">¶</a>
---
>         <li class="normal" id="section-7-18.3">A "search" treatment, which, within the specified Interest Lifetime, tries many paths either in parallel or serially to potentially many content sources, to maximize the probability that the requested item will be found. This is done at the expense of the extra bandwidth of both forwarding Interests and receiving multiple responses upstream of an aggregation point. The treatment can encode a value expressing trade-offs like breadth-first versus depth-first search, and bounds on the total resource expenditure. Such a treatment would be useful for instrumentation protocols like <span>[<a href="#I-D.irtf-icnrg-icntraceroute" class="cite xref">ICNTRACEROUTE</a>]</span>.<a href="#section-7-18.3" class="pilcrow">¶</a>
1794c1818
<         <p id="section-7-19.1">As an aside, loose latency control (on the order of seconds or tens of milliseconds as opposed milliseconds or microseconds) can be achieved by bounding Interest Lifetime as long as this lifetime machinery is not also used as an application mechanism to provide subscriptions or to establish path traces for producer mobility. See <span>[<a href="#Krol2018" class="xref">Krol2018</a>]</span> for a discussion of the network versus application timescale issues in ICN protocols.<a href="#section-7-19.1" class="pilcrow">¶</a></p>
---
>         <p id="section-7-19.1">As an aside, loose latency control (on the order of seconds or tens of milliseconds as opposed milliseconds or microseconds) can be achieved by bounding Interest Lifetime as long as this lifetime machinery is not also used as an application mechanism to provide subscriptions or to establish path traces for producer mobility. See <span>[<a href="#Krol2018" class="cite xref">Krol2018</a>]</span> for a discussion of the network versus application timescale issues in ICN protocols.<a href="#section-7-19.1" class="pilcrow">¶</a></p>
1812c1836
< <p id="section-7.1-5">Superficially, it would be quite straightforward to accommodate Intserv-equivalent traffic descriptions in CCNx or NDN. One could define a new TLV for the Interest message to carry a TSPEC. A forwarder encountering this, together with a QoS treatment request (e.g., as proposed in <a href="#qostreatments" class="xref">Section 6.3</a>), could associate the traffic specification with the corresponding equivalence class derived from the name in the Interest. This would allow the forwarder to create state that not only would apply to the returning Data for that Interest when being queued on the downstream interface but also be maintained as soft state across multiple Interest/Data exchanges to drive policing and shaping algorithms at per-flow granularity. The cost in Interest message overhead would be modest; however, the complications associated with managing different traffic specifications in different Interests for the same equivalence class might be substantial. Of course, all the scalability considerations with maintaining per-flow state also come into play.<a href="#section-7.1-5" class="pilcrow">¶</a></p>
---
> <p id="section-7.1-5">Superficially, it would be quite straightforward to accommodate Intserv-equivalent traffic descriptions in CCNx or NDN. One could define a new TLV for the Interest message to carry a TSPEC. A forwarder encountering this, together with a QoS treatment request (e.g., as proposed in <a href="#qostreatments" class="auto internal xref">Section 6.3</a>), could associate the traffic specification with the corresponding equivalence class derived from the name in the Interest. This would allow the forwarder to create state that not only would apply to the returning Data for that Interest when being queued on the downstream interface but also be maintained as soft state across multiple Interest/Data exchanges to drive policing and shaping algorithms at per-flow granularity. The cost in Interest message overhead would be modest; however, the complications associated with managing different traffic specifications in different Interests for the same equivalence class might be substantial. Of course, all the scalability considerations with maintaining per-flow state also come into play.<a href="#section-7.1-5" class="pilcrow">¶</a></p>
1825c1849
<           <p id="section-7.1-10.1">The earliest example the author is aware of is <span>[<a href="#Autonet" class="xref">Autonet</a>]</span>.<a href="#section-7.1-10.1" class="pilcrow">¶</a></p>
---
>           <p id="section-7.1-10.1">The earliest example the author is aware of is <span>[<a href="#Autonet" class="cite xref">Autonet</a>]</span>.<a href="#section-7.1-10.1" class="pilcrow">¶</a></p>
1837c1861
<           <li class="normal" id="section-7.1-12.5">Upon the Data message arrival, the consumer would know if admission succeeded or not, and subsequent Interests could rely on the QoS state being in place until either some failure occurs, or a topology or other forwarding change alters the forwarding path. To deal with this, additional machinery is needed to ensure subsequent Interests for an admitted flow either follow that path or an error is reported. One possibility (also useful in many other contexts), is to employ a <em>Path Steering</em> mechanism, such as the one described in <span>[<a href="#Moiseenko2017" class="xref">Moiseenko2017</a>]</span>.<a href="#section-7.1-12.5" class="pilcrow">¶</a>
---
>           <li class="normal" id="section-7.1-12.5">Upon the Data message arrival, the consumer would know if admission succeeded or not, and subsequent Interests could rely on the QoS state being in place until either some failure occurs, or a topology or other forwarding change alters the forwarding path. To deal with this, additional machinery is needed to ensure subsequent Interests for an admitted flow either follow that path or an error is reported. One possibility (also useful in many other contexts), is to employ a <em>Path Steering</em> mechanism, such as the one described in <span>[<a href="#Moiseenko2017" class="cite xref">Moiseenko2017</a>]</span>.<a href="#section-7.1-12.5" class="pilcrow">¶</a>
