119,139c119,144
<    uncompressed:  Describes an arbitrary set of bytes in their original
<       form, prior to being subjected to compression.
< 
<    compressed:  Describes the result of passing a set of bytes through
<       this mechanism.  The original input has thus been compressed.
< 
<    decompressed:  Describes the result of passing a set of bytes through
<       the reverse of this mechanism.  When this is successful, the
<       decompressed payload and the uncompressed payload are
<       indistinguishable.
< 
<    encode:  The process of translating data from one form to another;
<       this may include compression, or it may refer to other
<       translations done as part of this specification.
< 
<    decode:  The reverse of "encode"; describes a process of reversing a
<       prior encoding to recover the original content.
< 
<    frame:  Content compressed by Zstandard is transformed into a
<       Zstandard frame.  Multiple frames can be appended into a single
<       file or stream.  A frame is completely independent, has a defined
---
>    uncompressed:
>       Describes an arbitrary set of bytes in their original form, prior
>       to being subjected to compression.
> 
>    compressed:
>       Describes the result of passing a set of bytes through this
>       mechanism.  The original input has thus been compressed.
> 
>    decompressed:
>       Describes the result of passing a set of bytes through the reverse
>       of this mechanism.  When this is successful, the decompressed
>       payload and the uncompressed payload are indistinguishable.
> 
>    encode:
>       The process of translating data from one form to another; this may
>       include compression, or it may refer to other translations done as
>       part of this specification.
> 
>    decode:
>       The reverse of "encode"; describes a process of reversing a prior
>       encoding to recover the original content.
> 
>    frame:
>       Content compressed by Zstandard is transformed into a Zstandard
>       frame.  Multiple frames can be appended into a single file or
>       stream.  A frame is completely independent, has a defined
143,145c148,151
<    block:  A frame encapsulates one or multiple blocks.  Each block
<       contains arbitrary content, which is described by its header, and
<       has a guaranteed maximum content size that depends upon frame
---
>    block:
>       A frame encapsulates one or multiple blocks.  Each block contains
>       arbitrary content, which is described by its header, and has a
>       guaranteed maximum content size that depends upon frame
150,154c156,161
<    natural order:  A sequence or ordering of objects or values that is
<       typical of that type of object or value.  A set of unique
<       integers, for example, is in "natural order" if, when progressing
<       from one element in the set or sequence to the next, there is
<       never a decrease in value.
---
>    natural order:
>       A sequence or ordering of objects or values that is typical of
>       that type of object or value.  A set of unique integers, for
>       example, is in "natural order" if, when progressing from one
>       element in the set or sequence to the next, there is never a
>       decrease in value.
235,239c242,247
<    Content_Checksum:  An optional 32-bit checksum, only present if
<       Content_Checksum_Flag is set.  The content checksum is the result
<       of the XXH64() hash function [XXHASH] digesting the original
<       (decoded) data as input, and a seed of zero.  The low 4 bytes of
<       the checksum are stored in little-endian format.
---
>    Content_Checksum:
>       An optional 32-bit checksum, only present if Content_Checksum_Flag
>       is set.  The content checksum is the result of the XXH64() hash
>       function [XXHASH] digesting the original (decoded) data as input,
>       and a seed of zero.  The low 4 bytes of the checksum are stored in
>       little-endian format.
375c383
<    Frame_Content_Size, which can be any value from 0 to 2^(64) - 1 bytes
---
>    Frame_Content_Size, which can be any value from 0 to 2^64 - 1 bytes
453c461
<                     +================+================+
---
>                      +================+==============+
455c463
<                     +================+================+
---
>                      +================+==============+
457c465
<                     +----------------+----------------+
---
>                      +----------------+--------------+
459c467
<                     +----------------+----------------+
---
>                      +----------------+--------------+
461,465c469,473
<                     +----------------+----------------+
<                     |       4        | 0 - 2^(32) - 1 |
<                     +----------------+----------------+
<                     |       8        | 0 - 2^(64) - 1 |
<                     +----------------+----------------+
---
>                      +----------------+--------------+
>                      |       4        | 0 - 2^32 - 1 |
>                      +----------------+--------------+
>                      |       8        | 0 - 2^64 - 1 |
>                      +----------------+--------------+
528,533c536,543
<    Raw_Block:  This is an uncompressed block.  Block_Content contains
<       Block_Size bytes.
< 
<    RLE_Block:  This is a single byte, repeated Block_Size times.
<       Block_Content consists of a single byte.  On the decompression
<       side, this byte must be repeated Block_Size times.
---
>    Raw_Block:
>       This is an uncompressed block.  Block_Content contains Block_Size
>       bytes.
> 
>    RLE_Block:
>       This is a single byte, repeated Block_Size times.  Block_Content
>       consists of a single byte.  On the decompression side, this byte
>       must be repeated Block_Size times.
540,543c550,553
<    Reserved:  This is not a block.  This value cannot be used with the
<       current specification.  If such a value is present, it is
<       considered to be corrupt data, and a compliant decoder must reject
<       it.
---
>    Reserved:
>       This is not a block.  This value cannot be used with the current
>       specification.  If such a value is present, it is considered to be
>       corrupt data, and a compliant decoder must reject it.
679,694c689,708
<    Raw_Literals_Block:  Literals are stored uncompressed.
<       Literals_Section_Content is Regenerated_Size.
< 
<    RLE_Literals_Block:  Literals consist of a single-byte value repeated
<       Regenerated_Size times.  Literals_Section_Content is 1.
< 
<    Compressed_Literals_Block:  This is a standard Huffman-compressed
<       block, starting with a Huffman tree description.  See details
<       below.  Literals_Section_Content is Compressed_Size.
< 
<    Treeless_Literals_Block:  This is a Huffman-compressed block, using
<       the Huffman tree from the previous Compressed_Literals_Block or a
<       dictionary if there is no previous Huffman-compressed literals
<       block.  Huffman_Tree_Description will be skipped.  Note that if
<       this mode is triggered without any previous Huffman table in the
<       frame (or dictionary, per Section 5), it should be treated as data
---
>    Raw_Literals_Block:
>       Literals are stored uncompressed.  Literals_Section_Content is
>       Regenerated_Size.
> 
>    RLE_Literals_Block:
>       Literals consist of a single-byte value repeated Regenerated_Size
>       times.  Literals_Section_Content is 1.
> 
>    Compressed_Literals_Block:
>       This is a standard Huffman-compressed block, starting with a
>       Huffman tree description.  See details below.
>       Literals_Section_Content is Compressed_Size.
> 
>    Treeless_Literals_Block:
>       This is a Huffman-compressed block, using the Huffman tree from
>       the previous Compressed_Literals_Block or a dictionary if there is
>       no previous Huffman-compressed literals block.
>       Huffman_Tree_Description will be skipped.  Note that if this mode
>       is triggered without any previous Huffman table in the frame (or
>       dictionary, per Section 5), it should be treated as data
712,718c726,734
<    Size_Format == 00 or 10:  Size_Format uses 1 bit.  Regenerated_Size
<       uses 5 bits (value 0-31).  Literals_Section_Header uses 1 byte.
<       Regenerated_Size = Literal_Section_Header[0]>>3.
< 
<    Size_Format == 01:  Size_Format uses 2 bits.  Regenerated_Size uses
<       12 bits (values 0-4095).  Literals_Section_Header uses 2 bytes.
<       Regenerated_Size = (Literals_Section_Header[0]>>4) +
---
>    Size_Format == 00 or 10:
>       Size_Format uses 1 bit.  Regenerated_Size uses 5 bits (value
>       0-31).  Literals_Section_Header uses 1 byte.  Regenerated_Size =
>       Literal_Section_Header[0]>>3.
> 
>    Size_Format == 01:
>       Size_Format uses 2 bits.  Regenerated_Size uses 12 bits (values
>       0-4095).  Literals_Section_Header uses 2 bytes.  Regenerated_Size
>       = (Literals_Section_Header[0]>>4) +
721,722c737,739
<    Size_Format == 11:  Size_Format uses 2 bits.  Regenerated_Size uses
<       20 bits (values 0-1048575).  Literals_Section_Header uses 3 bytes.
---
>    Size_Format == 11:
>       Size_Format uses 2 bits.  Regenerated_Size uses 20 bits (values
>       0-1048575).  Literals_Section_Header uses 3 bytes.
734,748c751,765
<    Size_Format == 00:  A single stream.  Both Regenerated_Size and
<       Compressed_Size use 10 bits (values 0-1023).
<       Literals_Section_Header uses 3 bytes.
< 
<    Size_Format == 01:  4 streams.  Both Regenerated_Size and
<       Compressed_Size use 10 bits (values 0-1023).
<       Literals_Section_Header uses 3 bytes.
< 
<    Size_Format == 10:  4 streams.  Both Regenerated_Size and
<       Compressed_Size use 14 bits (values 0-16383).
<       Literals_Section_Header uses 4 bytes.
< 
<    Size_Format == 11:  4 streams.  Both Regenerated_Size and
<       Compressed_Size use 18 bits (values 0-262143).
<       Literals_Section_Header uses 5 bytes.
---
>    Size_Format == 00:
>       A single stream.  Both Regenerated_Size and Compressed_Size use 10
>       bits (values 0-1023).  Literals_Section_Header uses 3 bytes.
> 
>    Size_Format == 01:
>       4 streams.  Both Regenerated_Size and Compressed_Size use 10 bits
>       (values 0-1023).  Literals_Section_Header uses 3 bytes.
> 
>    Size_Format == 10:
>       4 streams.  Both Regenerated_Size and Compressed_Size use 14 bits
>       (values 0-16383).  Literals_Section_Header uses 4 bytes.
> 
>    Size_Format == 11:
>       4 streams.  Both Regenerated_Size and Compressed_Size use 18 bits
>       (values 0-262143).  Literals_Section_Header uses 5 bytes.
917,928c934,945
<    RLE_Mode:  The table description consists of a single byte, which
<       contains the symbol's value.  This symbol will be used for all
<       sequences.
< 
<    FSE_Compressed_Mode:  Standard FSE compression.  A distribution table
<       will be present.  The format of this distribution table is
<       described in Section 4.1.1.  Note that the maximum allowed
<       accuracy log for literals length code and match length code tables
<       is 9, and the maximum accuracy log for the offset code table is 8.
<       This mode must not be used when only one symbol is present;
<       RLE_Mode should be used instead (although any other mode will
<       work).
---
>    RLE_Mode:
>       The table description consists of a single byte, which contains
>       the symbol's value.  This symbol will be used for all sequences.
> 
>    FSE_Compressed_Mode:
>       Standard FSE compression.  A distribution table will be present.
>       The format of this distribution table is described in
>       Section 4.1.1.  Note that the maximum allowed accuracy log for
>       literals length code and match length code tables is 9, and the
>       maximum accuracy log for the offset code table is 8.  This mode
>       must not be used when only one symbol is present; RLE_Mode should
>       be used instead (although any other mode will work).
930c947,948
<    Repeat_Mode:  The table used in the previous Compressed_Block with
---
>    Repeat_Mode:
>       The table used in the previous Compressed_Block with
1257c1275
<    +=======+==========+===========+===========+===========+============+
---
>    +=======+=========+===========+===========+===========+============+
1260c1278
<    +=======+==========+===========+===========+===========+============+
---
>    +=======+=========+===========+===========+===========+============+
1263c1281
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1265,1268c1283,1286
<    +-------+----------+-----------+-----------+-----------+------------+
<    |      1|    22    |    1111   |     1     |     4     |repeat 1; no|
<    |       |          |           |           |           |change      |
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
>    |      1|    22   |    1111   |     1     |     4     | repeat 1;  |
>    |       |         |           |           |           | no change  |
>    +-------+---------+-----------+-----------+-----------+------------+
1270c1288
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1272c1290
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1274c1292
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1277c1295
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1279,1281c1297,1299
<    |       |          |           |           |           |rotate 3 to |
<    |       |          |           |           |           |1           |
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    |       |         |           |           |           | rotate 3   |
>    |       |         |           |           |           | to 1       |
>    +-------+---------+-----------+-----------+-----------+------------+
1285c1303
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1287c1305
<    +-------+----------+-----------+-----------+-----------+------------+
---
>    +-------+---------+-----------+-----------+-----------+------------+
1319,1332c1337,1351
<    Magic_Number:  4 bytes, little-endian format.  Value: 0x184D2A5?,
<       which means any value from 0x184D2A50 to 0x184D2A5F.  All 16
<       values are valid to identify a skippable frame.  This
<       specification does not detail any specific tagging methods for
<       skippable frames.
< 
<    Frame_Size:  This is the size, in bytes, of the following User_Data
<       (without including the magic number nor the size field itself).
<       This field is represented using 4 bytes, little-endian format,
<       unsigned 32 bits.  This means User_Data can't be bigger than
<       (2^(32) -1) bytes.
< 
<    User_Data:  This field can be anything.  Data will just be skipped by
<       the decoder.
---
>    Magic_Number:
>       4 bytes, little-endian format.  Value: 0x184D2A5?, which means any
>       value from 0x184D2A50 to 0x184D2A5F.  All 16 values are valid to
>       identify a skippable frame.  This specification does not detail
>       any specific tagging methods for skippable frames.
> 
>    Frame_Size:
>       This is the size, in bytes, of the following User_Data (without
>       including the magic number nor the size field itself).  This field
>       is represented using 4 bytes, little-endian format, unsigned 32
>       bits.  This means User_Data can't be bigger than (2^32 -1) bytes.
> 
>    User_Data:
>       This field can be anything.  Data will just be skipped by the
>       decoder.
1385,1389c1404,1408
<    Remaining probabilities + 1:  For example, presuming an Accuracy_Log
<       of 8, and presuming 100 probabilities points have already been
<       distributed, the decoder may read any value from 0 to (256 - 100 +
<       1) == 157, inclusive.  Therefore, it must read log_(2)sup(157) ==
<       8 bits.
---
>    Remaining probabilities + 1:
>       For example, presuming an Accuracy_Log of 8, and presuming 100
>       probabilities points have already been distributed, the decoder
>       may read any value from 0 to (256 - 100 + 1) == 157, inclusive.
>       Therefore, it must read log_2sup(157) == 8 bits.
1609,1610c1628,1629
<    advancing to the next power of 2.  The sum of 2^((Weight-1))
<    (excluding 0's) is 15.  The nearest power of 2 is 16.  Therefore,
---
>    advancing to the next power of 2.  The sum of 2^(Weight-1) (excluding
>    0's) is 15.  The nearest power of 2 is 16.  Therefore,
1618,1620c1637,1640
<    headerByte < 128:  The series of weights is compressed using FSE (see
<       below).  The length of the FSE-compressed series is equal to
<       headerByte (0-127).
---
>    headerByte < 128:
>       The series of weights is compressed using FSE (see below).  The
>       length of the FSE-compressed series is equal to headerByte
>       (0-127).
1821c1841
<          high range: >= (2^(31))
---
>          high range: >= (2^31)
1823,1844c1843,1864
<    Entropy_Tables:  Follow the same format as the tables in compressed
<       blocks.  See the relevant FSE and Huffman sections for how to
<       decode these tables.  They are stored in the following order:
<       Huffman table for literals, FSE table for offsets, FSE table for
<       match lengths, and FSE table for literals lengths.  These tables
<       populate the Repeat Stats literals mode and Repeat distribution
<       mode for sequence decoding.  It is finally followed by 3 offset
<       values, populating repeat offsets (instead of using {1,4,8}),
<       stored in order, 4 bytes little-endian each, for a total of 12
<       bytes.  Each repeat offset must have a value less than the
<       dictionary size.
< 
<    Content:  The rest of the dictionary is its content.  The content
<       acts as a "past" in front of data to be compressed or
<       decompressed, so it can be referenced in sequence commands.  As
<       long as the amount of data decoded from this frame is less than or
<       equal to Window_Size, sequence commands may specify offsets longer
<       than the total length of decoded output so far to reference back
<       to the dictionary, even parts of the dictionary with offsets
<       larger than Window_Size.  After the total output has surpassed
<       Window_Size, however, this is no longer allowed, and the
<       dictionary is no longer accessible.
---
>    Entropy_Tables:
>       Follow the same format as the tables in compressed blocks.  See
>       the relevant FSE and Huffman sections for how to decode these
>       tables.  They are stored in the following order: Huffman table for
>       literals, FSE table for offsets, FSE table for match lengths, and
>       FSE table for literals lengths.  These tables populate the Repeat
>       Stats literals mode and Repeat distribution mode for sequence
>       decoding.  It is finally followed by 3 offset values, populating
>       repeat offsets (instead of using {1,4,8}), stored in order, 4
>       bytes little-endian each, for a total of 12 bytes.  Each repeat
>       offset must have a value less than the dictionary size.
> 
>    Content:
>       The rest of the dictionary is its content.  The content acts as a
>       "past" in front of data to be compressed or decompressed, so it
>       can be referenced in sequence commands.  As long as the amount of
>       data decoded from this frame is less than or equal to Window_Size,
>       sequence commands may specify offsets longer than the total length
>       of decoded output so far to reference back to the dictionary, even
>       parts of the dictionary with offsets larger than Window_Size.
>       After the total output has surpassed Window_Size, however, this is
>       no longer allowed, and the dictionary is no longer accessible.
1926,1927c1946,1947
<    Description:  A stream of bytes compressed using the Zstandard
<       protocol
---
>    Description:
>       A stream of bytes compressed using the Zstandard protocol
1944,1946c1964,1966
<    Fragment Identifier Considerations:  The syntax and semantics of
<       fragment identifiers specified for +zstd should be as specified
<       for 'application/zstd'.
---
>    Fragment Identifier Considerations:
>       The syntax and semantics of fragment identifiers specified for
>       +zstd should be as specified for 'application/zstd'.
1950c1970,1971
<    Contact:  Refer to the author for the 'application/zstd' media type.
---
>    Contact:
>       Refer to the author for the 'application/zstd' media type.
2447d2467
< 
2456d2475
< 
