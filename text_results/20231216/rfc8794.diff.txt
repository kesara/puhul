88,101c88,101
<        11.1.2.  "<EBMLSchema>" Element
<        11.1.3.  "<EBMLSchema>" Namespace
<        11.1.4.  "<EBMLSchema>" Attributes
<        11.1.5.  "<element>" Element
<        11.1.6.  "<element>" Attributes
<        11.1.7.  "<documentation>" Element
<        11.1.8.  "<documentation>" Attributes
<        11.1.9.  "<implementation_note>" Element
<        11.1.10. "<implementation_note>" Attributes
<        11.1.11. "<restriction>" Element
<        11.1.12. "<enum>" Element
<        11.1.13. "<enum>" Attributes
<        11.1.14. "<extension>" Element
<        11.1.15. "<extension>" Attributes
---
>        11.1.2.  <EBMLSchema> Element
>        11.1.3.  <EBMLSchema> Namespace
>        11.1.4.  <EBMLSchema> Attributes
>        11.1.5.  <element> Element
>        11.1.6.  <element> Attributes
>        11.1.7.  <documentation> Element
>        11.1.8.  <documentation> Attributes
>        11.1.9.  <implementation_note> Element
>        11.1.10. <implementation_note> Attributes
>        11.1.11. <restriction> Element
>        11.1.12. <enum> Element
>        11.1.13. <enum> Attributes
>        11.1.14. <extension> Element
>        11.1.15. <extension> Attributes
190c190
<    and application of "EBML".  Specific terms are defined below:
---
>    and application of EBML.  Specific terms are defined below:
192c192
<    "EBML":  Extensible Binary Meta Language
---
>    EBML:  Extensible Binary Meta Language
194,196c194,196
<    "EBML Document Type":  A name provided by an "EBML Schema" to
<       designate a particular implementation of "EBML" for a data format
<       (e.g., Matroska and WebM).
---
>    EBML Document Type:  A name provided by an EBML Schema to designate a
>       particular implementation of EBML for a data format (e.g.,
>       Matroska and WebM).
198,199c198,199
<    "EBML Schema":  A standardized definition for the structure of an
<       "EBML Document Type".
---
>    EBML Schema:  A standardized definition for the structure of an EBML
>       Document Type.
201,202c201,202
<    "EBML Document":  A datastream comprised of only two components, an
<       "EBML Header" and an "EBML Body".
---
>    EBML Document:  A datastream comprised of only two components, an
>       EBML Header and an EBML Body.
204,205c204,205
<    "EBML Reader":  A data parser that interprets the semantics of an
<       "EBML Document" and creates a way for programs to use "EBML".
---
>    EBML Reader:  A data parser that interprets the semantics of an EBML
>       Document and creates a way for programs to use EBML.
207,208c207,208
<    "EBML Stream":  A file that consists of one or more "EBML Documents"
<       that are concatenated together.
---
>    EBML Stream:  A file that consists of one or more EBML Documents that
>       are concatenated together.
210,213c210,213
<    "EBML Header":  A declaration that provides processing instructions
<       and identification of the "EBML Body".  The "EBML Header" is
<       analogous to an XML Declaration [XML] (see Section 2.8 on "Prolog
<       and Document Type Declaration").
---
>    EBML Header:  A declaration that provides processing instructions and
>       identification of the EBML Body.  The EBML Header is analogous to
>       an XML Declaration [XML] (see Section 2.8 on "Prolog and Document
>       Type Declaration").
215,216c215
<    "EBML Body":  All data of an "EBML Document" following the "EBML
<       Header".
---
>    EBML Body:  All data of an EBML Document following the EBML Header.
218c217
<    "Variable-Size Integer":  A compact variable-length binary value that
---
>    Variable-Size Integer:  A compact variable-length binary value that
221c220
<    "VINT":  Also known as "Variable-Size Integer".
---
>    VINT:  Also known as Variable-Size Integer.
223,225c222,223
<    "EBML Element":  A foundation block of data that contains three
<       parts: an "Element ID", an "Element Data Size", and "Element
<       Data".
---
>    EBML Element:  A foundation block of data that contains three parts:
>       an Element ID, an Element Data Size, and Element Data.
227,229c225,227
<    "Element ID":  A binary value, encoded as a "Variable-Size Integer",
<       used to uniquely identify a defined "EBML Element" within a
<       specific "EBML Schema".
---
>    Element ID:  A binary value, encoded as a Variable-Size Integer, used
>       to uniquely identify a defined EBML Element within a specific EBML
>       Schema.
231,232c229,230
<    "Element Data Size":  An expression, encoded as a "Variable-Size
<       Integer", of the length in octets of "Element Data".
---
>    Element Data Size:  An expression, encoded as a Variable-Size
>       Integer, of the length in octets of Element Data.
234,235c232,233
<    "VINTMAX":  The maximum possible value that can be stored as "Element
<       Data Size".
---
>    VINTMAX:  The maximum possible value that can be stored as Element
>       Data Size.
237,238c235
<    "Unknown-Sized Element":  An "Element" with an unknown "Element Data
<       Size".
---
>    Unknown-Sized Element:  An Element with an unknown Element Data Size.
240,243c237,240
<    "Element Data":  The value(s) of the "EBML Element", which is
<       identified by its "Element ID" and "Element Data Size".  The form
<       of the "Element Data" is defined by this document and the
<       corresponding "EBML Schema" of the Element's "EBML Document Type".
---
>    Element Data:  The value(s) of the EBML Element, which is identified
>       by its Element ID and Element Data Size.  The form of the Element
>       Data is defined by this document and the corresponding EBML Schema
>       of the Element's EBML Document Type.
245,246c242
<    "Root Level":  The starting level in the hierarchy of an "EBML
<       Document".
---
>    Root Level:  The starting level in the hierarchy of an EBML Document.
248,251c244,247
<    "Root Element":  A mandatory, nonrepeating "EBML Element" that occurs
<       at the top level of the path hierarchy within an "EBML Body" and
<       contains all other "EBML Elements" of the "EBML Body", excepting
<       optional "Void Elements".
---
>    Root Element:  A mandatory, nonrepeating EBML Element that occurs at
>       the top level of the path hierarchy within an EBML Body and
>       contains all other EBML Elements of the EBML Body, excepting
>       optional Void Elements.
253,254c249,250
<    "Top-Level Element":  An "EBML Element" defined to only occur as a
<       "Child Element" of the "Root Element".
---
>    Top-Level Element:  An EBML Element defined to only occur as a Child
>       Element of the Root Element.
256,257c252,253
<    "Master Element":  The "Master Element" contains zero, one, or many
<       other "EBML Elements".
---
>    Master Element:  The Master Element contains zero, one, or many other
>       EBML Elements.
259,261c255,256
<    "Child Element":  A "Child Element" is a relative term to describe
<       the "EBML Elements" immediately contained within a "Master
<       Element".
---
>    Child Element:  A Child Element is a relative term to describe the
>       EBML Elements immediately contained within a Master Element.
263,267c258,261
<    "Parent Element":  A relative term to describe the "Master Element"
<       that contains a specified element.  For any specified "EBML
<       Element" that is not at "Root Level", the "Parent Element" refers
<       to the "Master Element" in which that "EBML Element" is directly
<       contained.
---
>    Parent Element:  A relative term to describe the Master Element that
>       contains a specified element.  For any specified EBML Element that
>       is not at Root Level, the Parent Element refers to the Master
>       Element in which that EBML Element is directly contained.
269,271c263,265
<    "Descendant Element":  A relative term to describe any "EBML
<       Elements" contained within a "Master Element", including any of
<       the "Child Elements" of its "Child Elements", and so on.
---
>    Descendant Element:  A relative term to describe any EBML Elements
>       contained within a Master Element, including any of the Child
>       Elements of its Child Elements, and so on.
273,274c267,268
<    "Void Element":  An "Element" used to overwrite data or reserve space
<       within a "Master Element" for later use.
---
>    Void Element:  An Element used to overwrite data or reserve space
>       within a Master Element for later use.
276c270
<    "Element Name":  The human-readable name of the "EBML Element".
---
>    Element Name:  The human-readable name of the EBML Element.
278,279c272,273
<    "Element Path":  The hierarchy of "Parent Element" where the "EBML
<       Element" is expected to be found in the "EBML Body".
---
>    Element Path:  The hierarchy of Parent Element where the EBML Element
>       is expected to be found in the EBML Body.
281,283c275,277
<    "Empty Element":  An "EBML Element" that has an "Element Data Size"
<       with all "VINT_DATA" bits set to zero, which indicates that the
<       "Element Data" of the "Element" is zero octets in length.
---
>    Empty Element:  An EBML Element that has an Element Data Size with
>       all VINT_DATA bits set to zero, which indicates that the Element
>       Data of the Element is zero octets in length.
306,315c300,308
<    "0" and is terminated by the VINT_MARKER, which is a single bit of
<    value "1".  The total length in bits of both VINT_WIDTH and
<    VINT_MARKER is the total length in octets in of the Variable-Size
<    Integer.
< 
<    The single bit "1" starts a Variable-Size Integer with a length of
<    one octet.  The sequence of bits "01" starts a Variable-Size Integer
<    with a length of two octets. "001" starts a Variable-Size Integer
<    with a length of three octets, and so on, with each additional "0"
<    bit adding one octet to the length of the Variable-Size Integer.
---
>    0 and is terminated by the VINT_MARKER, which is a single bit of
>    value 1.  The total length in bits of both VINT_WIDTH and VINT_MARKER
>    is the total length in octets in of the Variable-Size Integer.
> 
>    The single bit 1 starts a Variable-Size Integer with a length of one
>    octet.  The sequence of bits 01 starts a Variable-Size Integer with a
>    length of two octets. 001 starts a Variable-Size Integer with a
>    length of three octets, and so on, with each additional 0 bit adding
>    one octet to the length of the Variable-Size Integer.
345,346c338,339
<    VINT_WIDTH is depicted by "0", the VINT_MARKER as "1", and the
<    VINT_DATA as "x".
---
>    VINT_WIDTH is depicted by 0, the VINT_MARKER as 1, and the VINT_DATA
>    as x.
369,373c362,366
<    Table 2, an integer "2" (with a corresponding binary value of 0b10)
<    is shown encoded as different Variable-Size Integers with lengths
<    from one octet to four octets.  All four encoded examples have
<    identical semantic meaning, though the VINT_WIDTH and the padding of
<    the VINT_DATA vary.
---
>    Table 2, an integer 2 (with a corresponding binary value of 0b10) is
>    shown encoded as different Variable-Size Integers with lengths from
>    one octet to four octets.  All four encoded examples have identical
>    semantic meaning, though the VINT_WIDTH and the padding of the
>    VINT_DATA vary.
400,403c393,396
<    "0" values or all "1" values.  The VINT_DATA component of the Element
<    ID MUST be encoded at the shortest valid length.  For example, an
<    Element ID with binary encoding of "1011 1111" is valid, whereas an
<    Element ID with binary encoding of "0100 0000 0011 1111" stores a
---
>    0 values or all 1 values.  The VINT_DATA component of the Element ID
>    MUST be encoded at the shortest valid length.  For example, an
>    Element ID with binary encoding of 1011 1111 is valid, whereas an
>    Element ID with binary encoding of 0100 0000 0011 1111 stores a
406,409c399,402
<    encoding of "1111 1111" is invalid, since the VINT_DATA section is
<    set to all one values, whereas an Element ID with binary encoding of
<    "0100 0000 0111 1111" stores a semantically equal VINT_DATA and is
<    the shortest-possible VINT encoding.
---
>    encoding of 1111 1111 is invalid, since the VINT_DATA section is set
>    to all one values, whereas an Element ID with binary encoding of 0100
>    0000 0111 1111 stores a semantically equal VINT_DATA and is the
>    shortest-possible VINT encoding.
507c500
<    "unknownsizeallowed" attribute of its EBML Schema is set to true (see
---
>    unknownsizeallowed attribute of its EBML Schema is set to true (see
535,537c528,530
<    "\root\level1\level2\elt".  When reading a new Element ID, assuming
<    the EBML Path of that new Element is valid, here are some possible
<    and impossible ways that this new Element is ending "elt":
---
>    \root\level1\level2\elt.  When reading a new Element ID, assuming the
>    EBML Path of that new Element is valid, here are some possible and
>    impossible ways that this new Element is ending elt:
539c532
<      +==================================+============================+
---
>       +==================================+==========================+
541c534
<      +==================================+============================+
---
>       +==================================+==========================+
545c538
<      +----------------------------------+----------------------------+
---
>       +----------------------------------+--------------------------+
549c542
<      +----------------------------------+----------------------------+
---
>       +----------------------------------+--------------------------+
553c546
<      +----------------------------------+----------------------------+
---
>       +----------------------------------+--------------------------+
557c550
<      +----------------------------------+----------------------------+
---
>       +----------------------------------+--------------------------+
559,561c552,554
<      |                                  | Element, as they share the |
<      |                                  | same parent                |
<      +----------------------------------+----------------------------+
---
>       |                                  | Element, as they share   |
>       |                                  | the same parent          |
>       +----------------------------------+--------------------------+
563,565c556,558
<      |                                  | Element, as they share the |
<      |                                  | same parent                |
<      +----------------------------------+----------------------------+
---
>       |                                  | Element, as they share   |
>       |                                  | the same parent          |
>       +----------------------------------+--------------------------+
568,569c561,562
<      |                                  | child of "elt"             |
<      +----------------------------------+----------------------------+
---
>       |                                  | child of elt             |
>       +----------------------------------+--------------------------+
571,572c564,565
<      |                                  | it's a child of "elt"      |
<      +----------------------------------+----------------------------+
---
>       |                                  | it's a child of elt      |
>       +----------------------------------+--------------------------+
575,578c568,571
<      |                                  | path; while parsing "elt", |
<      |                                  | a Global Element can only  |
<      |                                  | be a child of "elt"        |
<      +----------------------------------+----------------------------+
---
>       |                                  | path; while parsing elt, |
>       |                                  | a Global Element can     |
>       |                                  | only be a child of elt   |
>       +----------------------------------+--------------------------+
580,581c573,574
<         Table 5: Examples of determining the end of an Unknown-Sized
<                                   Element
---
>           Table 5: Examples of determining the end of an Unknown-
>                                Sized Element
588,590c581,583
<    is able to express a size of 2^(56)-2 or 72,057,594,037,927,934
<    octets (or about 72 petabytes).  The maximum possible value that can
<    be stored as Element Data Size is referred to as VINTMAX.
---
>    is able to express a size of 2^56-2 or 72,057,594,037,927,934 octets
>    (or about 72 petabytes).  The maximum possible value that can be
>    stored as Element Data Size is referred to as VINTMAX.
595c588
<                   | 1            | 0 to 2^(7) - 2       |
---
>                   | 1            | 0 to 2^7 - 2         |
597c590
<                   | 2            | 0 to 2^(14) - 2      |
---
>                   | 2            | 0 to 2^14 - 2        |
599c592
<                   | 3            | 0 to 2^(21) - 2      |
---
>                   | 3            | 0 to 2^21 - 2        |
601c594
<                   | 4            | 0 to 2^(28) - 2      |
---
>                   | 4            | 0 to 2^28 - 2        |
603c596
<                   | 5            | 0 to 2^(35) - 2      |
---
>                   | 5            | 0 to 2^35 - 2        |
605c598
<                   | 6            | 0 to 2^(42) - 2      |
---
>                   | 6            | 0 to 2^42 - 2        |
607c600
<                   | 7            | 0 to 2^(49) - 2      |
---
>                   | 7            | 0 to 2^49 - 2        |
609c602
<                   | 8            | 0 to 2^(56) - 2      |
---
>                   | 8            | 0 to 2^56 - 2        |
784,788c777,781
<    Name of "EBML" and Element ID of "0x1A45DFA3" (see Section 11.2.1);
<    the Master Element may have any number of additional EBML Elements
<    within it.  The EBML Header of an EBML Document that uses an
<    EBMLVersion of 1 MUST only contain EBML Elements that are defined as
<    part of this document.
---
>    Name of EBML and Element ID of 0x1A45DFA3 (see Section 11.2.1); the
>    Master Element may have any number of additional EBML Elements within
>    it.  The EBML Header of an EBML Document that uses an EBMLVersion of
>    1 MUST only contain EBML Elements that are defined as part of this
>    document.
791,793c784,785
<    for the EBML Element with Element Name "EBML" and Element ID
<    "0x1A45DFA3" (see Section 11.2.1); this Element can be up to 8 octets
<    long.
---
>    for the EBML Element with Element Name EBML and Element ID 0x1A45DFA3
>    (see Section 11.2.1); this Element can be up to 8 octets long.
864c856
<    The EBML Schema MUST NOT use the Element ID "0x1A45DFA3", which is
---
>    The EBML Schema MUST NOT use the Element ID 0x1A45DFA3, which is
868c860
<    Section 11.2) by adding or constraining that Element's "range"
---
>    Section 11.2) by adding or constraining that Element's range
870,871c862,863
<    EBMLMaxSizeLength to a maximum value of "8" or MAY constrain the
<    EBMLVersion to only support a value of "1".  If an EBML Schema adopts
---
>    EBMLMaxSizeLength to a maximum value of 8 or MAY constrain the
>    EBMLVersion to only support a value of 1.  If an EBML Schema adopts
875c867
<    documented within an "<element>" node of the EBML Schema.  This
---
>    documented within an <element> node of the EBML Schema.  This
932c924
< 11.1.2.  "<EBMLSchema>" Element
---
> 11.1.2.  <EBMLSchema> Element
934,935c926,927
<    Within an EBML Schema, the XPath [XPath] of the "<EBMLSchema>"
<    element is "/EBMLSchema".
---
>    Within an EBML Schema, the XPath [XPath] of the <EBMLSchema> element
>    is /EBMLSchema.
937,939c929,931
<    When used as an XML Document, the EBML Schema MUST use "<EBMLSchema>"
<    as the top-level element.  The "<EBMLSchema>" element can contain
<    "<element>" subelements.
---
>    When used as an XML Document, the EBML Schema MUST use <EBMLSchema>
>    as the top-level element.  The <EBMLSchema> element can contain
>    <element> subelements.
941c933
< 11.1.3.  "<EBMLSchema>" Namespace
---
> 11.1.3.  <EBMLSchema> Namespace
945,946c937
<    [RFC2648] and extended by [RFC3688].  This URN is
<    "urn:ietf:rfc:8794".
---
>    [RFC2648] and extended by [RFC3688].  This URN is urn:ietf:rfc:8794.
948c939
< 11.1.4.  "<EBMLSchema>" Attributes
---
> 11.1.4.  <EBMLSchema> Attributes
950c941
<    Within an EBML Schema, the "<EBMLSchema>" element uses the following
---
>    Within an EBML Schema, the <EBMLSchema> element uses the following
955,956c946,947
<    Within an EBML Schema, the XPath of the "@docType" attribute is
<    "/EBMLSchema/@docType".
---
>    Within an EBML Schema, the XPath of the @docType attribute is
>    /EBMLSchema/@docType.
959,960c950,951
<    defined by the EBML Schema; for example, "<EBMLSchema
<    docType="matroska">".
---
>    defined by the EBML Schema; for example, <EBMLSchema
>    docType="matroska">.
962,963c953
<    The "docType" attribute is REQUIRED within the "<EBMLSchema>"
<    Element.
---
>    The docType attribute is REQUIRED within the <EBMLSchema> Element.
967,968c957,958
<    Within an EBML Schema, the XPath of the "@version" attribute is
<    "/EBMLSchema/@version".
---
>    Within an EBML Schema, the XPath of the @version attribute is
>    /EBMLSchema/@version.
974,975c964,965
<    Elements may be introduced and deprecated by using the "minver" and
<    "maxver" attributes of "<element>".
---
>    Elements may be introduced and deprecated by using the minver and
>    maxver attributes of <element>.
977,978c967
<    The "version" attribute is REQUIRED within the "<EBMLSchema>"
<    Element.
---
>    The version attribute is REQUIRED within the <EBMLSchema> Element.
982,983c971,972
<    Within an EBML Schema, the XPath of the "@ebml" attribute is
<    "/EBMLSchema/@ebml".
---
>    Within an EBML Schema, the XPath of the @ebml attribute is
>    /EBMLSchema/@ebml.
985c974
<    The "ebml" attribute is a positive integer that specifies the version
---
>    The ebml attribute is a positive integer that specifies the version
989c978
< 11.1.5.  "<element>" Element
---
> 11.1.5.  <element> Element
991,992c980,981
<    Within an EBML Schema, the XPath of the "<element>" element is
<    "/EBMLSchema/element".
---
>    Within an EBML Schema, the XPath of the <element> element is
>    /EBMLSchema/element.
994c983
<    Each "<element>" defines one EBML Element through the use of several
---
>    Each <element> defines one EBML Element through the use of several
997c986
<    conflict with the definitions of the "<element>" attributes defined
---
>    conflict with the definitions of the <element> attributes defined
1000,1005c989,994
<    The "<element>" nodes contain a description of the meaning and use of
<    the EBML Element stored within one or more "<documentation>"
<    subelements, followed by optional "<implementation_note>"
<    subelements, followed by zero or one "<restriction>" subelement,
<    followed by optional "<extension>" subelements.  All "<element>"
<    nodes MUST be subelements of the "<EBMLSchema>".
---
>    The <element> nodes contain a description of the meaning and use of
>    the EBML Element stored within one or more <documentation>
>    subelements, followed by optional <implementation_note> subelements,
>    followed by zero or one <restriction> subelement, followed by
>    optional <extension> subelements.  All <element> nodes MUST be
>    subelements of the <EBMLSchema>.
1007c996
< 11.1.6.  "<element>" Attributes
---
> 11.1.6.  <element> Attributes
1009,1010c998,999
<    Within an EBML Schema, the "<element>" uses the following attributes
<    to define an EBML Element:
---
>    Within an EBML Schema, the <element> uses the following attributes to
>    define an EBML Element:
1014,1015c1003,1004
<    Within an EBML Schema, the XPath of the "@name" attribute is
<    "/EBMLSchema/element/@name".
---
>    Within an EBML Schema, the XPath of the @name attribute is
>    /EBMLSchema/element/@name.
1023c1012
<    The "name" attribute is REQUIRED.
---
>    The name attribute is REQUIRED.
1027,1028c1016,1017
<    Within an EBML Schema, the XPath of the "@path" attribute is
<    "/EBMLSchema/element/@path".
---
>    Within an EBML Schema, the XPath of the @path attribute is
>    /EBMLSchema/element/@path.
1032,1036c1021,1024
<    hierarchy of EBML Elements separated with a "\".  The top EBML
<    Element in the path hierarchy is the first in the value.  The syntax
<    of the "path" attribute is defined using this Augmented Backus-Naur
<    Form (ABNF) [RFC5234] with the case-sensitive update [RFC7405]
<    notation:
---
>    hierarchy of EBML Elements separated with a \. The top EBML Element
>    in the path hierarchy is the first in the value.  The syntax of the
>    path attribute is defined using this Augmented Backus-Naur Form
>    (ABNF) [RFC5234] with the case-sensitive update [RFC7405] notation:
1038c1026
<    The "path" attribute is REQUIRED.
---
>    The path attribute is REQUIRED.
1061,1062c1049
<    The "*", "(", and ")" symbols are interpreted as defined in
<    [RFC5234].
---
>    The *, (, and ) symbols are interpreted as defined in [RFC5234].
1064c1051
<    The EBMLAtomName of the EBMLElement part MUST be equal to the "@name"
---
>    The EBMLAtomName of the EBMLElement part MUST be equal to the @name
1072,1075c1059,1061
<    The "@path" value MUST be unique within the EBML Schema.  The "@id"
<    value corresponding to this "@path" MUST NOT be defined for use
<    within another EBML Element with the same EBMLParentPath as this
<    "@path".
---
>    The @path value MUST be unique within the EBML Schema.  The @id value
>    corresponding to this @path MUST NOT be defined for use within
>    another EBML Element with the same EBMLParentPath as this @path.
1099c1085
<    For example, in "\a\(0-1\)global", the Element path "\a\x\global"
---
>    For example, in \a\(0-1\)global, the Element path \a\x\global
1101,1122c1087,1107
<    "\a\x\y\global" corresponds to an EBMLPathAtom occurrence of 2, etc.
<    In those cases, "\a\x" or "\a\x\y" MUST be valid paths to be able to
<    contain the element "global".
< 
<    Consider another EBML Path, "\a\(1-\)global".  There has to be at
<    least one EBMLPathAtom between the "\a\" part and "global".  So the
<    "global" EBML Element cannot be found inside the "\a" EBML Element,
<    as it means the resulting path "\a\global" has no EBMLPathAtom
<    between the "\a\" and "global".  However, the "global" EBML Element
<    can be found inside the "\a\b" EBML Element, because the resulting
<    path, "\a\b\global", has one EBMLPathAtom between the "\a\" and
<    "global".  Alternatively, it can be found inside the "\a\b\c" EBML
<    Element (two EBMLPathAtom), or inside the "\a\b\c\d" EBML Element
<    (three EBMLPathAtom), etc.
< 
<    Consider another EBML Path, "\a\(0-1\)global".  There has to be at
<    most one EBMLPathAtom between the "\a\" part and "global".  So the
<    "global" EBML Element can be found inside either the "\a" EBML
<    Element (0 EBMLPathAtom replacing GlobalPlaceholder) or the "\a\b"
<    EBML Element (one replacement EBMLPathAtom).  But it cannot be found
<    inside the "\a\b\c" EBML Element, because the resulting path,
<    "\a\b\c\global", has two EBMLPathAtom between "\a\" and "global".
---
>    \a\x\y\global corresponds to an EBMLPathAtom occurrence of 2, etc.
>    In those cases, \a\x or \a\x\y MUST be valid paths to be able to
>    contain the element global.
> 
>    Consider another EBML Path, \a\(1-\)global.  There has to be at least
>    one EBMLPathAtom between the \a\ part and global.  So the global EBML
>    Element cannot be found inside the \a EBML Element, as it means the
>    resulting path \a\global has no EBMLPathAtom between the \a\ and
>    global.  However, the global EBML Element can be found inside the
>    \a\b EBML Element, because the resulting path, \a\b\global, has one
>    EBMLPathAtom between the \a\ and global.  Alternatively, it can be
>    found inside the \a\b\c EBML Element (two EBMLPathAtom), or inside
>    the \a\b\c\d EBML Element (three EBMLPathAtom), etc.
> 
>    Consider another EBML Path, \a\(0-1\)global.  There has to be at most
>    one EBMLPathAtom between the \a\ part and global.  So the global EBML
>    Element can be found inside either the \a EBML Element (0
>    EBMLPathAtom replacing GlobalPlaceholder) or the \a\b EBML Element
>    (one replacement EBMLPathAtom).  But it cannot be found inside the
>    \a\b\c EBML Element, because the resulting path, \a\b\c\global, has
>    two EBMLPathAtom between \a\ and global.
1126,1127c1111,1112
<    Within an EBML Schema, the XPath of the "@id" attribute is
<    "/EBMLSchema/element/@id".
---
>    Within an EBML Schema, the XPath of the @id attribute is /EBMLSchema/
>    element/@id.
1141c1126
<    match a single "@path" value of its corresponding EBML Schema, but a
---
>    match a single @path value of its corresponding EBML Schema, but a
1143,1144c1128,1129
<    MAY occur within a different "@path".  If more than one Element is
<    defined to use the same "@id" value, then the "@path" values of those
---
>    MAY occur within a different @path.  If more than one Element is
>    defined to use the same @id value, then the @path values of those
1146c1131
<    be defined to use the same "@id" value if one of their common Parent
---
>    be defined to use the same @id value if one of their common Parent
1149c1134
<    The "id" attribute is REQUIRED.
---
>    The id attribute is REQUIRED.
1153,1154c1138,1139
<    Within an EBML Schema, the XPath of the "@minOccurs" attribute is
<    "/EBMLSchema/element/@minOccurs".
---
>    Within an EBML Schema, the XPath of the @minOccurs attribute is
>    /EBMLSchema/element/@minOccurs.
1156c1141
<    "minOccurs" is a nonnegative integer expressing the minimum permitted
---
>    minOccurs is a nonnegative integer expressing the minimum permitted
1161c1146
<    EBMLParentPath, then "minOccurs" refers to constraints on the
---
>    EBMLParentPath, then minOccurs refers to constraints on the
1163c1148
<    Elements with "minOccurs" set to "1" that also have a default value
---
>    Elements with minOccurs set to "1" that also have a default value
1167c1152
<    An EBML Element defined with a "minOccurs" value greater than zero is
---
>    An EBML Element defined with a minOccurs value greater than zero is
1170,1171c1155,1156
<    The "minOccurs" attribute is OPTIONAL.  If the "minOccurs" attribute
<    is not present, then that EBML Element has a "minOccurs" value of 0.
---
>    The minOccurs attribute is OPTIONAL.  If the minOccurs attribute is
>    not present, then that EBML Element has a minOccurs value of 0.
1173,1174c1158,1159
<    The semantic meaning of "minOccurs" within an EBML Schema is
<    analogous to the meaning of "minOccurs" within an XML Schema.
---
>    The semantic meaning of minOccurs within an EBML Schema is analogous
>    to the meaning of minOccurs within an XML Schema.
1178,1179c1163,1164
<    Within an EBML Schema, the XPath of the "@maxOccurs" attribute is
<    "/EBMLSchema/element/@maxOccurs".
---
>    Within an EBML Schema, the XPath of the @maxOccurs attribute is
>    /EBMLSchema/element/@maxOccurs.
1181c1166
<    "maxOccurs" is a nonnegative integer expressing the maximum permitted
---
>    maxOccurs is a nonnegative integer expressing the maximum permitted
1187c1172
<    Element has an empty EBMLParentPath, then "maxOccurs" refers to
---
>    Element has an empty EBMLParentPath, then maxOccurs refers to
1191,1200c1176,1184
<    The "maxOccurs" attribute is OPTIONAL.  If the "maxOccurs" attribute
<    is not present, then there is no upper bound for the permitted number
<    of occurrences of this EBML Element within its Parent Element or
<    within the EBML Document, depending on whether or not the
<    EBMLParentPath of the EBML Element is empty.
< 
<    The semantic meaning of "maxOccurs" within an EBML Schema is
<    analogous to the meaning of "maxOccurs" within an XML Schema; when it
<    is not present, it's similar to xml:maxOccurs="unbounded" in an XML
<    Schema.
---
>    The maxOccurs attribute is OPTIONAL.  If the maxOccurs attribute is
>    not present, then there is no upper bound for the permitted number of
>    occurrences of this EBML Element within its Parent Element or within
>    the EBML Document, depending on whether or not the EBMLParentPath of
>    the EBML Element is empty.
> 
>    The semantic meaning of maxOccurs within an EBML Schema is analogous
>    to the meaning of maxOccurs within an XML Schema; when it is not
>    present, it's similar to xml:maxOccurs="unbounded" in an XML Schema.
1204,1205c1188,1189
<    Within an EBML Schema, the XPath of the "@range" attribute is
<    "/EBMLSchema/element/@range".
---
>    Within an EBML Schema, the XPath of the @range attribute is
>    /EBMLSchema/element/@range.
1212,1213c1196,1197
<    The "range" attribute is OPTIONAL.  If the "range" attribute is not
<    present, then any value legal for the "type" attribute is valid.
---
>    The range attribute is OPTIONAL.  If the range attribute is not
>    present, then any value legal for the type attribute is valid.
1217c1201
<    The "range" attribute MUST only be used with EBML Elements that are
---
>    The range attribute MUST only be used with EBML Elements that are
1226,1241c1210,1224
<    attribute value.  For example, "1234" means the EBML element always
<    has the value 1234.  The value can be prefixed with "not" to indicate
<    that the fixed value MUST NOT be used for that Element.  For example,
<    "not 1234" means the Element can use all values of its type except
<    1234.
< 
<    The ">" sign is used for an exclusive lower boundary, and the ">="
<    sign is used for an inclusive lower boundary.  For example, ">3"
<    means the Element value MUST be greater than 3, and ">=0x1p+0" means
<    the Element value MUST be greater than or equal to the floating value
<    1.0; see Section 11.1.18.
< 
<    The "<" sign is used for an exclusive upper boundary, and the "<="
<    sign is used for an inclusive upper boundary.  For example, "<-2"
<    means the Element value MUST be less than -2, and "<=10" means the
<    Element value MUST be less than or equal to 10.
---
>    attribute value.  For example, 1234 means the EBML element always has
>    the value 1234.  The value can be prefixed with not to indicate that
>    the fixed value MUST NOT be used for that Element.  For example, not
>    1234 means the Element can use all values of its type except 1234.
> 
>    The > sign is used for an exclusive lower boundary, and the >= sign
>    is used for an inclusive lower boundary.  For example, >3 means the
>    Element value MUST be greater than 3, and >=0x1p+0 means the Element
>    value MUST be greater than or equal to the floating value 1.0; see
>    Section 11.1.18.
> 
>    The < sign is used for an exclusive upper boundary, and the <= sign
>    is used for an inclusive upper boundary.  For example, <-2 means the
>    Element value MUST be less than -2, and <=10 means the Element value
>    MUST be less than or equal to 10.
1245c1228
<    upper boundary, separated by a comma.  For example, ">3,<= 20" means
---
>    upper boundary, separated by a comma.  For example, >3,<= 20 means
1249c1232
<    A special form of lower and upper bounds using the "-" separator is
---
>    A special form of lower and upper bounds using the - separator is
1252,1254c1235,1237
<    value.  For example, "1-10" is equivalent to ">=1,<=10".  If the
<    upper boundary is negative, the "range" attribute MUST only use the
<    latter form.
---
>    value.  For example, 1-10 is equivalent to >=1,<=10.  If the upper
>    boundary is negative, the range attribute MUST only use the latter
>    form.
1258,1259c1241,1242
<    Within an EBML Schema, the XPath of the "@length" attribute is
<    "/EBMLSchema/element/@length".
---
>    Within an EBML Schema, the XPath of the @length attribute is
>    /EBMLSchema/element/@length.
1261c1244
<    The "length" attribute is a value to express the valid length of the
---
>    The length attribute is a value to express the valid length of the
1268c1251
<    The "length" attribute is OPTIONAL.  If the "length" attribute is not
---
>    The length attribute is OPTIONAL.  If the length attribute is not
1274,1275c1257,1258
<    Within an EBML Schema, the XPath of the "@default" attribute is
<    "/EBMLSchema/element/@default".
---
>    Within an EBML Schema, the XPath of the @default attribute is
>    /EBMLSchema/element/@default.
1277,1278c1260,1261
<    If an Element is mandatory (has a "minOccurs" value greater than
<    zero) but not written within its Parent Element or stored as an Empty
---
>    If an Element is mandatory (has a minOccurs value greater than zero)
>    but not written within its Parent Element or stored as an Empty
1285,1286c1268,1269
<    EBML Elements with a "minOccurs" value greater than 1 MUST NOT
<    declare a default value.
---
>    EBML Elements with a minOccurs value greater than 1 MUST NOT declare
>    a default value.
1292,1293c1275,1276
<    Within an EBML Schema, the XPath of the "@type" attribute is
<    "/EBMLSchema/element/@type".
---
>    Within an EBML Schema, the XPath of the @type attribute is
>    /EBMLSchema/element/@type.
1295,1298c1278,1280
<    The type MUST be set to one of the following values: "integer"
<    (signed integer), "uinteger" (unsigned integer), "float", "string",
<    "date", "utf-8", "master", or "binary".  The content of each type is
<    defined in Section 7.
---
>    The type MUST be set to one of the following values: integer (signed
>    integer), uinteger (unsigned integer), float, string, date, utf-8,
>    master, or binary.  The content of each type is defined in Section 7.
1300c1282
<    The "type" attribute is REQUIRED.
---
>    The type attribute is REQUIRED.
1304,1305c1286,1287
<    Within an EBML Schema, the XPath of the "@unknownsizeallowed"
<    attribute is "/EBMLSchema/element/@unknownsizeallowed".
---
>    Within an EBML Schema, the XPath of the @unknownsizeallowed attribute
>    is /EBMLSchema/element/@unknownsizeallowed.
1310,1313c1292,1295
<    Elements MUST NOT set "unknownsizeallowed" to true.  An EBML Element
<    that is defined with an "unknownsizeallowed" attribute set to 1 MUST
<    also have the "unknownsizeallowed" attribute of its Parent Element
<    set to 1.
---
>    Elements MUST NOT set unknownsizeallowed to true.  An EBML Element
>    that is defined with an unknownsizeallowed attribute set to 1 MUST
>    also have the unknownsizeallowed attribute of its Parent Element set
>    to 1.
1315,1316c1297,1298
<    An EBML Element with the "unknownsizeallowed" attribute set to 1 MUST
<    NOT have its "recursive" attribute set to 1.
---
>    An EBML Element with the unknownsizeallowed attribute set to 1 MUST
>    NOT have its recursive attribute set to 1.
1318,1319c1300,1301
<    The "unknownsizeallowed" attribute is OPTIONAL.  If the
<    "unknownsizeallowed" attribute is not used, then that EBML Element is
---
>    The unknownsizeallowed attribute is OPTIONAL.  If the
>    unknownsizeallowed attribute is not used, then that EBML Element is
1324,1325c1306,1307
<    Within an EBML Schema, the XPath of the "@recursive" attribute is
<    "/EBMLSchema/element/@recursive".
---
>    Within an EBML Schema, the XPath of the @recursive attribute is
>    /EBMLSchema/element/@recursive.
1334,1335c1316,1317
<    If the EBMLElement part of the "@path" contains an IsRecursive part,
<    then the "recursive" value MUST be true; otherwise, it MUST be false.
---
>    If the EBMLElement part of the @path contains an IsRecursive part,
>    then the recursive value MUST be true; otherwise, it MUST be false.
1337,1338c1319,1320
<    An EBML Element with the "recursive" attribute set to 1 MUST NOT have
<    its "unknownsizeallowed" attribute set to 1.
---
>    An EBML Element with the recursive attribute set to 1 MUST NOT have
>    its unknownsizeallowed attribute set to 1.
1340,1341c1322,1323
<    The "recursive" attribute is OPTIONAL.  If the "recursive" attribute
<    is not present, then the EBML Element MUST NOT be used recursively.
---
>    The recursive attribute is OPTIONAL.  If the recursive attribute is
>    not present, then the EBML Element MUST NOT be used recursively.
1345,1346c1327,1328
<    Within an EBML Schema, the XPath of the "@recurring" attribute is
<    "/EBMLSchema/element/@recurring".
---
>    Within an EBML Schema, the XPath of the @recurring attribute is
>    /EBMLSchema/element/@recurring.
1351,1352c1333,1334
<    The "recurring" attribute is OPTIONAL.  If the "recurring" attribute
<    is not present, then the EBML Element is not an Identically Recurring
---
>    The recurring attribute is OPTIONAL.  If the recurring attribute is
>    not present, then the EBML Element is not an Identically Recurring
1357,1358c1339,1340
<    Within an EBML Schema, the XPath of the "@minver" attribute is
<    "/EBMLSchema/element/@minver".
---
>    Within an EBML Schema, the XPath of the @minver attribute is
>    /EBMLSchema/element/@minver.
1360c1342
<    The "minver" (minimum version) attribute stores a nonnegative integer
---
>    The minver (minimum version) attribute stores a nonnegative integer
1364c1346
<    The "minver" attribute is OPTIONAL.  If the "minver" attribute is not
---
>    The minver attribute is OPTIONAL.  If the minver attribute is not
1369,1370c1351,1352
<    Within an EBML Schema, the XPath of the "@maxver" attribute is
<    "/EBMLSchema/element/@maxver".
---
>    Within an EBML Schema, the XPath of the @maxver attribute is
>    /EBMLSchema/element/@maxver.
1372c1354
<    The "maxver" (maximum version) attribute stores a nonnegative integer
---
>    The maxver (maximum version) attribute stores a nonnegative integer
1374,1375c1356
<    support the element. "maxver" MUST be greater than or equal to
<    "minver".
---
>    support the element. maxver MUST be greater than or equal to minver.
1377c1358
<    The "maxver" attribute is OPTIONAL.  If the "maxver" attribute is not
---
>    The maxver attribute is OPTIONAL.  If the maxver attribute is not
1379c1360
<    value stored in the "version" attribute of "<EBMLSchema>".
---
>    value stored in the version attribute of <EBMLSchema>.
1381c1362
< 11.1.7.  "<documentation>" Element
---
> 11.1.7.  <documentation> Element
1383,1385c1364,1366
<    Within an EBML Schema, the XPaths of the "<documentation>" elements
<    are "/EBMLSchema/element/documentation" and
<    "/EBMLSchema/element/restriction/enum/documentation".
---
>    Within an EBML Schema, the XPaths of the <documentation> elements are
>    /EBMLSchema/element/documentation and
>    /EBMLSchema/element/restriction/enum/documentation.
1387,1390c1368,1371
<    The "<documentation>" element provides additional information about
<    EBML Elements or enumeration values.  Within the "<documentation>"
<    element, the following XHTML [XHTML] elements MAY be used: "<a>",
<    "<br>", and "<strong>".
---
>    The <documentation> element provides additional information about
>    EBML Elements or enumeration values.  Within the <documentation>
>    element, the following XHTML [XHTML] elements MAY be used: <a>, <br>,
>    and <strong>.
1392c1373
< 11.1.8.  "<documentation>" Attributes
---
> 11.1.8.  <documentation> Attributes
1396,1397c1377,1378
<    Within an EBML Schema, the XPath of the "@lang" attribute is
<    "/EBMLSchema/element/documentation/@lang".
---
>    Within an EBML Schema, the XPath of the @lang attribute is
>    /EBMLSchema/element/documentation/@lang.
1399,1400c1380,1381
<    The "lang" attribute is set to the value from [RFC5646] of the
<    language of the element's documentation.
---
>    The lang attribute is set to the value from [RFC5646] of the language
>    of the element's documentation.
1402c1383
<    The "lang" attribute is OPTIONAL.
---
>    The lang attribute is OPTIONAL.
1406,1407c1387,1388
<    Within an EBML Schema, the XPath of the "@purpose" attribute is
<    "/EBMLSchema/element/documentation/@purpose".
---
>    Within an EBML Schema, the XPath of the @purpose attribute is
>    /EBMLSchema/element/documentation/@purpose.
1409,1411c1390,1392
<    A "purpose" attribute distinguishes the meaning of the documentation.
<    Values for the "<documentation>" subelement's "purpose" attribute
<    MUST include one of the values listed in Table 8.
---
>    A purpose attribute distinguishes the meaning of the documentation.
>    Values for the <documentation> subelement's purpose attribute MUST
>    include one of the values listed in Table 8.
1415c1396
<      | "purpose"  |                                                 |
---
>      | purpose    |                                                 |
1433,1434c1414,1415
<            Table 8: Definitions of the permitted values for the
<              "purpose" attribute of the documentation Element
---
>        Table 8: Definitions of the permitted values for the purpose
>                   attribute of the documentation Element
1436c1417
<    The "purpose" attribute is REQUIRED.
---
>    The purpose attribute is REQUIRED.
1438c1419
< 11.1.9.  "<implementation_note>" Element
---
> 11.1.9.  <implementation_note> Element
1440,1441c1421,1422
<    Within an EBML Schema, the XPath of the "<implementation_note>"
<    element is "/EBMLSchema/element/implementation_note".
---
>    Within an EBML Schema, the XPath of the <implementation_note> element
>    is /EBMLSchema/element/implementation_note.
1444c1425
<    "<element>" element are not sufficient to clearly communicate how the
---
>    <element> element are not sufficient to clearly communicate how the
1450c1431
<    implementation notes are needed, one or many "<implementation_note>"
---
>    implementation notes are needed, one or many <implementation_note>
1452,1453c1433,1434
<    "<implementation_note>" refers to a specific attribute of the parent
<    "<element>" as expressed by the "note_attribute" attribute (see
---
>    <implementation_note> refers to a specific attribute of the parent
>    <element> as expressed by the note_attribute attribute (see
1456c1437
< 11.1.10.  "<implementation_note>" Attributes
---
> 11.1.10.  <implementation_note> Attributes
1460,1461c1441,1442
<    Within an EBML Schema, the XPath of the "@note_attribute" attribute
<    is "/EBMLSchema/element/implementation_note/@note_attribute".
---
>    Within an EBML Schema, the XPath of the @note_attribute attribute is
>    /EBMLSchema/element/implementation_note/@note_attribute.
1463,1471c1444,1452
<    The "note_attribute" attribute references which of the attributes of
<    the "<element>" the "<implementation_note>" relates to.  The
<    "note_attribute" attribute MUST be set to one of the following values
<    (corresponding to that attribute of the parent "<element>"):
<    "minOccurs", "maxOccurs", "range", "length", "default", "minver", or
<    "maxver".  The "<implementation_note>" SHALL supersede the parent
<    "<element>"'s attribute that is named in the "note_attribute"
<    attribute.  An "<element>" SHALL NOT have more than one
<    "<implementation_note>" of the same "note_attribute".
---
>    The note_attribute attribute references which of the attributes of
>    the <element> the <implementation_note> relates to.  The
>    note_attribute attribute MUST be set to one of the following values
>    (corresponding to that attribute of the parent <element>): minOccurs,
>    maxOccurs, range, length, default, minver, or maxver.  The
>    <implementation_note> SHALL supersede the parent <element>'s
>    attribute that is named in the note_attribute attribute.  An
>    <element> SHALL NOT have more than one <implementation_note> of the
>    same note_attribute.
1473c1454
<    The "note_attribute" attribute is REQUIRED.
---
>    The note_attribute attribute is REQUIRED.
1475c1456
< 11.1.10.2.  "<implementation_note>" Example
---
> 11.1.10.2.  <implementation_note> Example
1478c1459
<    "<implementation_note>" is used.  In this case, an EBML Schema
---
>    <implementation_note> is used.  In this case, an EBML Schema
1480c1461
<    The Currency Element uses an "<implementation_note>" to say that the
---
>    The Currency Element uses an <implementation_note> to say that the
1513c1494
< 11.1.11.  "<restriction>" Element
---
> 11.1.11.  <restriction> Element
1515,1516c1496,1497
<    Within an EBML Schema, the XPath of the "<restriction>" element is
<    "/EBMLSchema/element/restriction".
---
>    Within an EBML Schema, the XPath of the <restriction> element is
>    /EBMLSchema/element/restriction.
1518,1520c1499,1501
<    The "<restriction>" element provides information about restrictions
<    to the allowable values for the EBML Element, which are listed in
<    "<enum>" elements.
---
>    The <restriction> element provides information about restrictions to
>    the allowable values for the EBML Element, which are listed in <enum>
>    elements.
1522c1503
< 11.1.12.  "<enum>" Element
---
> 11.1.12.  <enum> Element
1524,1525c1505,1506
<    Within an EBML Schema, the XPath of the "<enum>" element is
<    "/EBMLSchema/element/restriction/enum".
---
>    Within an EBML Schema, the XPath of the <enum> element is
>    /EBMLSchema/element/restriction/enum.
1527,1532c1508,1513
<    The "<enum>" element stores a list of values allowed for storage in
<    the EBML Element.  The values MUST match the type of the EBML Element
<    (for example, "<enum value="Yes">" cannot be a valid value for an
<    EBML Element that is defined as an unsigned integer).  An "<enum>"
<    element MAY also store "<documentation>" elements to further describe
<    the "<enum>".
---
>    The <enum> element stores a list of values allowed for storage in the
>    EBML Element.  The values MUST match the type of the EBML Element
>    (for example, <enum value="Yes"> cannot be a valid value for an EBML
>    Element that is defined as an unsigned integer).  An <enum> element
>    MAY also store <documentation> elements to further describe the
>    <enum>.
1534c1515
< 11.1.13.  "<enum>" Attributes
---
> 11.1.13.  <enum> Attributes
1538,1539c1519,1520
<    Within an EBML Schema, the XPath of the "@label" attribute is
<    "/EBMLSchema/element/restriction/enum/@label".
---
>    Within an EBML Schema, the XPath of the @label attribute is
>    /EBMLSchema/element/restriction/enum/@label.
1542c1523
<    describes what the value of "<enum>" represents.
---
>    describes what the value of <enum> represents.
1544c1525
<    The "label" attribute is OPTIONAL.
---
>    The label attribute is OPTIONAL.
1548,1549c1529,1530
<    Within an EBML Schema, the XPath of the "@value" attribute is
<    "/EBMLSchema/element/restriction/enum/@value".
---
>    Within an EBML Schema, the XPath of the @value attribute is
>    /EBMLSchema/element/restriction/enum/@value.
1553c1534
<    The "value" attribute is REQUIRED.
---
>    The value attribute is REQUIRED.
1555c1536
< 11.1.14.  "<extension>" Element
---
> 11.1.14.  <extension> Element
1557,1558c1538,1539
<    Within an EBML Schema, the XPath of the "<extension>" element is
<    "/EBMLSchema/element/extension".
---
>    Within an EBML Schema, the XPath of the <extension> element is
>    /EBMLSchema/element/extension.
1560,1566c1541,1547
<    The "<extension>" element provides an unconstrained element to
<    contain information about the associated EBML "<element>", which is
<    undefined by this document but MAY be defined by the associated EBML
<    Document Type.  The "<extension>" element MUST contain a "type"
<    attribute and also MAY contain any other attribute or subelement as
<    long as the EBML Schema remains as a well-formed XML Document.  All
<    "<extension>" elements MUST be subelements of the "<element>".
---
>    The <extension> element provides an unconstrained element to contain
>    information about the associated EBML <element>, which is undefined
>    by this document but MAY be defined by the associated EBML Document
>    Type.  The <extension> element MUST contain a type attribute and also
>    MAY contain any other attribute or subelement as long as the EBML
>    Schema remains as a well-formed XML Document.  All <extension>
>    elements MUST be subelements of the <element>.
1568c1549
< 11.1.15.  "<extension>" Attributes
---
> 11.1.15.  <extension> Attributes
1572,1573c1553,1554
<    Within an EBML Schema, the XPath of the "@type" attribute is
<    "/EBMLSchema/element/extension/@type".
---
>    Within an EBML Schema, the XPath of the @type attribute is
>    /EBMLSchema/element/extension/@type.
1575,1577c1556,1558
<    The "type" attribute should reference a name or identifier of the
<    project or authority associated with the contents of the
<    "<extension>" element.
---
>    The type attribute should reference a name or identifier of the
>    project or authority associated with the contents of the <extension>
>    element.
1579c1560
<    The "type" attribute is REQUIRED.
---
>    The type attribute is REQUIRED.
1875c1856
<    path:  "\EBML"
---
>    path:  \EBML
1892c1873
<    path:  "\EBML\EBMLVersion"
---
>    path:  \EBML\EBMLVersion
1914c1895
<    path:  "\EBML\EBMLReadVersion"
---
>    path:  \EBML\EBMLReadVersion
1936c1917
<    path:  "\EBML\EBMLMaxIDLength"
---
>    path:  \EBML\EBMLMaxIDLength
1959c1940
<    path:  "\EBML\EBMLMaxSizeLength"
---
>    path:  \EBML\EBMLMaxSizeLength
1976c1957
<       Element documents an upper bound for the "length" of all Element
---
>       Element documents an upper bound for the length of all Element
1978,1980c1959,1961
<       for the "value" of all Element Data Size expressions within the
<       EBML Body.  EBML Elements that have an Element Data Size
<       expression that is larger in octets than what is expressed by
---
>       for the value of all Element Data Size expressions within the EBML
>       Body.  EBML Elements that have an Element Data Size expression
>       that is larger in octets than what is expressed by
1987c1968
<    path:  "\EBML\DocType"
---
>    path:  \EBML\DocType
2006c1987
<    path:  "\EBML\DocTypeVersion"
---
>    path:  \EBML\DocTypeVersion
2027c2008
<    path:  "\EBML\DocTypeReadVersion"
---
>    path:  \EBML\DocTypeReadVersion
2050c2031
<    path:  "\EBML\DocTypeExtension"
---
>    path:  \EBML\DocTypeExtension
2071c2052
<    path:  "\EBML\DocTypeExtension\DocTypeExtensionName"
---
>    path:  \EBML\DocTypeExtension\DocTypeExtensionName
2092c2073
<    path:  "\EBML\DocTypeExtension\DocTypeExtensionVersion"
---
>    path:  \EBML\DocTypeExtension\DocTypeExtensionVersion
2135c2116
<    path:  "\(1-\)CRC-32"
---
>    path:  \(1-\)CRC-32
2163c2144
<    path:  "\(-\)Void"
---
>    path:  \(-\)Void
2210c2191
<    Element than permitted according to the "maxOccurs" and "recurring"
---
>    Element than permitted according to the maxOccurs and recurring
2212c2193
<    addition to "maxOccurs" MAY be ignored.
---
>    addition to maxOccurs MAY be ignored.
2215c2196
<    permitted according to the "maxOccurs" attribute of the definition of
---
>    permitted according to the maxOccurs attribute of the definition of
2217,2218c2198,2199
<    "maxOccurs" occurrences from the beginning of its Parent Element
<    SHOULD be ignored.
---
>    maxOccurs occurrences from the beginning of its Parent Element SHOULD
>    be ignored.
2387,2388c2368,2369
<    using the "maxver" attribute of the EBML Schema.  If such an Element
<    is found in an EBML Document with a newer version of the
---
>    using the maxver attribute of the EBML Schema.  If such an Element is
>    found in an EBML Document with a newer version of the
2731d2711
< 
2736d2715
< 
2741d2719
< 
