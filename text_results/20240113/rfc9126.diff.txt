128c128
<    "request_uri" parameter that allows clients to send a reference to a
---
>    request_uri parameter that allows clients to send a reference to a
133c133
<    authorization server in exchange for a "request_uri" value usable at
---
>    authorization server in exchange for a request_uri value usable at
149c149
<    Note that HTTP "POST" requests to the authorization endpoint via the
---
>    Note that HTTP POST requests to the authorization endpoint via the
159,166c159,165
<    constrained to use the "GET" method.  Using "POST" for the
<    authorization request would require the app to first direct the
<    browser to open a URI that the app controls via "GET" while somehow
<    conveying the sizable authorization request payload and then having
<    the resultant response contain the content and script to initiate a
<    cross-site form "POST" towards the authorization server.  PAR is
<    simpler to use and has additional security benefits, as described
<    above.
---
>    constrained to use the GET method.  Using POST for the authorization
>    request would require the app to first direct the browser to open a
>    URI that the app controls via GET while somehow conveying the sizable
>    authorization request payload and then having the resultant response
>    contain the content and script to initiate a cross-site form POST
>    towards the authorization server.  PAR is simpler to use and has
>    additional security benefits, as described above.
182c181
<    server by the client with a "POST" request to the PAR endpoint as
---
>    server by the client with a POST request to the PAR endpoint as
239,243c238,242
<    authorization server that accepts HTTP "POST" requests with
<    parameters in the HTTP request message body using the "application/x-
<    www-form-urlencoded" format.  This format has a character encoding of
<    UTF-8, as described in Appendix B of [RFC6749].  The PAR endpoint URL
<    MUST use the "https" scheme.
---
>    authorization server that accepts HTTP POST requests with parameters
>    in the HTTP request message body using the application/x-www-form-
>    urlencoded format.  This format has a character encoding of UTF-8, as
>    described in Appendix B of [RFC6749].  The PAR endpoint URL MUST use
>    the "https" scheme.
248c247
<    "pushed_authorization_request_endpoint" parameter as defined in
---
>    pushed_authorization_request_endpoint parameter as defined in
263c262
<    "token_endpoint_auth_method" client metadata parameter [RFC7591]
---
>    token_endpoint_auth_method client metadata parameter [RFC7591]
267c266
<    "token_endpoint_auth_methods_supported" authorization server metadata
---
>    token_endpoint_auth_methods_supported authorization server metadata
275,282c274,280
<    with "private_key_jwt" or "client_secret_jwt" authentication method
<    names per Section 9 of [OIDC]).  To address that ambiguity, the
<    issuer identifier URL of the authorization server according to
<    [RFC8414] SHOULD be used as the value of the audience.  In order to
<    facilitate interoperability, the authorization server MUST accept its
<    issuer identifier, token endpoint URL, or pushed authorization
<    request endpoint URL as values that identify it as an intended
<    audience.
---
>    with private_key_jwt or client_secret_jwt authentication method names
>    per Section 9 of [OIDC]).  To address that ambiguity, the issuer
>    identifier URL of the authorization server according to [RFC8414]
>    SHOULD be used as the value of the audience.  In order to facilitate
>    interoperability, the authorization server MUST accept its issuer
>    identifier, token endpoint URL, or pushed authorization request
>    endpoint URL as values that identify it as an intended audience.
288,294c286,292
<    "client_id", "response_type", "redirect_uri", "scope", "state",
<    "code_challenge", and "code_challenge_method" as shown in the example
<    below.  However, the pushed authorization request can be composed of
<    any of the parameters applicable for use at the authorization
<    endpoint, including those defined in [RFC6749] as well as all
<    applicable extensions.  The "request_uri" authorization request
<    parameter is one exception, and it MUST NOT be provided.
---
>    client_id, response_type, redirect_uri, scope, state, code_challenge,
>    and code_challenge_method as shown in the example below.  However,
>    the pushed authorization request can be composed of any of the
>    parameters applicable for use at the authorization endpoint,
>    including those defined in [RFC6749] as well as all applicable
>    extensions.  The request_uri authorization request parameter is one
>    exception, and it MUST NOT be provided.
298,308c296,306
<    "client_secret" or "client_assertion" and "client_assertion_type").
<    Such parameters are defined and registered for use at the token
<    endpoint but are applicable only for client authentication.  When
<    present in a pushed authorization request, they are relied upon only
<    for client authentication and are not germane to the authorization
<    request itself.  Any token endpoint parameters that are not related
<    to client authentication have no defined meaning for a pushed
<    authorization request.  The "client_id" parameter is defined with the
<    same semantics for both authorization requests and requests to the
<    token endpoint; as a required authorization request parameter, it is
<    similarly required in a pushed authorization request.
---
>    client_secret or client_assertion and client_assertion_type).  Such
>    parameters are defined and registered for use at the token endpoint
>    but are applicable only for client authentication.  When present in a
>    pushed authorization request, they are relied upon only for client
>    authentication and are not germane to the authorization request
>    itself.  Any token endpoint parameters that are not related to client
>    authentication have no defined meaning for a pushed authorization
>    request.  The client_id parameter is defined with the same semantics
>    for both authorization requests and requests to the token endpoint;
>    as a required authorization request parameter, it is similarly
>    required in a pushed authorization request.
310,311c308,309
<    The client constructs the message body of an HTTP "POST" request with
<    parameters formatted with "x-www-form-urlencoded" using a character
---
>    The client constructs the message body of an HTTP POST request with
>    parameters formatted with x-www-form-urlencoded using a character
345c343
<    2.  Reject the request if the "request_uri" authorization request
---
>    2.  Reject the request if the request_uri authorization request
371,374c369,372
<    URI and provide it in the response with a "201" HTTP status code.
<    The following parameters are included as top-level members in the
<    message body of the HTTP response using the "application/json" media
<    type as defined by [RFC8259].
---
>    URI and provide it in the response with a 201 HTTP status code.  The
>    following parameters are included as top-level members in the message
>    body of the HTTP response using the application/json media type as
>    defined by [RFC8259].
391c389
<    The format of the "request_uri" value is at the discretion of the
---
>    The format of the request_uri value is at the discretion of the
396,399c394,397
<    MAY construct the "request_uri" value using the form
<    "urn:ietf:params:oauth:request_uri:<reference-value>" with
<    "<reference-value>" as the random part of the URI that references the
<    respective authorization request data.
---
>    MAY construct the request_uri value using the form
>    urn:ietf:params:oauth:request_uri:<reference-value> with <reference-
>    value> as the random part of the URI that references the respective
>    authorization request data.
401c399
<    The "request_uri" value MUST be bound to the client that posted the
---
>    The request_uri value MUST be bound to the client that posted the
425c423
<    or mismatching redirection URI), the "invalid_request" error code can
---
>    or mismatching redirection URI), the invalid_request error code can
431c429
<    interaction, such as "consent_required" defined by [OIDC], are never
---
>    interaction, such as consent_required defined by [OIDC], are never
439c437
<    "invalid_request".
---
>    invalid_request.
444c442
<    405:  If the request did not use the "POST" method, the authorization
---
>    405:  If the request did not use the POST method, the authorization
472c470
<    OAuth 2.0 [RFC6749] allows clients to use unregistered "redirect_uri"
---
>    OAuth 2.0 [RFC6749] allows clients to use unregistered redirect_uri
474,476c472,474
<    apply its own matching semantics to the "redirect_uri" value
<    presented by the client at the authorization endpoint.  However, the
<    OAuth security BCP [OAUTH-SECURITY-TOPICS] as well as the OAuth 2.1
---
>    apply its own matching semantics to the redirect_uri value presented
>    by the client at the authorization endpoint.  However, the OAuth
>    security BCP [OAUTH-SECURITY-TOPICS] as well as the OAuth 2.1
478c476
<    match the "redirect_uri" parameter against the set of redirect URIs
---
>    match the redirect_uri parameter against the set of redirect URIs
491c489
<    authorization server MAY allow such clients to specify "redirect_uri"
---
>    authorization server MAY allow such clients to specify redirect_uri
494,496c492,494
<    distinct "redirect_uri" values per authorization server at runtime)
<    and can simplify client management.  It is at the discretion of the
<    authorization server to apply restrictions on supplied "redirect_uri"
---
>    distinct redirect_uri values per authorization server at runtime) and
>    can simplify client management.  It is at the discretion of the
>    authorization server to apply restrictions on supplied redirect_uri
510,522c508,519
<    Clients MAY use the "request" parameter as defined in JAR [RFC9101]
<    to push a Request Object JWT to the authorization server.  The rules
<    for processing, signing, and encryption of the Request Object as
<    defined in JAR [RFC9101] apply.  Request parameters required by a
<    given client authentication method are included in the "application/
<    x-www-form-urlencoded" request directly and are the only parameters
<    other than "request" in the form body (e.g., mutual TLS client
<    authentication [RFC8705] uses the "client_id" HTTP request parameter,
<    while JWT assertion-based client authentication [RFC7523] uses
<    "client_assertion" and "client_assertion_type").  All other request
<    parameters, i.e., those pertaining to the authorization request
<    itself, MUST appear as claims of the JWT representing the
<    authorization request.
---
>    Clients MAY use the request parameter as defined in JAR [RFC9101] to
>    push a Request Object JWT to the authorization server.  The rules for
>    processing, signing, and encryption of the Request Object as defined
>    in JAR [RFC9101] apply.  Request parameters required by a given
>    client authentication method are included in the application/x-www-
>    form-urlencoded request directly and are the only parameters other
>    than request in the form body (e.g., mutual TLS client authentication
>    [RFC8705] uses the client_id HTTP request parameter, while JWT
>    assertion-based client authentication [RFC7523] uses client_assertion
>    and client_assertion_type).  All other request parameters, i.e.,
>    those pertaining to the authorization request itself, MUST appear as
>    claims of the JWT representing the authorization request.
571,573c568,570
<        "client_id" does not match the "client_id" claim in the Request
<        Object.  Additionally, requiring the "iss" claim to match the
<        "client_id" is at the discretion of the authorization server.
---
>        client_id does not match the client_id claim in the Request
>        Object.  Additionally, requiring the iss claim to match the
>        client_id is at the discretion of the authorization server.
616c613
<    The client uses the "request_uri" value returned by the authorization
---
>    The client uses the request_uri value returned by the authorization
627,631c624,628
<    "code_challenge" parameter value, are unique to a particular
<    authorization request, the client MUST only use a "request_uri" value
<    once.  Authorization servers SHOULD treat "request_uri" values as
<    one-time use but MAY allow for duplicate requests due to a user
<    reloading/refreshing their user agent.  An expired "request_uri" MUST
---
>    code_challenge parameter value, are unique to a particular
>    authorization request, the client MUST only use a request_uri value
>    once.  Authorization servers SHOULD treat request_uri values as one-
>    time use but MAY allow for duplicate requests due to a user
>    reloading/refreshing their user agent.  An expired request_uri MUST
645c642
<    will refuse, using the "invalid_request" error code, to process any
---
>    will refuse, using the invalid_request error code, to process any
647c644
<    "request_uri" parameter with a value obtained from the PAR endpoint.
---
>    request_uri parameter with a value obtained from the PAR endpoint.
661c658
<       "request_uri" value usable at the authorization server.
---
>       request_uri value usable at the authorization server.
666c663
<       default value is "false".
---
>       default value is false.
668c665
<    Note that the presence of "pushed_authorization_request_endpoint" is
---
>    Note that the presence of pushed_authorization_request_endpoint is
670c667
<    "request_uri" value obtained from the PAR endpoint is usable at the
---
>    request_uri value obtained from the PAR endpoint is usable at the
672,673c669,670
<    metadata such as "request_uri_parameter_supported" or
<    "require_request_uri_registration" [OIDC.Disco].
---
>    metadata such as request_uri_parameter_supported or
>    require_request_uri_registration [OIDC.Disco].
691c688
<       omitted, the default value is "false".
---
>       omitted, the default value is false.
731c728
<    [RFC7636], a unique "state" parameter [RFC6749], or the OIDC "nonce"
---
>    [RFC7636], a unique state parameter [RFC6749], or the OIDC "nonce"
757c754
<    Metadata Name:  "pushed_authorization_request_endpoint"
---
>    Metadata Name:  pushed_authorization_request_endpoint
763c760
<    Metadata Name:  "require_pushed_authorization_requests"
---
>    Metadata Name:  require_pushed_authorization_requests
775c772
<    Client Metadata Name:  "require_pushed_authorization_requests"
---
>    Client Metadata Name:  require_pushed_authorization_requests
786c783
<    URN:  "urn:ietf:params:oauth:request_uri:"
---
>    URN:  urn:ietf:params:oauth:request_uri:
913d909
< 
919d914
< 
925d919
< 
931d924
< 
937d929
< 
