218,222c218,223
<    Signed Data:  The data covered by a particular electronic signature.
<       This is typically equivalent to the signed content of a document,
<       and it represents the data that the signer intended to sign.  In
<       some cases, such as in some XML signatures, the Signed Data can be
<       the collection of several data fragments each referenced by the
---
>    Signed Data:
>       The data covered by a particular electronic signature.  This is
>       typically equivalent to the signed content of a document, and it
>       represents the data that the signer intended to sign.  In some
>       cases, such as in some XML signatures, the Signed Data can be the
>       collection of several data fragments each referenced by the
228,236c229,238
<    Signed Bytes:  These are the actual bytes of data that were hashed
<       and signed by the digital signature algorithm.  In most cases,
<       this is not the actual Signed Data but a collection of signature
<       metadata that includes references (hash) of the Signed Data as
<       well as information about algorithms and other data bound to a
<       signature.  In XML, this is the canonicalized SignedInfo element.
<       In CMS and PDF signatures, this is the DER-encoded
<       SignedAttributes structure.  In JWS, this is the protected header
<       and payload data formatted according to [RFC7515].
---
>    Signed Bytes:
>       These are the actual bytes of data that were hashed and signed by
>       the digital signature algorithm.  In most cases, this is not the
>       actual Signed Data but a collection of signature metadata that
>       includes references (hash) of the Signed Data as well as
>       information about algorithms and other data bound to a signature.
>       In XML, this is the canonicalized SignedInfo element.  In CMS and
>       PDF signatures, this is the DER-encoded SignedAttributes
>       structure.  In JWS, this is the protected header and payload data
>       formatted according to [RFC7515].
295,303c297,308
<    String:  JSON Data Type of string that contains an arbitrary case-
<       sensitive string value.
< 
<    Base64Binary:  JSON Data Type of string that contains a
<       Base64-encoded byte array of binary data.
< 
<    StringOrURI:  JSON Data Type of string that contains an arbitrary
<       string or a URI as defined in [RFC7519].  It is REQUIRED to
<       contain the colon character (":") to be a URI.
---
>    String:
>       JSON Data Type of string that contains an arbitrary case-sensitive
>       string value.
> 
>    Base64Binary:
>       JSON Data Type of string that contains a Base64-encoded byte array
>       of binary data.
> 
>    StringOrURI:
>       JSON Data Type of string that contains an arbitrary string or a
>       URI as defined in [RFC7519].  It is REQUIRED to contain the colon
>       character (":") to be a URI.
308,309c313,315
<    Integer:  JSON Data Type of number that contains a 32-bit signed
<       integer value (from -2^31 to 2^31-1).
---
>    Integer:
>       JSON Data Type of number that contains a 32-bit signed integer
>       value (from -2^31 to 2^31-1).
311c317,318
<    Long:  JSON Data Type of number that contains a 64-bit signed integer
---
>    Long:
>       JSON Data Type of number that contains a 64-bit signed integer
319,337c326,348
<    Boolean:  JSON Data Type of boolean that contains the explicit value
<       of true or false.
< 
<    Object<Class>:  A JSON object holding a claims object of a class
<       defined in this specification (see Section 3.2.2).
< 
<    Map<Type>:  A JSON object with name-value pairs where the value is an
<       object of the specified Type in the notation.  For example,
<       Map<String> is a JSON object with name-value pairs where all
<       values are of type String.
< 
<    Array:  A JSON array of a specific data type as defined in this
<       section.  An array is expressed in this specification by square
<       brackets.  For example, [String] indicates an array of String
<       values, and [Object<DocHash>] indicates an array of DocHash
<       objects.
< 
<    Null:  A JSON null that represents an absent value.  A claim with a
<       null value is equivalent with an absent claim.
---
>    Boolean:
>       JSON Data Type of boolean that contains the explicit value of true
>       or false.
> 
>    Object<Class>:
>       A JSON object holding a claims object of a class defined in this
>       specification (see Section 3.2.2).
> 
>    Map<Type>:
>       A JSON object with name-value pairs where the value is an object
>       of the specified Type in the notation.  For example, Map<String>
>       is a JSON object with name-value pairs where all values are of
>       type String.
> 
>    Array:
>       A JSON array of a specific data type as defined in this section.
>       An array is expressed in this specification by square brackets.
>       For example, [String] indicates an array of String values, and
>       [Object<DocHash>] indicates an array of DocHash objects.
> 
>    Null:
>       A JSON null that represents an absent value.  A claim with a null
>       value is equivalent with an absent claim.
343,346c354,358
<    "jti":  A String data type that is a "JWT ID" registered claim
<       according to [RFC7519].  It is RECOMMENDED that the identifier
<       holds a hexadecimal string representation of a 128-bit unsigned
<       integer.  An SVT MUST contain one "JWT ID" claim.
---
>    "jti":
>       A String data type that is a "JWT ID" registered claim according
>       to [RFC7519].  It is RECOMMENDED that the identifier holds a
>       hexadecimal string representation of a 128-bit unsigned integer.
>       An SVT MUST contain one "JWT ID" claim.
348c360,361
<    "iss":  A StringOrURI data type that is an "Issuer" registered claim
---
>    "iss":
>       A StringOrURI data type that is an "Issuer" registered claim
354,365c367,388
<    "iat":  A NumericDate data type that is an "Issued At" registered
<       claim according to [RFC7519], which expresses the time when this
<       SVT was issued.  An SVT MUST contain one "Issued At" claim.
< 
<    "aud":  A [StringOrURI] data type or a StringOrURI data type that is
<       an "Audience" registered claim according to [RFC7519].  The
<       audience claim is an array of one or more identifiers, identifying
<       intended recipients of the SVT.  Each identifier MAY identify a
<       single entity, a group of entities, or a common policy adopted by
<       a group of entities.  If only one value is provided, it MAY be
<       provided as a single StringOrURI data type value instead of as an
<       array of values.  Inclusion of the "Audience" claim in an SVT is
---
>    "iat":
>       A NumericDate data type that is an "Issued At" registered claim
>       according to [RFC7519], which expresses the time when this SVT was
>       issued.  An SVT MUST contain one "Issued At" claim.
> 
>    "aud":
>       A [StringOrURI] data type or a StringOrURI data type that is an
>       "Audience" registered claim according to [RFC7519].  The audience
>       claim is an array of one or more identifiers, identifying intended
>       recipients of the SVT.  Each identifier MAY identify a single
>       entity, a group of entities, or a common policy adopted by a group
>       of entities.  If only one value is provided, it MAY be provided as
>       a single StringOrURI data type value instead of as an array of
>       values.  Inclusion of the "Audience" claim in an SVT is OPTIONAL.
> 
>    "exp":
>       A NumericDate data type that is an "Expiration Time" registered
>       claim according to [RFC7519], which expresses the time when
>       services and responsibilities related to this SVT are no longer
>       provided by the SVT issuer.  The precise meaning of the expiration
>       time claim is defined by local policies.  See implementation note
>       below.  Inclusion of the "Expiration Time" claim in an SVT is
368,379c391,394
<    "exp":  A NumericDate data type that is an "Expiration Time"
<       registered claim according to [RFC7519], which expresses the time
<       when services and responsibilities related to this SVT are no
<       longer provided by the SVT issuer.  The precise meaning of the
<       expiration time claim is defined by local policies.  See
<       implementation note below.  Inclusion of the "Expiration Time"
<       claim in an SVT is OPTIONAL.
< 
<    "sig_val_claims":  An Object<SigValidation> data type that contains
<       signature validation claims for this SVT extending the standard
<       registered JWT claims above.  An SVT MUST contain one
<       sig_val_claims claim.
---
>    "sig_val_claims":
>       An Object<SigValidation> data type that contains signature
>       validation claims for this SVT extending the standard registered
>       JWT claims above.  An SVT MUST contain one sig_val_claims claim.
399,407c414,423
<    "profile":  A StringOrURI data type representing the name of a
<       profile that defines conventions followed for specific claims and
<       any extension points used by the SVT issuer.  This parameter MUST
<       be present.
< 
<    "hash_algo":  A URI data type that identifies the hash algorithm used
<       to compute the hash values within the SVT.  The URI identifier
<       MUST be one defined in [RFC9231] or in the IANA registry defined
<       by this specification.  This parameter MUST be present.
---
>    "profile":
>       A StringOrURI data type representing the name of a profile that
>       defines conventions followed for specific claims and any extension
>       points used by the SVT issuer.  This parameter MUST be present.
> 
>    "hash_algo":
>       A URI data type that identifies the hash algorithm used to compute
>       the hash values within the SVT.  The URI identifier MUST be one
>       defined in [RFC9231] or in the IANA registry defined by this
>       specification.  This parameter MUST be present.
409c425,426
<    "sig":  An [Object<Signature>] data type that gives information about
---
>    "sig":
>       An [Object<Signature>] data type that gives information about
415,419c432,437
<    "ext":  A Map<String> data type that provides additional claims
<       related to the SVT.  Extension claims are added at the discretion
<       of the SVT issuer; however, extension claims MUST follow any
<       conventions defined in a profile of this specification (see
<       Section 4).  Inclusion of this parameter is OPTIONAL.
---
>    "ext":
>       A Map<String> data type that provides additional claims related to
>       the SVT.  Extension claims are added at the discretion of the SVT
>       issuer; however, extension claims MUST follow any conventions
>       defined in a profile of this specification (see Section 4).
>       Inclusion of this parameter is OPTIONAL.
428c446,447
<    "sig_ref":  An Object<SigReference> data type that contains reference
---
>    "sig_ref":
>       An Object<SigReference> data type that contains reference
432,453c451,477
<    "sig_data_ref":  An [Object<SignedDataReference>] data type that
<       contains an array of references to Signed Data that was signed by
<       the target electronic signature.  At least one SignedDataReference
<       object MUST be present.
< 
<    "signer_cert_ref":  An Object<CertReference> data type that
<       references the signer's certificate and optionally references a
<       supporting certification path that was used to verify the target
<       electronic signature.  This parameter MUST be present.
< 
<    "sig_val":  An [Object<PolicyValidation>] data type that contains an
<       array of results of signature verification according to defined
<       procedures.  At least one PolicyValidation object MUST be present.
< 
<    "time_val":  An [Object<TimeValidation>] data type that contains an
<       array of time verification results showing that the target
<       signature has existed at a specific time in the past.  Inclusion
<       of this parameter is OPTIONAL.
< 
<    "ext":  A MAP<String> data type that provides additional claims
<       related to the target signature.  Extension claims are added at
<       the discretion of the SVT issuer; however, extension claims MUST
---
>    "sig_data_ref":
>       An [Object<SignedDataReference>] data type that contains an array
>       of references to Signed Data that was signed by the target
>       electronic signature.  At least one SignedDataReference object
>       MUST be present.
> 
>    "signer_cert_ref":
>       An Object<CertReference> data type that references the signer's
>       certificate and optionally references a supporting certification
>       path that was used to verify the target electronic signature.
>       This parameter MUST be present.
> 
>    "sig_val":
>       An [Object<PolicyValidation>] data type that contains an array of
>       results of signature verification according to defined procedures.
>       At least one PolicyValidation object MUST be present.
> 
>    "time_val":
>       An [Object<TimeValidation>] data type that contains an array of
>       time verification results showing that the target signature has
>       existed at a specific time in the past.  Inclusion of this
>       parameter is OPTIONAL.
> 
>    "ext":
>       A MAP<String> data type that provides additional claims related to
>       the target signature.  Extension claims are added at the
>       discretion of the SVT issuer; however, extension claims MUST
466c490,491
<    "id":  A String data type that contains an identifier assigned to the
---
>    "id":
>       A String data type that contains an identifier assigned to the
469,470c494,500
<    "sig_hash":  A Base64Binary data type that contains a hash value of
<       the target electronic signature value.  This parameter MUST be
---
>    "sig_hash":
>       A Base64Binary data type that contains a hash value of the target
>       electronic signature value.  This parameter MUST be present.
> 
>    "sb_hash":
>       A Base64Binary data type that contains a hash value of the Signed
>       Bytes of the target electronic signature.  This parameter MUST be
473,476d502
<    "sb_hash":  A Base64Binary data type that contains a hash value of
<       the Signed Bytes of the target electronic signature.  This
<       parameter MUST be present.
< 
486,488c512,515
<    "ref":  A String data type that contains a reference identifier for
<       the data or data fragment covered by the target electronic
<       signature.  This parameter MUST be present.
---
>    "ref":
>       A String data type that contains a reference identifier for the
>       data or data fragment covered by the target electronic signature.
>       This parameter MUST be present.
490,492c517,520
<    "hash":  A Base64Binary data type that contains the hash value for
<       the data covered by the target electronic signature.  This
<       parameter MUST be present.
---
>    "hash":
>       A Base64Binary data type that contains the hash value for the data
>       covered by the target electronic signature.  This parameter MUST
>       be present.
501,503c529,532
<    "pol":  A StringOrURI data type that contains the identifier of the
<       policy governing the electronic signature verification process.
<       This parameter MUST be present.
---
>    "pol":
>       A StringOrURI data type that contains the identifier of the policy
>       governing the electronic signature verification process.  This
>       parameter MUST be present.
505c534,535
<    "res":  A String data type that contains the result of the electronic
---
>    "res":
>       A String data type that contains the result of the electronic
510,515c540,547
<    "msg":  A String data type that contains a message describing the
<       result.  Inclusion of this parameter is OPTIONAL.
< 
<    "ext":  A MAP<String> data type that provides additional claims
<       related to the target signature.  Extension claims are added at
<       the discretion of the SVT issuer; however, extension claims MUST
---
>    "msg":
>       A String data type that contains a message describing the result.
>       Inclusion of this parameter is OPTIONAL.
> 
>    "ext":
>       A MAP<String> data type that provides additional claims related to
>       the target signature.  Extension claims are added at the
>       discretion of the SVT issuer; however, extension claims MUST
530,538c562,564
<    "time":  A NumericDate data type that contains the verified time.
<       This parameter MUST be present.
< 
<    "type":  A StringOrURI data type that contains an identifier of the
<       type of evidence of time.  This parameter MUST be present.
< 
<    "iss":  A StringOrURI data type that contains an identifier of the
<       entity that issued the evidence of time.  This parameter MUST be
<       present.
---
>    "time":
>       A NumericDate data type that contains the verified time.  This
>       parameter MUST be present.
540,541c566,576
<    "id":  A String data type that contains an unique identifier assigned
<       to the evidence of time.  Inclusion of this parameter is OPTIONAL.
---
>    "type":
>       A StringOrURI data type that contains an identifier of the type of
>       evidence of time.  This parameter MUST be present.
> 
>    "iss":
>       A StringOrURI data type that contains an identifier of the entity
>       that issued the evidence of time.  This parameter MUST be present.
> 
>    "id":
>       A String data type that contains an unique identifier assigned to
>       the evidence of time.  Inclusion of this parameter is OPTIONAL.
543c578,579
<    "hash":  A Base64Binary data type that contains the hash value of the
---
>    "hash":
>       A Base64Binary data type that contains the hash value of the
547,554c583,591
<    "val":  An [Object<PolicyValidation>] data type that contains an
<       array of results of the time evidence validation according to
<       defined validation procedures.  Inclusion of this parameter is
<       OPTIONAL.
< 
<    "ext":  A MAP<String> data type that provides additional claims
<       related to the target signature.  Extension claims are added at
<       the discretion of the SVT issuer; however, extension claims MUST
---
>    "val":
>       An [Object<PolicyValidation>] data type that contains an array of
>       results of the time evidence validation according to defined
>       validation procedures.  Inclusion of this parameter is OPTIONAL.
> 
>    "ext":
>       A MAP<String> data type that provides additional claims related to
>       the target signature.  Extension claims are added at the
>       discretion of the SVT issuer; however, extension claims MUST
567,574c604,613
<    "type":  A StringOrURI data type that contains an identifier of the
<       type of reference.  The type identifier MUST be one of the
<       identifiers defined below, an identifier specified by the selected
<       profile, or a URI identifier.  This parameter MUST be present.
< 
<    "ref":  A [String] data type that contains an array of string
<       parameters according to conventions defined by the type
<       identifier.  At least one parameter MUST be present.
---
>    "type":
>       A StringOrURI data type that contains an identifier of the type of
>       reference.  The type identifier MUST be one of the identifiers
>       defined below, an identifier specified by the selected profile, or
>       a URI identifier.  This parameter MUST be present.
> 
>    "ref":
>       A [String] data type that contains an array of string parameters
>       according to conventions defined by the type identifier.  At least
>       one parameter MUST be present.
584,591c623,631
<    "chain_hash":  The ref contains an array of one or more
<       Base64-encoded hash values where each hash value is a hash over a
<       X.509 certificate [RFC5280] used to validate the signature.  The
<       certificates MUST be provided in the order starting with the end
<       entity certificate.  Any following certificate must be able to
<       validate the signature on the previous certificate in the array.
<       This option MUST NOT be used unless all hashed certificates are
<       present in the target electronic signature.
---
>    "chain_hash":
>       The ref contains an array of one or more Base64-encoded hash
>       values where each hash value is a hash over a X.509 certificate
>       [RFC5280] used to validate the signature.  The certificates MUST
>       be provided in the order starting with the end entity certificate.
>       Any following certificate must be able to validate the signature
>       on the previous certificate in the array.  This option MUST NOT be
>       used unless all hashed certificates are present in the target
>       electronic signature.
610,612c650,653
<    "alg":  This parameter identifies the algorithm used to sign the SVT
<       JWT.  The algorithm identifier MUST be specified in [RFC7518] or
<       the IANA "JSON Web Signature and Encryption Algorithms" registry
---
>    "alg":
>       This parameter identifies the algorithm used to sign the SVT JWT.
>       The algorithm identifier MUST be specified in [RFC7518] or the
>       IANA "JSON Web Signature and Encryption Algorithms" registry
1017,1019c1058,1061
<    "sb_hash":  The hash over the canonicalized <ds:SignedInfo> element
<       (the bytes the XML signature algorithm has signed to generate the
<       signature value).
---
>    "sb_hash":
>       The hash over the canonicalized <ds:SignedInfo> element (the bytes
>       the XML signature algorithm has signed to generate the signature
>       value).
1028,1032c1070,1076
<    "ref":  The value of the URI attribute of the corresponding
<       <ds:Reference> element.
< 
<    "hash":  The hash of all bytes that were identified by the
<       corresponding <ds:Reference> element after applying all identified
---
>    "ref":
>       The value of the URI attribute of the corresponding <ds:Reference>
>       element.
> 
>    "hash":
>       The hash of all bytes that were identified by the corresponding
>       <ds:Reference> element after applying all identified
1065c1109,1110
<    "kid":  A key identifier holding the Base64-encoded hash value of the
---
>    "kid":
>       A key identifier holding the Base64-encoded hash value of the
1149c1194,1195
<    "ref":  The string representation of the ByteRange value of the PDF
---
>    "ref":
>       The string representation of the ByteRange value of the PDF
1154,1156c1200,1203
<    "hash":  The hash of all bytes identified by the ByteRange value.
<       This is the concatenation of all byte ranges identified by the
<       ByteRange value.
---
>    "hash":
>       The hash of all bytes identified by the ByteRange value.  This is
>       the concatenation of all byte ranges identified by the ByteRange
>       value.
1188c1235,1236
<    "kid":  A key identifier holding the Base64-encoded hash value of the
---
>    "kid":
>       A key identifier holding the Base64-encoded hash value of the
1266,1270c1314,1320
<    "sig_hash":  The hash over the associated signature value (the bytes
<       of the base64url-decoded signature parameter).
< 
<    "sb_hash":  The hash over all bytes signed by the associated
<       signature (the JWS Signing Input according to [RFC7515]).
---
>    "sig_hash":
>       The hash over the associated signature value (the bytes of the
>       base64url-decoded signature parameter).
> 
>    "sb_hash":
>       The hash over all bytes signed by the associated signature (the
>       JWS Signing Input according to [RFC7515]).
1290c1340,1341
<    "hash":  The hash over the JWS Payload data bytes (not its base64url-
---
>    "hash":
>       The hash over the JWS Payload data bytes (not its base64url-
1321c1372,1373
<    "kid":  A key identifier holding the Base64-encoded hash value of the
---
>    "kid":
>       A key identifier holding the Base64-encoded hash value of the
