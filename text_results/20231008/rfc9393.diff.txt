205,226c205,229
<    Primary Tag:  A SWID or CoSWID tag that identifies and describes an
<       installed software component on an endpoint.  A primary tag is
<       intended to be installed on an endpoint along with the
<       corresponding software component.
< 
<    Patch Tag:  A SWID or CoSWID tag that identifies and describes an
<       installed patch that has made incremental changes to a software
<       component installed on an endpoint.  A patch tag is intended to be
<       installed on an endpoint along with the corresponding software
<       component patch.
< 
<    Corpus Tag:  A SWID or CoSWID tag that identifies and describes an
<       installable software component in its pre-installation state.  A
<       corpus tag can be used to represent metadata about an installation
<       package or installer for a software component, a software update,
<       or a patch.
< 
<    Supplemental Tag:  A SWID or CoSWID tag that allows additional
<       information to be associated with a referenced SWID tag.  This
<       allows tools and users to record their own metadata about a
<       software component without modifying CoSWID primary or patch tags
<       created by a software provider.
---
>    Primary Tag:
>       A SWID or CoSWID tag that identifies and describes an installed
>       software component on an endpoint.  A primary tag is intended to
>       be installed on an endpoint along with the corresponding software
>       component.
> 
>    Patch Tag:
>       A SWID or CoSWID tag that identifies and describes an installed
>       patch that has made incremental changes to a software component
>       installed on an endpoint.  A patch tag is intended to be installed
>       on an endpoint along with the corresponding software component
>       patch.
> 
>    Corpus Tag:
>       A SWID or CoSWID tag that identifies and describes an installable
>       software component in its pre-installation state.  A corpus tag
>       can be used to represent metadata about an installation package or
>       installer for a software component, a software update, or a patch.
> 
>    Supplemental Tag:
>       A SWID or CoSWID tag that allows additional information to be
>       associated with a referenced SWID tag.  This allows tools and
>       users to record their own metadata about a software component
>       without modifying CoSWID primary or patch tags created by a
>       software provider.
276,280c279,283
<       Software Deployment:  Before the software component is installed
<          (i.e., pre-installation), and while the product is being
<          deployed, a corpus tag provides information about the
<          installation files and distribution media (e.g., CD/DVD,
<          distribution package).
---
>       Software Deployment:
>          Before the software component is installed (i.e., pre-
>          installation), and while the product is being deployed, a
>          corpus tag provides information about the installation files
>          and distribution media (e.g., CD/DVD, distribution package).
286,300c289,305
<       Software Installation:  A primary tag will be installed with the
<          software component (or subsequently created) to uniquely
<          identify and describe the software component.  Supplemental
<          tags are created to augment primary tags with additional site-
<          specific or extended information.  While not illustrated in the
<          figure, patch tags can also be installed during software
<          installation to provide information about software fixes
<          deployed along with the base software installation.
< 
<       Software Patching:  When a patch is applied to the software
<          component, a new patch tag is provided, supplying details about
<          the patch and its dependencies.  While not illustrated in the
<          figure, a corpus tag can also provide information about the
<          patch installer and patching dependencies that need to be
<          installed before the patch.
---
>       Software Installation:
>          A primary tag will be installed with the software component (or
>          subsequently created) to uniquely identify and describe the
>          software component.  Supplemental tags are created to augment
>          primary tags with additional site-specific or extended
>          information.  While not illustrated in the figure, patch tags
>          can also be installed during software installation to provide
>          information about software fixes deployed along with the base
>          software installation.
> 
>       Software Patching:
>          When a patch is applied to the software component, a new patch
>          tag is provided, supplying details about the patch and its
>          dependencies.  While not illustrated in the figure, a corpus
>          tag can also provide information about the patch installer and
>          patching dependencies that need to be installed before the
>          patch.
320,323c325,329
<       Software Removal:  Upon removal of the software component,
<          relevant SWID tags are removed.  This removal event can trigger
<          timely updates to software inventory reflecting the removal of
<          the product and any associated patch or supplemental tags.
---
>       Software Removal:
>          Upon removal of the software component, relevant SWID tags are
>          removed.  This removal event can trigger timely updates to
>          software inventory reflecting the removal of the product and
>          any associated patch or supplemental tags.
633,641c639,649
<    global-attributes:  A list of items, including an optional language
<       definition to support the processing of text-string values and an
<       unbounded set of any-attribute items.  Described in Section 2.5.
< 
<    tag-id (index 0):  A 16-byte binary string, or a textual identifier,
<       uniquely referencing a software component.  The tag identifier
<       MUST be globally unique.  Failure to ensure global uniqueness can
<       create ambiguity in tag use, since the tag-id serves as the global
<       key for matching and lookups.  If represented as a 16-byte binary
---
>    global-attributes:
>       A list of items, including an optional language definition to
>       support the processing of text-string values and an unbounded set
>       of any-attribute items.  Described in Section 2.5.
> 
>    tag-id (index 0):
>       A 16-byte binary string, or a textual identifier, uniquely
>       referencing a software component.  The tag identifier MUST be
>       globally unique.  Failure to ensure global uniqueness can create
>       ambiguity in tag use, since the tag-id serves as the global key
>       for matching and lookups.  If represented as a 16-byte binary
655,770c663,786
<    software-name (index 1):  A textual item that provides the software
<       component's name.  This name is likely the same name that would
<       appear in a package management tool.  This item maps to
<       '/SoftwareIdentity/@name' in [SWID].
< 
<    entity (index 2):  Provides information about one or more
<       organizations responsible for producing the CoSWID tag, and
<       producing or releasing the software component referenced by this
<       CoSWID tag.  Described in Section 2.6.
< 
<    evidence (index 3):  Can be used to record the results of a software
<       discovery process used to identify untagged software on an
<       endpoint or to represent indicators for why software is believed
<       to be installed on the endpoint.  In either case, a CoSWID tag can
<       be created by the tool performing an analysis of the software
<       components installed on the endpoint.  This item is mutually
<       exclusive to payload, as evidence is always generated on the
<       target device ad hoc.  Described in Section 2.9.4.
< 
<    link (index 4):  Provides a means to establish relationship arcs
<       between the tag and another item.  A given link can be used to
<       establish the relationship between tags or to reference another
<       resource that is related to the CoSWID tag, e.g., vulnerability
<       database association, Resource-Oriented Lightweight Information
<       Exchange (ROLIE) Feed [RFC8322], Manufacturer Usage Description
<       (MUD) resource [RFC8520], software download location, etc.).  This
<       is modeled after the HTML "link" element.  Described in
<       Section 2.7.
< 
<    software-meta (index 5):  An open-ended map of key/value data pairs.
<       A number of predefined keys can be used within this item providing
<       for common usage and semantics across the industry.  The use of
<       this map allows any additional attribute to be included in the
<       tag.  It is expected that industry groups will use a common set of
<       attribute names to allow for interoperability within their
<       communities.  Described in Section 2.8.  This item maps to
<       '/SoftwareIdentity/Meta' in [SWID].
< 
<    payload (index 6):  Represents a collection of software artifacts
<       (described by child items) that compose the target software.  For
<       example, these artifacts could be the files included with an
<       installer for a corpus tag or installed on an endpoint when the
<       software component is installed for a primary or patch tag.  The
<       artifacts listed in a payload may be a superset of the software
<       artifacts that are actually installed.  Based on user selections
<       at install time, an installation might not include every artifact
<       that could be created or executed on the endpoint when the
<       software component is installed or run.  This item is mutually
<       exclusive to evidence, as payload can only be provided by an
<       external entity.  Described in Section 2.9.3.
< 
<    corpus (index 8):  A boolean value that indicates if the tag
<       identifies and describes an installable software component in its
<       pre-installation state.  Installable software includes an
<       installation package or installer for a software component, a
<       software update, or a patch.  If the CoSWID tag represents
<       installable software, the corpus item MUST be set to "true".  If
<       not provided, the default value MUST be considered "false".
< 
<    patch (index 9):  A boolean value that indicates if the tag
<       identifies and describes an installed patch that has made
<       incremental changes to a software component installed on an
<       endpoint.  If a CoSWID tag is for a patch, the patch item MUST be
<       set to "true".  If not provided, the default value MUST be
<       considered "false".  A patch item's value MUST NOT be set to
<       "true" if the installation of the associated software package
<       changes the version of a software component.
< 
<    media (index 10):  A text value that provides a hint to the tag
<       consumer to understand what target platform this tag applies to.
<       This item MUST be formatted as a query as defined by the W3C
<       "Media Queries Level 3" Recommendation (see
<       [W3C.REC-mediaqueries-3-20220405]).  Support for media queries is
<       included here for interoperability with [SWID], which does not
<       provide any further requirements for media query use.  Thus, this
<       specification does not clarify how a media query is to be used for
<       a CoSWID.
< 
<    supplemental (index 11):  A boolean value that indicates if the tag
<       is providing additional information to be associated with another
<       referenced SWID or CoSWID tag.  This allows tools and users to
<       record their own metadata about a software component without
<       modifying SWID primary or patch tags created by a software
<       provider.  If a CoSWID tag is a supplemental tag, the supplemental
<       item MUST be set to "true".  If not provided, the default value
<       MUST be considered "false".
< 
<    tag-version (index 12):  An integer value that indicates the specific
<       release revision of the tag.  Typically, the initial value of this
<       field is set to 0 and the value is increased for subsequent tags
<       produced for the same software component release.  This value
<       allows a CoSWID tag producer to correct an incorrect tag
<       previously released without indicating a change to the underlying
<       software component the tag represents.  For example, the tag-
<       version could be changed to add new metadata, to correct a broken
<       link, to add a missing payload entry, etc.  When producing a
<       revised tag, the new tag-version value MUST be greater than the
<       old tag-version value.
< 
<    software-version (index 13):  A textual value representing the
<       specific release or development version of the software component.
<       This item maps to '/SoftwareIdentity/@version' in [SWID].
< 
<    version-scheme (index 14):  An integer or textual value representing
<       the versioning scheme used for the software-version item, as an
<       integer label with text escape.  For the "Version Scheme" values,
<       see Section 4.1.  If an integer value is used, it MUST be an index
<       value in the range -256 to 65535.  Integer values in the range
<       -256 to -1 are reserved for testing and use in closed environments
<       (see Section 6.2.2).  Integer values in the range 0 to 65535
<       correspond to registered entries in the IANA "Software ID Version
<       Scheme Values" registry (see Section 6.2.4).
< 
<    $$coswid-extension:  A CDDL socket that is used to add new
<       information structures to the concise-swid-tag root map.  See
<       Section 2.2.
---
>    software-name (index 1):
>       A textual item that provides the software component's name.  This
>       name is likely the same name that would appear in a package
>       management tool.  This item maps to '/SoftwareIdentity/@name' in
>       [SWID].
> 
>    entity (index 2):
>       Provides information about one or more organizations responsible
>       for producing the CoSWID tag, and producing or releasing the
>       software component referenced by this CoSWID tag.  Described in
>       Section 2.6.
> 
>    evidence (index 3):
>       Can be used to record the results of a software discovery process
>       used to identify untagged software on an endpoint or to represent
>       indicators for why software is believed to be installed on the
>       endpoint.  In either case, a CoSWID tag can be created by the tool
>       performing an analysis of the software components installed on the
>       endpoint.  This item is mutually exclusive to payload, as evidence
>       is always generated on the target device ad hoc.  Described in
>       Section 2.9.4.
> 
>    link (index 4):
>       Provides a means to establish relationship arcs between the tag
>       and another item.  A given link can be used to establish the
>       relationship between tags or to reference another resource that is
>       related to the CoSWID tag, e.g., vulnerability database
>       association, Resource-Oriented Lightweight Information Exchange
>       (ROLIE) Feed [RFC8322], Manufacturer Usage Description (MUD)
>       resource [RFC8520], software download location, etc.).  This is
>       modeled after the HTML "link" element.  Described in Section 2.7.
> 
>    software-meta (index 5):
>       An open-ended map of key/value data pairs.  A number of predefined
>       keys can be used within this item providing for common usage and
>       semantics across the industry.  The use of this map allows any
>       additional attribute to be included in the tag.  It is expected
>       that industry groups will use a common set of attribute names to
>       allow for interoperability within their communities.  Described in
>       Section 2.8.  This item maps to '/SoftwareIdentity/Meta' in
>       [SWID].
> 
>    payload (index 6):
>       Represents a collection of software artifacts (described by child
>       items) that compose the target software.  For example, these
>       artifacts could be the files included with an installer for a
>       corpus tag or installed on an endpoint when the software component
>       is installed for a primary or patch tag.  The artifacts listed in
>       a payload may be a superset of the software artifacts that are
>       actually installed.  Based on user selections at install time, an
>       installation might not include every artifact that could be
>       created or executed on the endpoint when the software component is
>       installed or run.  This item is mutually exclusive to evidence, as
>       payload can only be provided by an external entity.  Described in
>       Section 2.9.3.
> 
>    corpus (index 8):
>       A boolean value that indicates if the tag identifies and describes
>       an installable software component in its pre-installation state.
>       Installable software includes an installation package or installer
>       for a software component, a software update, or a patch.  If the
>       CoSWID tag represents installable software, the corpus item MUST
>       be set to "true".  If not provided, the default value MUST be
>       considered "false".
> 
>    patch (index 9):
>       A boolean value that indicates if the tag identifies and describes
>       an installed patch that has made incremental changes to a software
>       component installed on an endpoint.  If a CoSWID tag is for a
>       patch, the patch item MUST be set to "true".  If not provided, the
>       default value MUST be considered "false".  A patch item's value
>       MUST NOT be set to "true" if the installation of the associated
>       software package changes the version of a software component.
> 
>    media (index 10):
>       A text value that provides a hint to the tag consumer to
>       understand what target platform this tag applies to.  This item
>       MUST be formatted as a query as defined by the W3C "Media Queries
>       Level 3" Recommendation (see [W3C.REC-mediaqueries-3-20220405]).
>       Support for media queries is included here for interoperability
>       with [SWID], which does not provide any further requirements for
>       media query use.  Thus, this specification does not clarify how a
>       media query is to be used for a CoSWID.
> 
>    supplemental (index 11):
>       A boolean value that indicates if the tag is providing additional
>       information to be associated with another referenced SWID or
>       CoSWID tag.  This allows tools and users to record their own
>       metadata about a software component without modifying SWID primary
>       or patch tags created by a software provider.  If a CoSWID tag is
>       a supplemental tag, the supplemental item MUST be set to "true".
>       If not provided, the default value MUST be considered "false".
> 
>    tag-version (index 12):
>       An integer value that indicates the specific release revision of
>       the tag.  Typically, the initial value of this field is set to 0
>       and the value is increased for subsequent tags produced for the
>       same software component release.  This value allows a CoSWID tag
>       producer to correct an incorrect tag previously released without
>       indicating a change to the underlying software component the tag
>       represents.  For example, the tag-version could be changed to add
>       new metadata, to correct a broken link, to add a missing payload
>       entry, etc.  When producing a revised tag, the new tag-version
>       value MUST be greater than the old tag-version value.
> 
>    software-version (index 13):
>       A textual value representing the specific release or development
>       version of the software component.  This item maps to
>       '/SoftwareIdentity/@version' in [SWID].
> 
>    version-scheme (index 14):
>       An integer or textual value representing the versioning scheme
>       used for the software-version item, as an integer label with text
>       escape.  For the "Version Scheme" values, see Section 4.1.  If an
>       integer value is used, it MUST be an index value in the range -256
>       to 65535.  Integer values in the range -256 to -1 are reserved for
>       testing and use in closed environments (see Section 6.2.2).
>       Integer values in the range 0 to 65535 correspond to registered
>       entries in the IANA "Software ID Version Scheme Values" registry
>       (see Section 6.2.4).
> 
>    $$coswid-extension:
>       A CDDL socket that is used to add new information structures to
>       the concise-swid-tag root map.  See Section 2.2.
814,827c830,843
<    lang (index 15):  A textual language tag that conforms with the IANA
<       "Language Subtag Registry" [RFC5646].  The context of the
<       specified language applies to all sibling and descendant textual
<       values, unless a descendant object has defined a different
<       language tag.  Thus, a new context is established when a
<       descendant object redefines a new language tag.  All textual
<       values within a given context MUST be considered expressed in the
<       specified language.
< 
<    any-attribute:  A sub-group that provides a means to include
<       arbitrary information via label/index ("key") value pairs.  Labels
<       can be either a single integer or text string.  Values can be a
<       single integer, a text string, or an array of integers or text
<       strings.
---
>    lang (index 15):
>       A textual language tag that conforms with the IANA "Language
>       Subtag Registry" [RFC5646].  The context of the specified language
>       applies to all sibling and descendant textual values, unless a
>       descendant object has defined a different language tag.  Thus, a
>       new context is established when a descendant object redefines a
>       new language tag.  All textual values within a given context MUST
>       be considered expressed in the specified language.
> 
>    any-attribute:
>       A sub-group that provides a means to include arbitrary information
>       via label/index ("key") value pairs.  Labels can be either a
>       single integer or text string.  Values can be a single integer, a
>       text string, or an array of integers or text strings.
866,877c882,893
<    entity-name (index 31):  The textual name of the organizational
<       entity claiming the roles specified by the role item for the
<       CoSWID tag.  This item maps to '/SoftwareIdentity/Entity/@name' in
<       [SWID].
< 
<    reg-id (index 32):  Registration ID.  This value is intended to
<       uniquely identify a naming authority in a given scope (e.g.,
<       global, organization, vendor, customer, administrative domain,
<       etc.) for the referenced entity.  The value of a registration ID
<       MUST be a URI as defined in [RFC3986]; it is not intended to be
<       dereferenced.  The scope will usually be the scope of an
<       organization.
---
>    entity-name (index 31):
>       The textual name of the organizational entity claiming the roles
>       specified by the role item for the CoSWID tag.  This item maps to
>       '/SoftwareIdentity/Entity/@name' in [SWID].
> 
>    reg-id (index 32):
>       Registration ID.  This value is intended to uniquely identify a
>       naming authority in a given scope (e.g., global, organization,
>       vendor, customer, administrative domain, etc.) for the referenced
>       entity.  The value of a registration ID MUST be a URI as defined
>       in [RFC3986]; it is not intended to be dereferenced.  The scope
>       will usually be the scope of an organization.
901,908c917,926
<    thumbprint (index 34):  Value that provides a hash (i.e., the
<       thumbprint) of the signing entity's public key certificate.  This
<       item provides an indicator of which entity signed the CoSWID tag,
<       which will typically be the tag creator.  See Section 2.9.1 for
<       more details on the use of the hash-entry data structure.
< 
<    $$entity-extension:  A CDDL socket that can be used to extend the
<       entity-entry group model.  See Section 2.2.
---
>    thumbprint (index 34):
>       Value that provides a hash (i.e., the thumbprint) of the signing
>       entity's public key certificate.  This item provides an indicator
>       of which entity signed the CoSWID tag, which will typically be the
>       tag creator.  See Section 2.9.1 for more details on the use of the
>       hash-entry data structure.
> 
>    $$entity-extension:
>       A CDDL socket that can be used to extend the entity-entry group
>       model.  See Section 2.2.
979,982c997,1001
<    media (index 10):  A value that provides a hint to the consumer of
<       the link so that the consumer understands what target platform the
<       link is applicable to.  This item represents a query as defined by
<       the W3C "Media Queries Level 3" Recommendation (see
---
>    media (index 10):
>       A value that provides a hint to the consumer of the link so that
>       the consumer understands what target platform the link is
>       applicable to.  This item represents a query as defined by the W3C
>       "Media Queries Level 3" Recommendation (see
990,995c1009,1015
<    artifact (index 37):  To be used with rel="installationmedia".  This
<       item's value provides the absolute filesystem path to the
<       installer executable or script that can be run to launch the
<       referenced installation.  Links with the same artifact name MUST
<       be considered mirrors of each other, allowing the installation
<       media to be acquired from any of the described sources.
---
>    artifact (index 37):
>       To be used with rel="installationmedia".  This item's value
>       provides the absolute filesystem path to the installer executable
>       or script that can be run to launch the referenced installation.
>       Links with the same artifact name MUST be considered mirrors of
>       each other, allowing the installation media to be acquired from
>       any of the described sources.
1061,1069c1081,1090
<    media-type (index 41):  Supplies the resource consumer with a hint
<       regarding what type of resource to expect.  A link can point to
<       arbitrary resources on the endpoint, local network, or Internet
<       using the href item.  (This is a _hint_: there is no obligation
<       for the server hosting the target of the URI to use the indicated
<       media type when the URI is dereferenced.)  Media types are
<       identified by referencing a "Name" from the IANA "Media Types"
<       registry (see <https://www.iana.org/assignments/media-types/>).
<       This item maps to '/SoftwareIdentity/Link/@type' in [SWID].
---
>    media-type (index 41):
>       Supplies the resource consumer with a hint regarding what type of
>       resource to expect.  A link can point to arbitrary resources on
>       the endpoint, local network, or Internet using the href item.
>       (This is a _hint_: there is no obligation for the server hosting
>       the target of the URI to use the indicated media type when the URI
>       is dereferenced.)  Media types are identified by referencing a
>       "Name" from the IANA "Media Types" registry (see
>       <https://www.iana.org/assignments/media-types/>).  This item maps
>       to '/SoftwareIdentity/Link/@type' in [SWID].
1086,1087c1107,1109
<    $$link-extension:  A CDDL socket that can be used to extend the link-
<       entry map model.  See Section 2.2.
---
>    $$link-extension:
>       A CDDL socket that can be used to extend the link-entry map model.
>       See Section 2.2.
1134,1138c1156,1168
<    activation-status (index 43):  A textual value that identifies how
<       the software component has been activated, which might relate to
<       specific terms and conditions for its use (e.g., trial,
<       serialized, licensed, unlicensed, etc.) and relate to an
<       entitlement.  This attribute is typically used in supplemental
---
>    activation-status (index 43):
>       A textual value that identifies how the software component has
>       been activated, which might relate to specific terms and
>       conditions for its use (e.g., trial, serialized, licensed,
>       unlicensed, etc.) and relate to an entitlement.  This attribute is
>       typically used in supplemental tags, as it contains information
>       that might be selected during a specific install.
> 
>    channel-type (index 44):
>       A textual value that identifies which sales, licensing, or
>       marketing channel the software component has been targeted for
>       (e.g., volume, retail, original equipment manufacturer (OEM),
>       academic, etc.).  This attribute is typically used in supplemental
1142,1156c1172,1180
<    channel-type (index 44):  A textual value that identifies which
<       sales, licensing, or marketing channel the software component has
<       been targeted for (e.g., volume, retail, original equipment
<       manufacturer (OEM), academic, etc.).  This attribute is typically
<       used in supplemental tags, as it contains information that might
<       be selected during a specific install.
< 
<    colloquial-version (index 45):  A textual value for the software
<       component's informal or colloquial version.  Examples may include
<       a year value, a major version number, or a similar value used to
<       identify a group of specific software component releases that are
<       part of the same release/support cycle.  This version can be the
<       same through multiple releases of a software component, while the
<       software-version specified in the concise-swid-tag group is much
<       more specific and will change for each software component release.
---
>    colloquial-version (index 45):
>       A textual value for the software component's informal or
>       colloquial version.  Examples may include a year value, a major
>       version number, or a similar value used to identify a group of
>       specific software component releases that are part of the same
>       release/support cycle.  This version can be the same through
>       multiple releases of a software component, while the software-
>       version specified in the concise-swid-tag group is much more
>       specific and will change for each software component release.
1161,1225c1185,1255
<    description (index 46):  A textual value that provides a detailed
<       description of the software component.  This value MAY be multiple
<       paragraphs separated by CR LF characters as described by
<       [RFC5198].
< 
<    edition (index 47):  A textual value indicating that the software
<       component represents a functional variation of the code base used
<       to support multiple software components.  For example, this item
<       can be used to differentiate enterprise, standard, or professional
<       variants of a software component.
< 
<    entitlement-data-required (index 48):  A boolean value that can be
<       used to determine if accompanying proof of entitlement is needed
<       when a software license reconciliation process is performed.
< 
<    entitlement-key (index 49):  A vendor-specific textual key that can
<       be used to identify and establish a relationship to an
<       entitlement.  Examples of an entitlement-key might include a
<       serial number, product key, or license key.  For values that
<       relate to a given software component install (e.g., license key),
<       a supplemental tag will typically contain this information.  In
<       other cases, where a general-purpose key can be provided that
<       applies to all possible installs of the software component on
<       different endpoints, a primary tag will typically contain this
<       information.  Since CoSWID tags are not intended to contain
<       confidential information, tag authors are advised not to record
<       unprotected, private software license keys in this field.
< 
<    generator (index 50):  The name (or tag-id) of the software component
<       that created the CoSWID tag.  If the generating software component
<       has a SWID or CoSWID tag, then the tag-id for the generating
<       software component SHOULD be provided.
< 
<    persistent-id (index 51):  A globally unique identifier used to
<       identify a set of software components that are related.  Software
<       components sharing the same persistent-id can be different
<       versions.  This item can be used to relate software components,
<       released at different points in time or through different release
<       channels, that may not be able to be related through the use of
<       the link item.
< 
<    product (index 52):  A basic name for the software component that can
<       be common across multiple tagged software components (e.g., Apache
<       HTTP daemon (HTTPD)).
< 
<    product-family (index 53):  A textual value indicating the software
<       components' overall product family.  This should be used when
<       multiple related software components form a larger capability that
<       is installed on multiple different endpoints.  For example, some
<       software families may consist of a server, a client, and shared
<       service components that are part of a larger capability.  Email
<       systems, enterprise applications, backup services, web
<       conferencing, and similar capabilities are examples of families.
<       The use of this item is not intended to represent groups of
<       software that are bundled or installed together.  The persistent-
<       id or link items SHOULD be used to relate bundled software
<       components.
< 
<    revision (index 54):  A string value indicating an informal or
<       colloquial release version of the software.  This value can
<       provide a different version value as compared to the software-
<       version specified in the concise-swid-tag group.  This is useful
<       when one or more releases need to have an informal version label
<       that differs from the specific exact version value specified by
<       software-version.  Examples can include SP1, RC1, Beta, etc.
---
>    description (index 46):
>       A textual value that provides a detailed description of the
>       software component.  This value MAY be multiple paragraphs
>       separated by CR LF characters as described by [RFC5198].
> 
>    edition (index 47):
>       A textual value indicating that the software component represents
>       a functional variation of the code base used to support multiple
>       software components.  For example, this item can be used to
>       differentiate enterprise, standard, or professional variants of a
>       software component.
> 
>    entitlement-data-required (index 48):
>       A boolean value that can be used to determine if accompanying
>       proof of entitlement is needed when a software license
>       reconciliation process is performed.
> 
>    entitlement-key (index 49):
>       A vendor-specific textual key that can be used to identify and
>       establish a relationship to an entitlement.  Examples of an
>       entitlement-key might include a serial number, product key, or
>       license key.  For values that relate to a given software component
>       install (e.g., license key), a supplemental tag will typically
>       contain this information.  In other cases, where a general-purpose
>       key can be provided that applies to all possible installs of the
>       software component on different endpoints, a primary tag will
>       typically contain this information.  Since CoSWID tags are not
>       intended to contain confidential information, tag authors are
>       advised not to record unprotected, private software license keys
>       in this field.
> 
>    generator (index 50):
>       The name (or tag-id) of the software component that created the
>       CoSWID tag.  If the generating software component has a SWID or
>       CoSWID tag, then the tag-id for the generating software component
>       SHOULD be provided.
> 
>    persistent-id (index 51):
>       A globally unique identifier used to identify a set of software
>       components that are related.  Software components sharing the same
>       persistent-id can be different versions.  This item can be used to
>       relate software components, released at different points in time
>       or through different release channels, that may not be able to be
>       related through the use of the link item.
> 
>    product (index 52):
>       A basic name for the software component that can be common across
>       multiple tagged software components (e.g., Apache HTTP daemon
>       (HTTPD)).
> 
>    product-family (index 53):
>       A textual value indicating the software components' overall
>       product family.  This should be used when multiple related
>       software components form a larger capability that is installed on
>       multiple different endpoints.  For example, some software families
>       may consist of a server, a client, and shared service components
>       that are part of a larger capability.  Email systems, enterprise
>       applications, backup services, web conferencing, and similar
>       capabilities are examples of families.  The use of this item is
>       not intended to represent groups of software that are bundled or
>       installed together.  The persistent-id or link items SHOULD be
>       used to relate bundled software components.
> 
>    revision (index 54):
>       A string value indicating an informal or colloquial release
>       version of the software.  This value can provide a different
>       version value as compared to the software-version specified in the
>       concise-swid-tag group.  This is useful when one or more releases
>       need to have an informal version label that differs from the
>       specific exact version value specified by software-version.
>       Examples can include SP1, RC1, Beta, etc.
1231,1233c1261,1264
<    unspsc-code (index 56):  An 8-digit United Nations Standard Products
<       and Services Code (UNSPSC) classification code for the software
<       component as defined by the UNSPSC [UNSPSC].
---
>    unspsc-code (index 56):
>       An 8-digit United Nations Standard Products and Services Code
>       (UNSPSC) classification code for the software component as defined
>       by the UNSPSC [UNSPSC].
1238,1239c1269,1271
<    $$software-meta-extension:  A CDDL socket that can be used to extend
<       the software-meta-entry group model.  See Section 2.2.
---
>    $$software-meta-extension:
>       A CDDL socket that can be used to extend the software-meta-entry
>       group model.  See Section 2.2.
1348,1350c1380,1383
<    filesystem-item:  A list of common items used for representing the
<       filesystem root, relative location, name, and significance of a
<       file or directory item.
---
>    filesystem-item:
>       A list of common items used for representing the filesystem root,
>       relative location, name, and significance of a file or directory
>       item.
1355,1378c1388,1415
<    hash (index 7):  Value that provides a hash of a file.  This item
<       provides an integrity measurement with respect to a specific file.
<       See Section 2.9.1 for more details on the use of the hash-entry
<       data structure.
< 
<    directory (index 16):  Item that allows child directory and file
<       items to be defined within a directory hierarchy for the software
<       component.
< 
<    file (index 17):  Item that allows details about a file to be
<       provided for the software component.
< 
<    process (index 18):  Item that allows details to be provided about
<       the runtime behavior of the software component, such as
<       information that will appear in a process listing on an endpoint.
< 
<    resource (index 19):  Item that can be used to provide details about
<       an artifact or capability expected to be found on an endpoint or
<       evidence collected related to the software component.  This can be
<       used to represent concepts not addressed directly by the
<       directory, file, or process items.  Examples include registry
<       keys, bound ports, etc.  The equivalent construct in [SWID] is
<       currently underspecified.  As a result, this item might be further
<       defined through extensions in the future.
---
>    hash (index 7):
>       Value that provides a hash of a file.  This item provides an
>       integrity measurement with respect to a specific file.  See
>       Section 2.9.1 for more details on the use of the hash-entry data
>       structure.
> 
>    directory (index 16):
>       Item that allows child directory and file items to be defined
>       within a directory hierarchy for the software component.
> 
>    file (index 17):
>       Item that allows details about a file to be provided for the
>       software component.
> 
>    process (index 18):
>       Item that allows details to be provided about the runtime behavior
>       of the software component, such as information that will appear in
>       a process listing on an endpoint.
> 
>    resource (index 19):
>       Item that can be used to provide details about an artifact or
>       capability expected to be found on an endpoint or evidence
>       collected related to the software component.  This can be used to
>       represent concepts not addressed directly by the directory, file,
>       or process items.  Examples include registry keys, bound ports,
>       etc.  The equivalent construct in [SWID] is currently
>       underspecified.  As a result, this item might be further defined
>       through extensions in the future.
1382,1384c1419,1421
<    file-version (index 21):  The file's version as reported by querying
<       information on the file from the operating system (if available).
<       This item maps to
---
>    file-version (index 21):
>       The file's version as reported by querying information on the file
>       from the operating system (if available).  This item maps to
1387,1403c1424,1441
<    key (index 22):  A boolean value indicating if a file or directory is
<       significant or required for the software component to execute or
<       function properly.  These are files or directories that can be
<       used to affirmatively determine if the software component is
<       installed on an endpoint.
< 
<    location (index 23):  The filesystem path where a file is expected to
<       be located when installed or copied.  The location MUST be either
<       an absolute path, a path relative to the path value included in
<       the parent directory item (preferred), or a path relative to the
<       location of the CoSWID tag if no parent is defined.  The location
<       MUST NOT include a file's name, which is provided by the fs-name
<       item.
< 
<    fs-name (index 24):  The name of the directory or file without any
<       path information.  This aligns with a file "name" in [SWID].  This
<       item maps to
---
>    key (index 22):
>       A boolean value indicating if a file or directory is significant
>       or required for the software component to execute or function
>       properly.  These are files or directories that can be used to
>       affirmatively determine if the software component is installed on
>       an endpoint.
> 
>    location (index 23):
>       The filesystem path where a file is expected to be located when
>       installed or copied.  The location MUST be either an absolute
>       path, a path relative to the path value included in the parent
>       directory item (preferred), or a path relative to the location of
>       the CoSWID tag if no parent is defined.  The location MUST NOT
>       include a file's name, which is provided by the fs-name item.
> 
>    fs-name (index 24):
>       The name of the directory or file without any path information.
>       This aligns with a file "name" in [SWID].  This item maps to
1407,1420c1445,1461
<    root (index 25):  A host-specific name for the root of the
<       filesystem.  The location item is considered relative to this
<       location if specified.  If not provided, the value provided by the
<       location item is expected to be relative to its parent or the
<       location of the CoSWID tag if no parent is provided.
< 
<    path-elements (index 26):  Group that allows a hierarchy of directory
<       and file items to be defined in payload or evidence items.  This
<       is a construction within the CDDL definition of CoSWID to support
<       shared syntax and does not appear in [SWID].
< 
<    process-name (index 27):  The software component's process name as it
<       will appear in an endpoint's process list.  This aligns with a
<       process "name" in [SWID].  This item maps to
---
>    root (index 25):
>       A host-specific name for the root of the filesystem.  The location
>       item is considered relative to this location if specified.  If not
>       provided, the value provided by the location item is expected to
>       be relative to its parent or the location of the CoSWID tag if no
>       parent is provided.
> 
>    path-elements (index 26):
>       Group that allows a hierarchy of directory and file items to be
>       defined in payload or evidence items.  This is a construction
>       within the CDDL definition of CoSWID to support shared syntax and
>       does not appear in [SWID].
> 
>    process-name (index 27):
>       The software component's process name as it will appear in an
>       endpoint's process list.  This aligns with a process "name" in
>       [SWID].  This item maps to
1423,1425c1464,1467
<    pid (index 28):  The process ID identified for a running instance of
<       the software component in the endpoint's process list.  This is
<       used as part of the evidence item.
---
>    pid (index 28):
>       The process ID identified for a running instance of the software
>       component in the endpoint's process list.  This is used as part of
>       the evidence item.
1430,1444c1472,1491
<    $$resource-collection-extension:  A CDDL socket that can be used to
<       extend the resource-collection group model.  This can be used to
<       add new specialized types of resources.  See Section 2.2.
< 
<    $$file-extension:  A CDDL socket that can be used to extend the file-
<       entry group model.  See Section 2.2.
< 
<    $$directory-extension:  A CDDL socket that can be used to extend the
<       directory-entry group model.  See Section 2.2.
< 
<    $$process-extension:  A CDDL socket that can be used to extend the
<       process-entry group model.  See Section 2.2.
< 
<    $$resource-extension:  A CDDL socket that can be used to extend the
<       resource-entry group model.  See Section 2.2.
---
>    $$resource-collection-extension:
>       A CDDL socket that can be used to extend the resource-collection
>       group model.  This can be used to add new specialized types of
>       resources.  See Section 2.2.
> 
>    $$file-extension:
>       A CDDL socket that can be used to extend the file-entry group
>       model.  See Section 2.2.
> 
>    $$directory-extension:
>       A CDDL socket that can be used to extend the directory-entry group
>       model.  See Section 2.2.
> 
>    $$process-extension:
>       A CDDL socket that can be used to extend the process-entry group
>       model.  See Section 2.2.
> 
>    $$resource-extension:
>       A CDDL socket that can be used to extend the resource-entry group
>       model.  See Section 2.2.
1464,1465c1511,1513
<    $$payload-extension:  A CDDL socket that can be used to extend the
<       payload-entry group model.  See Section 2.2.
---
>    $$payload-extension:
>       A CDDL socket that can be used to extend the payload-entry group
>       model.  See Section 2.2.
1491,1505c1539,1557
<    location (index 23):  The filesystem path of the location of the
<       CoSWID tag generated as evidence.  This path is always an absolute
<       file path (unlike the value of a location item found within a
<       filesystem-item as described in Section 2.9.2, which can be either
<       a relative path or an absolute path).
< 
<    date (index 35):  The date and time the information was collected
<       pertaining to the evidence item in epoch-based date/time format as
<       specified in Section 3.4.2 of [RFC8949].
< 
<    device-id (index 36):  The endpoint's string identifier from which
<       the evidence was collected.
< 
<    $$evidence-extension:  A CDDL socket that can be used to extend the
<       evidence-entry group model.  See Section 2.2.
---
>    location (index 23):
>       The filesystem path of the location of the CoSWID tag generated as
>       evidence.  This path is always an absolute file path (unlike the
>       value of a location item found within a filesystem-item as
>       described in Section 2.9.2, which can be either a relative path or
>       an absolute path).
> 
>    date (index 35):
>       The date and time the information was collected pertaining to the
>       evidence item in epoch-based date/time format as specified in
>       Section 3.4.2 of [RFC8949].
> 
>    device-id (index 36):
>       The endpoint's string identifier from which the evidence was
>       collected.
> 
>    $$evidence-extension:
>       A CDDL socket that can be used to extend the evidence-entry group
>       model.  See Section 2.2.
2723,2731c2775,2784
<    Applications that use this media type:  The type is used by software
<       asset management systems and vulnerability assessment systems and
<       is used in applications that use remote integrity verification.
< 
<    Fragment Identifier Considerations:  The syntax and semantics of
<       fragment identifiers specified for "application/swid+cbor" are as
<       specified for "application/cbor".  (At publication of RFC 9393,
<       there is no fragment identification syntax defined for
<       "application/cbor".)
---
>    Applications that use this media type:
>       The type is used by software asset management systems and
>       vulnerability assessment systems and is used in applications that
>       use remote integrity verification.
> 
>    Fragment Identifier Considerations:
>       The syntax and semantics of fragment identifiers specified for
>       "application/swid+cbor" are as specified for "application/cbor".
>       (At publication of RFC 9393, there is no fragment identification
>       syntax defined for "application/cbor".)
2802,2804c2855,2857
<    Applications/protocols that use this scheme name:  Applications that
<       require Software IDs (SWIDs) or Concise Software IDs (CoSWIDs);
<       see Section 5.1 of RFC 9393.
---
>    Applications/protocols that use this scheme name:
>       Applications that require Software IDs (SWIDs) or Concise Software
>       IDs (CoSWIDs); see Section 5.1 of RFC 9393.
2832,2834c2885,2887
<    Applications/protocols that use this scheme name:  Applications that
<       require Software IDs (SWIDs) or Concise Software IDs (CoSWIDs);
<       see Section 5.2 of RFC 9393.
---
>    Applications/protocols that use this scheme name:
>       Applications that require Software IDs (SWIDs) or Concise Software
>       IDs (CoSWIDs); see Section 5.2 of RFC 9393.
