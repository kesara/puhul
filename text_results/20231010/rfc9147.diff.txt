182,183c182,184
<    association:  Shared state between two endpoints established with a
<       DTLS handshake.
---
>    association:
>       Shared state between two endpoints established with a DTLS
>       handshake.
192,196c193,199
<    handshake:  An initial negotiation between client and server that
<       establishes the parameters of the connection.
< 
<    peer:  An endpoint.  When discussing a particular endpoint, "peer"
<       refers to the endpoint that is remote to the primary subject of
---
>    handshake:
>       An initial negotiation between client and server that establishes
>       the parameters of the connection.
> 
>    peer:
>       An endpoint.  When discussing a particular endpoint, "peer" refers
>       to the endpoint that is remote to the primary subject of
224c227,228
<    '+'   indicates noteworthy extensions sent in the previously noted
---
>    '+' 
>          indicates noteworthy extensions sent in the previously noted
227c231,232
<    '*'   indicates optional or situation-dependent messages/extensions
---
>    '*' 
>          indicates optional or situation-dependent messages/extensions
230c235,236
<    '{}'  indicates messages protected using keys derived from a
---
>    '{}'
>          indicates messages protected using keys derived from a
233c239,240
<    '[]'  indicates messages protected using keys derived from
---
>    '[]'
>          indicates messages protected using keys derived from
409,410c416,418
<    unified_hdr:  The unified header (unified_hdr) is a structure of
<       variable length, shown in Figure 3.
---
>    unified_hdr:
>       The unified header (unified_hdr) is a structure of variable
>       length, shown in Figure 3.
412,413c420,421
<    encrypted_record:  The encrypted form of the serialized
<       DTLSInnerPlaintext structure.
---
>    encrypted_record:
>       The encrypted form of the serialized DTLSInnerPlaintext structure.
433,440c441,449
<    Fixed Bits:  The three high bits of the first byte of the unified
<       header are set to 001.  This ensures that the value will fit
<       within the DTLS region when multiplexing is performed as described
<       in [RFC7983].  It also ensures that distinguishing encrypted DTLS
<       1.3 records from encrypted DTLS 1.2 records is possible when they
<       are carried on the same host/port quartet; such multiplexing is
<       only possible when CIDs [RFC9146] are in use, in which case DTLS
<       1.2 records will have the content type tls12_cid (25).
---
>    Fixed Bits:
>       The three high bits of the first byte of the unified header are
>       set to 001.  This ensures that the value will fit within the DTLS
>       region when multiplexing is performed as described in [RFC7983].
>       It also ensures that distinguishing encrypted DTLS 1.3 records
>       from encrypted DTLS 1.2 records is possible when they are carried
>       on the same host/port quartet; such multiplexing is only possible
>       when CIDs [RFC9146] are in use, in which case DTLS 1.2 records
>       will have the content type tls12_cid (25).
444c453,454
<    S:  The S bit (0x08) indicates the size of the sequence number. 0
---
>    S:
>       The S bit (0x08) indicates the size of the sequence number. 0
451c461,462
<    E:  The two low bits (0x03) include the low-order two bits of the
---
>    E:
>       The two low bits (0x03) include the low-order two bits of the
457,459c468,471
<    Sequence Number:  The low-order 8 or 16 bits of the record sequence
<       number.  This value is 16 bits if the S bit is set to 1, and 8
<       bits if the S bit is 0.
---
>    Sequence Number:
>       The low-order 8 or 16 bits of the record sequence number.  This
>       value is 16 bits if the S bit is set to 1, and 8 bits if the S bit
>       is 0.
1241,1244c1253,1257
<    legacy_version:  In previous versions of DTLS, this field was used
<       for version negotiation and represented the highest version number
<       supported by the client.  Experience has shown that many servers
<       do not properly implement version negotiation, leading to "version
---
>    legacy_version:
>       In previous versions of DTLS, this field was used for version
>       negotiation and represented the highest version number supported
>       by the client.  Experience has shown that many servers do not
>       properly implement version negotiation, leading to "version
1254,1263c1267,1278
<    random:  Same as for TLS 1.3, except that the downgrade sentinels
<       described in Section 4.1.3 of [TLS13] when TLS 1.2 and TLS 1.1 and
<       below are negotiated apply to DTLS 1.2 and DTLS 1.0, respectively.
< 
<    legacy_session_id:  Versions of TLS and DTLS before version 1.3
<       supported a "session resumption" feature, which has been merged
<       with pre-shared keys (PSK) in version 1.3.  A client which has a
<       cached session ID set by a pre-DTLS 1.3 server SHOULD set this
<       field to that value.  Otherwise, it MUST be set as a zero-length
<       vector (i.e., a zero-valued single byte length field).
---
>    random:
>       Same as for TLS 1.3, except that the downgrade sentinels described
>       in Section 4.1.3 of [TLS13] when TLS 1.2 and TLS 1.1 and below are
>       negotiated apply to DTLS 1.2 and DTLS 1.0, respectively.
> 
>    legacy_session_id:
>       Versions of TLS and DTLS before version 1.3 supported a "session
>       resumption" feature, which has been merged with pre-shared keys
>       (PSK) in version 1.3.  A client which has a cached session ID set
>       by a pre-DTLS 1.3 server SHOULD set this field to that value.
>       Otherwise, it MUST be set as a zero-length vector (i.e., a zero-
>       valued single byte length field).
1980,1982c1995,1998
<    record_numbers:  A list of the records containing handshake messages
<       in the current flight which the endpoint has received and either
<       processed or buffered, in numerically increasing order.
---
>    record_numbers:
>       A list of the records containing handshake messages in the current
>       flight which the endpoint has received and either processed or
>       buffered, in numerically increasing order.
2244,2245c2260,2261
<    cids:  Indicates the set of CIDs that the sender wishes the peer to
<       use.
---
>    cids:
>       Indicates the set of CIDs that the sender wishes the peer to use.
2247,2250c2263,2267
<    usage:  Indicates whether the new CIDs should be used immediately or
<       are spare.  If usage is set to "cid_immediate", then one of the
<       new CIDs MUST be used immediately for all future records.  If it
<       is set to "cid_spare", then either an existing or new CID MAY be
---
>    usage:
>       Indicates whether the new CIDs should be used immediately or are
>       spare.  If usage is set to "cid_immediate", then one of the new
>       CIDs MUST be used immediately for all future records.  If it is
>       set to "cid_spare", then either an existing or new CID MAY be
2896c2913,2914
<    t:  The size of the authentication tag in bits.  For this cipher, t
---
>    t:
>        The size of the authentication tag in bits.  For this cipher, t
2899c2917,2918
<    n:  The size of the block function in bits.  For this cipher, n is
---
>    n:
>        The size of the block function in bits.  For this cipher, n is
2904c2923,2924
<    q:  The number of genuine packets created and protected by endpoints.
---
>    q:
>        The number of genuine packets created and protected by endpoints.
2908c2928,2929
<    v:  The number of forged packets that endpoints will accept.  This
---
>    v:
>        The number of forged packets that endpoints will accept.  This
