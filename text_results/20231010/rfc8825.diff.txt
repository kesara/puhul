226,236c226,238
<    Application Programming Interface (API):  A specification of a set of
<       calls and events, usually tied to a programming language or an
<       abstract formal specification such as WebIDL, with its defined
<       semantics.
< 
<    Browser:  Used synonymously with "interactive user agent" as defined
<       in [HTML5].  See also the "WebRTC Browser" (aka "WebRTC User
<       Agent") definition below.
< 
<    Data Channel:  An abstraction that allows data to be sent between
<       WebRTC endpoints in the form of messages.  Two endpoints can have
---
>    Application Programming Interface (API):
>       A specification of a set of calls and events, usually tied to a
>       programming language or an abstract formal specification such as
>       WebIDL, with its defined semantics.
> 
>    Browser:
>       Used synonymously with "interactive user agent" as defined in
>       [HTML5].  See also the "WebRTC Browser" (aka "WebRTC User Agent")
>       definition below.
> 
>    Data Channel:
>       An abstraction that allows data to be sent between WebRTC
>       endpoints in the form of messages.  Two endpoints can have
239,276c241,285
<    ICE Agent:  An implementation of the Interactive Connectivity
<       Establishment (ICE) protocol [RFC8445].  An ICE Agent may also be
<       an SDP Agent, but there exist ICE Agents that do not use SDP (for
<       instance, those that use Jingle [XEP-0166]).
< 
<    Interactive:  Communication between multiple parties, where the
<       expectation is that an action from one party can cause a reaction
<       by another party, and the reaction can be observed by the first
<       party, where the total time required for the action/reaction/
<       observation is on the order of no more than hundreds of
<       milliseconds.
< 
<    Media:  Audio and video content.  Not to be confused with
<       "transmission media" such as wires.
< 
<    Media Path:  The path that media data follows from one WebRTC
<       endpoint to another.
< 
<    Protocol:  A specification of a set of data units, their
<       representation, and rules for their transmission, with their
<       defined semantics.  A protocol is usually thought of as going
<       between systems.
< 
<    Real-Time Media:  Media where the generation and display of content
<       are intended to occur closely together in time (on the order of no
<       more than hundreds of milliseconds).  Real-time media can be used
<       to support interactive communication.
< 
<    SDP Agent:  The protocol implementation involved in the Session
<       Description Protocol (SDP) offer/answer exchange, as defined in
<       [RFC3264], Section 3.
< 
<    Signaling:  Communication that happens in order to establish, manage,
<       and control media paths and data paths.
< 
<    Signaling Path:  The communication channels used between entities
<       participating in signaling to transfer signaling.  There may be
<       more entities in the signaling path than in the media path.
---
>    ICE Agent:
>       An implementation of the Interactive Connectivity Establishment
>       (ICE) protocol [RFC8445].  An ICE Agent may also be an SDP Agent,
>       but there exist ICE Agents that do not use SDP (for instance,
>       those that use Jingle [XEP-0166]).
> 
>    Interactive:
>       Communication between multiple parties, where the expectation is
>       that an action from one party can cause a reaction by another
>       party, and the reaction can be observed by the first party, where
>       the total time required for the action/reaction/observation is on
>       the order of no more than hundreds of milliseconds.
> 
>    Media:
>       Audio and video content.  Not to be confused with "transmission
>       media" such as wires.
> 
>    Media Path:
>       The path that media data follows from one WebRTC endpoint to
>       another.
> 
>    Protocol:
>       A specification of a set of data units, their representation, and
>       rules for their transmission, with their defined semantics.  A
>       protocol is usually thought of as going between systems.
> 
>    Real-Time Media:
>       Media where the generation and display of content are intended to
>       occur closely together in time (on the order of no more than
>       hundreds of milliseconds).  Real-time media can be used to support
>       interactive communication.
> 
>    SDP Agent:
>       The protocol implementation involved in the Session Description
>       Protocol (SDP) offer/answer exchange, as defined in [RFC3264],
>       Section 3.
> 
>    Signaling:
>       Communication that happens in order to establish, manage, and
>       control media paths and data paths.
> 
>    Signaling Path:
>       The communication channels used between entities participating in
>       signaling to transfer signaling.  There may be more entities in
>       the signaling path than in the media path.
279,297c288,289
<       Something that conforms to both the protocol specification and the
<       JavaScript API cited above.
< 
<    WebRTC Non-Browser:  Something that conforms to the protocol
<       specification but does not claim to implement the JavaScript API.
<       This can also be called a "WebRTC device" or "WebRTC native
<       application".
< 
<    WebRTC Endpoint:  Either a WebRTC browser or a WebRTC non-browser.
<       It conforms to the protocol specification.
< 
<    WebRTC-Compatible Endpoint:  An endpoint that is able to successfully
<       communicate with a WebRTC endpoint but may fail to meet some
<       requirements of a WebRTC endpoint.  This may limit where in the
<       network such an endpoint can be attached or may limit the security
<       guarantees that it offers to others.  It is not constrained by
<       this specification; when it is mentioned at all, it is to note the
<       implications on WebRTC-compatible endpoints of the requirements
<       placed on WebRTC endpoints.
---
>        Something that conforms to both the protocol specification and
>       the JavaScript API cited above.
299,300c291,312
<    WebRTC Gateway:  A WebRTC-compatible endpoint that mediates media
<       traffic to non-WebRTC entities.
---
>    WebRTC Non-Browser:
>       Something that conforms to the protocol specification but does not
>       claim to implement the JavaScript API.  This can also be called a
>       "WebRTC device" or "WebRTC native application".
> 
>    WebRTC Endpoint:
>       Either a WebRTC browser or a WebRTC non-browser.  It conforms to
>       the protocol specification.
> 
>    WebRTC-Compatible Endpoint:
>       An endpoint that is able to successfully communicate with a WebRTC
>       endpoint but may fail to meet some requirements of a WebRTC
>       endpoint.  This may limit where in the network such an endpoint
>       can be attached or may limit the security guarantees that it
>       offers to others.  It is not constrained by this specification;
>       when it is mentioned at all, it is to note the implications on
>       WebRTC-compatible endpoints of the requirements placed on WebRTC
>       endpoints.
> 
>    WebRTC Gateway:
>       A WebRTC-compatible endpoint that mediates media traffic to non-
>       WebRTC entities.
481,482c493,495
<    Data transport:  For example, TCP and UDP, and the means to securely
<       set up connections between entities, as well as the functions for
---
>    Data transport:
>       For example, TCP and UDP, and the means to securely set up
>       connections between entities, as well as the functions for
486,517c499,533
<    Data framing:  RTP, the Stream Control Transmission Protocol (SCTP),
<       DTLS, and other data formats that serve as containers, and their
<       functions for data confidentiality and integrity.
< 
<    Data formats:  Codec specifications, format specifications, and
<       functionality specifications for the data passed between systems.
<       Audio and video codecs, as well as formats for data and document
<       sharing, belong in this category.  In order to make use of data
<       formats, a way to describe them (e.g., a session description) is
<       needed.
< 
<    Connection management:  For example, setting up connections, agreeing
<       on data formats, changing data formats during the duration of a
<       call.  SDP, SIP, and Jingle/XMPP belong in this category.
< 
<    Presentation and control:  What needs to happen in order to ensure
<       that interactions behave in an unsurprising manner.  This can
<       include floor control, screen layout, voice-activated image
<       switching, and other such functions, where part of the system
<       requires cooperation between parties.  Centralized Conferencing
<       (XCON) [RFC6501] and Cisco/Tandberg's Telepresence
<       Interoperability Protocol (TIP) were some attempts at specifying
<       this kind of functionality; many applications have been built
<       without standardized interfaces to these functions.
< 
<    Local system support functions:  Functions that need not be specified
<       uniformly, because each participant may implement these functions
<       as they choose, without affecting the bits on the wire in a way
<       that others have to be cognizant of.  Examples in this category
<       include echo cancellation (some forms of it), local authentication
<       and authorization mechanisms, OS access control, and the ability
<       to do local recording of conversations.
---
>    Data framing:
>       RTP, the Stream Control Transmission Protocol (SCTP), DTLS, and
>       other data formats that serve as containers, and their functions
>       for data confidentiality and integrity.
> 
>    Data formats:
>       Codec specifications, format specifications, and functionality
>       specifications for the data passed between systems.  Audio and
>       video codecs, as well as formats for data and document sharing,
>       belong in this category.  In order to make use of data formats, a
>       way to describe them (e.g., a session description) is needed.
> 
>    Connection management:
>       For example, setting up connections, agreeing on data formats,
>       changing data formats during the duration of a call.  SDP, SIP,
>       and Jingle/XMPP belong in this category.
> 
>    Presentation and control:
>       What needs to happen in order to ensure that interactions behave
>       in an unsurprising manner.  This can include floor control, screen
>       layout, voice-activated image switching, and other such functions,
>       where part of the system requires cooperation between parties.
>       Centralized Conferencing (XCON) [RFC6501] and Cisco/Tandberg's
>       Telepresence Interoperability Protocol (TIP) were some attempts at
>       specifying this kind of functionality; many applications have been
>       built without standardized interfaces to these functions.
> 
>    Local system support functions:
>       Functions that need not be specified uniformly, because each
>       participant may implement these functions as they choose, without
>       affecting the bits on the wire in a way that others have to be
>       cognizant of.  Examples in this category include echo cancellation
>       (some forms of it), local authentication and authorization
>       mechanisms, OS access control, and the ability to do local
>       recording of conversations.
688,703c704,720
<    Security of the components:  The browsers, and other servers
<       involved.  The most target-rich environment here is probably the
<       browser; the aim here should be that the introduction of these
<       components introduces no additional vulnerability.
< 
<    Security of the communication channels:  It should be easy for
<       participants to reassure themselves of the security of their
<       communication -- by verifying the crypto parameters of the links
<       that they participate in, and to get reassurances from the other
<       parties to the communication that those parties promise that
<       appropriate measures are taken.
< 
<    Security of the partners' identities:  Verifying that the
<       participants are who they say they are (when positive
<       identification is appropriate) or that their identities cannot be
<       uncovered (when anonymity is a goal of the application).
---
>    Security of the components:
>       The browsers, and other servers involved.  The most target-rich
>       environment here is probably the browser; the aim here should be
>       that the introduction of these components introduces no additional
>       vulnerability.
> 
>    Security of the communication channels:
>       It should be easy for participants to reassure themselves of the
>       security of their communication -- by verifying the crypto
>       parameters of the links that they participate in, and to get
>       reassurances from the other parties to the communication that
>       those parties promise that appropriate measures are taken.
> 
>    Security of the partners' identities:
>       Verifying that the participants are who they say they are (when
>       positive identification is appropriate) or that their identities
>       cannot be uncovered (when anonymity is a goal of the application).
902d918
< 
