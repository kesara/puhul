220,227c220,226
<    the request, the "subject_token" represents the identity of the party
<    on behalf of whom the token is being requested while the
<    "actor_token" represents the identity of the party to whom the access
<    rights of the issued token are being delegated.  A composite token
<    issued by the authorization server will contain information about
<    both parties.  When and if a composite token is issued is at the
<    discretion of the authorization server and applicable policy and
<    configuration.
---
>    the request, the subject_token represents the identity of the party
>    on behalf of whom the token is being requested while the actor_token
>    represents the identity of the party to whom the access rights of the
>    issued token are being delegated.  A composite token issued by the
>    authorization server will contain information about both parties.
>    When and if a composite token is issued is at the discretion of the
>    authorization server and applicable policy and configuration.
233c232
<    specification.  The "actor_token" request parameter, however, does
---
>    specification.  The actor_token request parameter, however, does
235c234
<    and the JWT "act" claim can provide a representation of a chain of
---
>    and the JWT act claim can provide a representation of a chain of
278c277
<    an extension grant type using the HTTP "POST" method.  The following
---
>    an extension grant type using the HTTP POST method.  The following
280,281c279,280
<    "application/x-www-form-urlencoded" format with a character encoding
<    of UTF-8 as described in Appendix B of [RFC6749].
---
>    application/x-www-form-urlencoded format with a character encoding of
>    UTF-8 as described in Appendix B of [RFC6749].
284,285c283,284
<       REQUIRED.  The value "urn:ietf:params:oauth:grant-type:token-
<       exchange" indicates that a token exchange is being performed.
---
>       REQUIRED.  The value urn:ietf:params:oauth:grant-type:token-
>       exchange indicates that a token exchange is being performed.
296c295
<       token.  The "resource" parameter allows the client to indicate to
---
>       token.  The resource parameter allows the client to indicate to
302c301
<       policy.  The value of the "resource" parameter MUST be an absolute
---
>       policy.  The value of the resource parameter MUST be an absolute
305c304
<       Multiple "resource" parameters may be used to indicate that the
---
>       Multiple resource parameters may be used to indicate that the
308c307
<       of the "resource" parameter.
---
>       of the resource parameter.
313c312
<       purpose similar to the "resource" parameter but with the client
---
>       purpose similar to the resource parameter but with the client
319,322c318,321
<       things that might be used as "audience" parameter values.
<       However, "audience" values used with a given authorization server
<       must be unique within that server to ensure that they are properly
<       interpreted as the intended type of value.  Multiple "audience"
---
>       things that might be used as audience parameter values.  However,
>       audience values used with a given authorization server must be
>       unique within that server to ensure that they are properly
>       interpreted as the intended type of value.  Multiple audience
325,327c324,326
<       "audience" and "resource" parameters may be used together to
<       indicate multiple target services with a mix of logical names and
<       resource URIs.
---
>       audience and resource parameters may be used together to indicate
>       multiple target services with a mix of logical names and resource
>       URIs.
343,344c342,343
<       requirements of the service or resource indicated by the
<       "resource" or "audience" parameter.
---
>       requirements of the service or resource indicated by the resource
>       or audience parameter.
354c353
<       indicates the type of the security token in the "subject_token"
---
>       indicates the type of the security token in the subject_token
365,367c364,366
<       of the security token in the "actor_token" parameter.  This is
<       REQUIRED when the "actor_token" parameter is present in the
<       request but MUST NOT be included otherwise.
---
>       of the security token in the actor_token parameter.  This is
>       REQUIRED when the actor_token parameter is present in the request
>       but MUST NOT be included otherwise.
393,399c392,398
<    service(s) where it intends to use that token by way of the
<    "audience" and "resource" parameters as well as indicate the desired
<    scope of the requested token using the "scope" parameter.  The
<    semantics of such a request are that the client is asking for a token
<    with the requested scope that is usable at all the requested target
<    services.  Effectively, the requested access rights of the token are
<    the Cartesian product of all the scopes at all the target services.
---
>    service(s) where it intends to use that token by way of the audience
>    and resource parameters as well as indicate the desired scope of the
>    requested token using the scope parameter.  The semantics of such a
>    request are that the client is asking for a token with the requested
>    scope that is usable at all the requested target services.
>    Effectively, the requested access rights of the token are the
>    Cartesian product of all the scopes at all the target services.
408c407
<    "invalid_target" error code, defined in Section 2.2.2, to inform a
---
>    invalid_target error code, defined in Section 2.2.2, to inform a
434c433
<       in response to the token exchange request.  The "access_token"
---
>       in response to the token exchange request.  The access_token
438c437
<       the token endpoint.  The identifier "access_token" is used for
---
>       the token endpoint.  The identifier access_token is used for
451c450
<       of "Bearer", as specified in [RFC6750], indicates that the issued
---
>       of Bearer, as specified in [RFC6750], indicates that the issued
455c454
<       parameter is different from the meaning of the "issued_token_type"
---
>       parameter is different from the meaning of the issued_token_type
459c458
<       token, as it is in all "*_token_type" parameters in this
---
>       token, as it is in all *_token_type parameters in this
461,462c460,461
<       usable as an access token, then the "token_type" value "N_A" is
<       used to indicate that an OAuth 2.0 "token_type" identifier is not
---
>       usable as an access token, then the token_type value N_A is used
>       to indicate that an OAuth 2.0 token_type identifier is not
489,490c488,489
<       refresh token in response to "urn:ietf:params:oauth:grant-
<       type:token-exchange" grant type requests.
---
>       refresh token in response to urn:ietf:params:oauth:grant-
>       type:token-exchange grant type requests.
494,498c493,497
<    If the request itself is not valid or if either the "subject_token"
<    or "actor_token" are invalid for any reason, or are unacceptable
<    based on policy, the authorization server MUST construct an error
<    response, as specified in Section 5.2 of [RFC6749].  The value of the
<    "error" parameter MUST be the "invalid_request" error code.
---
>    If the request itself is not valid or if either the subject_token or
>    actor_token are invalid for any reason, or are unacceptable based on
>    policy, the authorization server MUST construct an error response, as
>    specified in Section 5.2 of [RFC6749].  The value of the error
>    parameter MUST be the invalid_request error code.
501,503c500,502
<    for any target service indicated by the "resource" or "audience"
<    parameters, the "invalid_target" error code SHOULD be used in the
<    error response.
---
>    for any target service indicated by the resource or audience
>    parameters, the invalid_target error code SHOULD be used in the error
>    response.
506,507c505,506
<    the reasons for the error using the "error_description" as discussed
<    in Section 5.2 of [RFC6749].
---
>    the reasons for the error using the error_description as discussed in
>    Section 5.2 of [RFC6749].
533,534c532,533
<    Section 2.1.  The value of the "subject_token" parameter carries the
<    access token, and the value of the "subject_token_type" parameter
---
>    Section 2.1.  The value of the subject_token parameter carries the
>    access token, and the value of the subject_token_type parameter
538,540c537,539
<    authentication scheme.  The "resource" parameter indicates the
<    location of the backend service, <https://backend.example.com/api>,
<    where the issued token will be used.
---
>    authentication scheme.  The resource parameter indicates the location
>    of the backend service, <https://backend.example.com/api>, where the
>    issued token will be used.
556,564c555,563
<    "subject_token" presented in the token exchange request.  From the
<    "resource" parameter, the authorization server is able to determine
<    the appropriate policy to apply to the request and issues a token
<    suitable for use at <https://backend.example.com>.  The
<    "access_token" parameter of the response shown in Figure 3 contains
<    the new token, which is itself a bearer OAuth access token that is
<    valid for one minute.  The token happens to be a JWT; however, its
<    structure and format are opaque to the client, so the
<    "issued_token_type" indicates only that it is an access token.
---
>    subject_token presented in the token exchange request.  From the
>    resource parameter, the authorization server is able to determine the
>    appropriate policy to apply to the request and issues a token
>    suitable for use at <https://backend.example.com>.  The access_token
>    parameter of the response shown in Figure 3 contains the new token,
>    which is itself a bearer OAuth access token that is valid for one
>    minute.  The token happens to be a JWT; however, its structure and
>    format are opaque to the client, so the issued_token_type indicates
>    only that it is an access token.
605,606c604,605
<    "requested_token_type", "subject_token_type", and "actor_token_type"
<    parameters of the request and the "issued_token_type" member of the
---
>    requested_token_type, subject_token_type, and actor_token_type
>    parameters of the request and the issued_token_type member of the
612,613c611,612
<    authorization server issued it for (e.g., "access_token" or
<    "refresh_token").
---
>    authorization server issued it for (e.g., access_token or
>    refresh_token).
638c637
<    The value "urn:ietf:params:oauth:token-type:jwt", which is defined in
---
>    The value urn:ietf:params:oauth:token-type:jwt, which is defined in
646c645
<    specification is that "urn:ietf:params:oauth:token-type:access_token"
---
>    specification is that urn:ietf:params:oauth:token-type:access_token
652,656c651,655
<    "urn:ietf:params:oauth:token-type:jwt" is to indicate specifically
<    that a JWT is being requested or sent (perhaps in a cross-domain use
<    case where the JWT is used as an authorization grant to obtain an
<    access token from a different authorization server as is facilitated
<    by [RFC7523]).
---
>    urn:ietf:params:oauth:token-type:jwt is to indicate specifically that
>    a JWT is being requested or sent (perhaps in a cross-domain use case
>    where the JWT is used as an authorization grant to obtain an access
>    token from a different authorization server as is facilitated by
>    [RFC7523]).
674,675c673
<    descriptions, such as "iss", "sub", "exp", etc., are defined by
<    [JWT].
---
>    descriptions, such as iss, sub, exp, etc., are defined by [JWT].
679c677
<    The "act" (actor) claim provides a means within a JWT to express that
---
>    The act (actor) claim provides a means within a JWT to express that
681,692c679,690
<    authority has been delegated.  The "act" claim value is a JSON
<    object, and members in the JSON object are claims that identify the
<    actor.  The claims that make up the "act" claim identify and possibly
<    provide additional information about the actor.  For example, the
<    combination of the two claims "iss" and "sub" might be necessary to
<    uniquely identify an actor.
< 
<    However, claims within the "act" claim pertain only to the identity
<    of the actor and are not relevant to the validity of the containing
<    JWT in the same manner as the top-level claims.  Consequently, non-
<    identity claims (e.g., "exp", "nbf", and "aud") are not meaningful
<    when used within an "act" claim and are therefore not used.
---
>    authority has been delegated.  The act claim value is a JSON object,
>    and members in the JSON object are claims that identify the actor.
>    The claims that make up the act claim identify and possibly provide
>    additional information about the actor.  For example, the combination
>    of the two claims iss and sub might be necessary to uniquely identify
>    an actor.
> 
>    However, claims within the act claim pertain only to the identity of
>    the actor and are not relevant to the validity of the containing JWT
>    in the same manner as the top-level claims.  Consequently, non-
>    identity claims (e.g., exp, nbf, and aud) are not meaningful when
>    used within an act claim and are therefore not used.
694c692
<    Figure 5 illustrates the "act" (actor) claim within a JWT Claims Set.
---
>    Figure 5 illustrates the act (actor) claim within a JWT Claims Set.
696c694
<    "act" claim indicates that admin@example.com is the current actor.
---
>    act claim indicates that admin@example.com is the current actor.
712,720c710,718
<    A chain of delegation can be expressed by nesting one "act" claim
<    within another.  The outermost "act" claim represents the current
<    actor while nested "act" claims represent prior actors.  The least
<    recent actor is the most deeply nested.  The nested "act" claims
<    serve as a history trail that connects the initial request and
<    subject through the various delegation steps undertaken before
<    reaching the current actor.  In this sense, the current actor is
<    considered to include the entire authorization/delegation history,
<    leading naturally to the nested structure described here.
---
>    A chain of delegation can be expressed by nesting one act claim
>    within another.  The outermost act claim represents the current actor
>    while nested act claims represent prior actors.  The least recent
>    actor is the most deeply nested.  The nested act claims serve as a
>    history trail that connects the initial request and subject through
>    the various delegation steps undertaken before reaching the current
>    actor.  In this sense, the current actor is considered to include the
>    entire authorization/delegation history, leading naturally to the
>    nested structure described here.
724,725c722,723
<    identified as the current actor by the "act" claim.  Prior actors
<    identified by any nested "act" claims are informational only and are
---
>    identified as the current actor by the act claim.  Prior actors
>    identified by any nested act claims are informational only and are
728c726
<    The following example in Figure 6 illustrates nested "act" (actor)
---
>    The following example in Figure 6 illustrates nested act (actor)
730,731c728,729
<    about user@example.com while the "act" claim indicates that the
<    system <https://service16.example.com> is the current actor and
---
>    about user@example.com while the act claim indicates that the system
>    <https://service16.example.com> is the current actor and
757c755
<    response, "act" has the same semantics and format as the claim of the
---
>    response, act has the same semantics and format as the claim of the
762c760
<    The value of the "scope" claim is a JSON string containing a space-
---
>    The value of the scope claim is a JSON string containing a space-
766c764
<    Figure 7 illustrates the "scope" claim within a JWT Claims Set.
---
>    Figure 7 illustrates the scope claim within a JWT Claims Set.
779c777
<    OAuth 2.0 Token Introspection [RFC7662] already defines the "scope"
---
>    OAuth 2.0 Token Introspection [RFC7662] already defines the scope
784c782
<    The "client_id" claim carries the client identifier of the OAuth 2.0
---
>    The client_id claim carries the client identifier of the OAuth 2.0
787c785
<    The following example in Figure 8 illustrates the "client_id" claim
---
>    The following example in Figure 8 illustrates the client_id claim
801,803c799,801
<    OAuth 2.0 Token Introspection [RFC7662] already defines the
<    "client_id" parameter as the client identifier for the OAuth 2.0
<    client that requested the token.
---
>    OAuth 2.0 Token Introspection [RFC7662] already defines the client_id
>    parameter as the client identifier for the OAuth 2.0 client that
>    requested the token.
807c805
<    The "may_act" claim makes a statement that one party is authorized to
---
>    The may_act claim makes a statement that one party is authorized to
809,832c807,829
<    be used, for example, when a "subject_token" is presented to the
<    token endpoint in a token exchange request and "may_act" claim in the
<    subject token can be used by the authorization server to determine
<    whether the client (or party identified in the "actor_token") is
<    authorized to engage in the requested delegation or impersonation.
<    The claim value is a JSON object, and members in the JSON object are
<    claims that identify the party that is asserted as being eligible to
<    act for the party identified by the JWT containing the claim.  The
<    claims that make up the "may_act" claim identify and possibly provide
<    additional information about the authorized actor.  For example, the
<    combination of the two claims "iss" and "sub" are sometimes necessary
<    to uniquely identify an authorized actor, while the "email" claim
<    might be used to provide additional useful information about that
<    party.
< 
<    However, claims within the "may_act" claim pertain only to the
<    identity of that party and are not relevant to the validity of the
<    containing JWT in the same manner as top-level claims.  Consequently,
<    claims such as "exp", "nbf", and "aud" are not meaningful when used
<    within a "may_act" claim and are therefore not used.
< 
<    Figure 9 illustrates the "may_act" claim within a JWT Claims Set.
<    The claims of the token itself are about user@example.com while the
<    "may_act" claim indicates that admin@example.com is authorized to act
---
>    be used, for example, when a subject_token is presented to the token
>    endpoint in a token exchange request and may_act claim in the subject
>    token can be used by the authorization server to determine whether
>    the client (or party identified in the actor_token) is authorized to
>    engage in the requested delegation or impersonation.  The claim value
>    is a JSON object, and members in the JSON object are claims that
>    identify the party that is asserted as being eligible to act for the
>    party identified by the JWT containing the claim.  The claims that
>    make up the may_act claim identify and possibly provide additional
>    information about the authorized actor.  For example, the combination
>    of the two claims iss and sub are sometimes necessary to uniquely
>    identify an authorized actor, while the email claim might be used to
>    provide additional useful information about that party.
> 
>    However, claims within the may_act claim pertain only to the identity
>    of that party and are not relevant to the validity of the containing
>    JWT in the same manner as top-level claims.  Consequently, claims
>    such as exp, nbf, and aud are not meaningful when used within a
>    may_act claim and are therefore not used.
> 
>    Figure 9 illustrates the may_act claim within a JWT Claims Set.  The
>    claims of the token itself are about user@example.com while the
>    may_act claim indicates that admin@example.com is authorized to act
850c847
<    response, "may_act" has the same semantics and format as the claim of
---
>    response, may_act has the same semantics and format as the claim of
869c866
<    the "scope" claim (in addition to other typical constraints such as a
---
>    the scope claim (in addition to other typical constraints such as a
1148c1145
<    only a "subject_token" and no "actor_token").  The client tells the
---
>    only a subject_token and no actor_token).  The client tells the
1150c1147
<    service with the logical name "urn:example:cooperation-context".
---
>    service with the logical name urn:example:cooperation-context.
1170,1173c1167,1170
<    The "subject_token" in the prior request is a JWT, and the decoded
<    JWT Claims Set is shown here.  The JWT is intended for consumption by
<    the authorization server within a specific time window.  The subject
<    of the JWT ("bdc@example.net") is the party on behalf of whom the new
---
>    The subject_token in the prior request is a JWT, and the decoded JWT
>    Claims Set is shown here.  The JWT is intended for consumption by the
>    authorization server within a specific time window.  The subject of
>    the JWT (bdc@example.net) is the party on behalf of whom the new
1189,1190c1186,1187
<    The "access_token" parameter of the token exchange response shown
<    below contains the new token that the client requested.  The other
---
>    The access_token parameter of the token exchange response shown below
>    contains the new token that the client requested.  The other
1218,1222c1215,1219
<    "urn:example:cooperation-context" any time before its expiration.
<    The subject ("sub") of the JWT is the same as the subject the token
<    used to make the request, which effectively enables the client to
<    impersonate that subject at the system entity known by the logical
<    name of "urn:example:cooperation-context" by using the token.
---
>    urn:example:cooperation-context any time before its expiration.  The
>    subject (sub) of the JWT is the same as the subject the token used to
>    make the request, which effectively enables the client to impersonate
>    that subject at the system entity known by the logical name of
>    urn:example:cooperation-context by using the token.
1239c1236
<    token and providing both a "subject_token" and an "actor_token".  The
---
>    token and providing both a subject_token and an actor_token.  The
1241,1243c1238,1240
<    at the target service with the logical name "urn:example:cooperation-
<    context".  Policy at the authorization server dictates that the
<    issued token be a composite.
---
>    at the target service with the logical name urn:example:cooperation-
>    context.  Policy at the authorization server dictates that the issued
>    token be a composite.
1269,1273c1266,1270
<    The "subject_token" in the prior request is a JWT, and the decoded
<    JWT Claims Set is shown here.  The JWT is intended for consumption by
<    the authorization server before a specific expiration time.  The
<    subject of the JWT ("user@example.net") is the party on behalf of
<    whom the new token is being requested.
---
>    The subject_token in the prior request is a JWT, and the decoded JWT
>    Claims Set is shown here.  The JWT is intended for consumption by the
>    authorization server before a specific expiration time.  The subject
>    of the JWT (user@example.net) is the party on behalf of whom the new
>    token is being requested.
1291c1288
<    The "actor_token" in the prior request is a JWT, and the decoded JWT
---
>    The actor_token in the prior request is a JWT, and the decoded JWT
1294c1291
<    subject of the JWT ("admin@example.net") is the actor that will wield
---
>    subject of the JWT (admin@example.net) is the actor that will wield
1308,1309c1305,1306
<    The "access_token" parameter of the token exchange response shown
<    below contains the new token that the client requested.  The other
---
>    The access_token parameter of the token exchange response shown below
>    contains the new token that the client requested.  The other
1337,1343c1334,1340
<    "urn:example:cooperation-context" any time before its expiration.
<    The subject ("sub") of the JWT is the same as the subject of the
<    "subject_token" used to make the request.  The actor ("act") of the
<    JWT is the same as the subject of the "actor_token" used to make the
<    request.  This indicates delegation and identifies
<    "admin@example.net" as the current actor to whom authority has been
<    delegated to act on behalf of "user@example.net".
---
>    urn:example:cooperation-context any time before its expiration.  The
>    subject (sub) of the JWT is the same as the subject of the
>    subject_token used to make the request.  The actor (act) of the JWT
>    is the same as the subject of the actor_token used to make the
>    request.  This indicates delegation and identifies admin@example.net
>    as the current actor to whom authority has been delegated to act on
>    behalf of user@example.net.
1381d1377
< 
1388d1383
< 
1394d1388
< 
1400d1393
< 
1406d1398
< 
