270,271c270,271
<        (DSCP) and the ECN field in the IP header are typically treated
<        in the same way along the path.  This method is the only one
---
>       (DSCP) and the ECN field in the IP header are typically treated in
>       the same way along the path.  This method is the only one
279,280c279,280
<    2.  Via configuration: e.g., by assuming that a common wireless
<        uplink is also a shared bottleneck.
---
>    2. Via configuration: e.g., by assuming that a common wireless uplink
>       is also a shared bottleneck.
395,396c395
<    (2)  When a flow f stops or pauses, its entry is removed from the
<         list.
---
>    (2)When a flow f stops or pauses, its entry is removed from the list.
399,402c398,401
<         new sending rate CC_R(f), the flow calls UPDATE, which carries
<         out the tasks listed below to derive the new sending rates for
<         all the flows in the FG.  A flow's UPDATE function uses three
<         local (i.e., per-flow) temporary variables: S_P, TLO, and AR.
---
>       new sending rate CC_R(f), the flow calls UPDATE, which carries out
>       the tasks listed below to derive the new sending rates for all the
>       flows in the FG.  A flow's UPDATE function uses three local (i.e.,
>       per-flow) temporary variables: S_P, TLO, and AR.
417,418c416,417
<         (c)  It distributes S_CR among all flows, ensuring that each
<              flow's desired rate is not exceeded.
---
>       (c)It distributes S_CR among all flows, ensuring that each flow's
>          desired rate is not exceeded.
741,742c740,741
<         controller's initial rate.  SBD will assign the correct FGI.
<         When a flow is assigned an FGI, it adds its FSE_R(f) to S_CR.
---
>       controller's initial rate.  SBD will assign the correct FGI.  When
>       a flow is assigned an FGI, it adds its FSE_R(f) to S_CR.
749,759c748,757
<         new_DR(f) to be "infinity" in case of a bulk data transfer with
<         an unknown maximum rate, the flow calls UPDATE, which carries
<         out the tasks listed below to derive the flow's new sending
<         rate, Rate(f).  A flow's UPDATE function uses a few local (i.e.,
<         per-flow) temporary variables, which are all initialized to 0:
<         DELTA, new_S_CR, and S_P.
< 
<         (a)  For all the flows in its FG (including itself), it
<              calculates the sum of all the calculated rates, new_S_CR.
<              Then, it calculates DELTA: the difference between FSE_R(f)
<              and CC_R(f).
---
>       new_DR(f) to be "infinity" in case of a bulk data transfer with an
>       unknown maximum rate, the flow calls UPDATE, which carries out the
>       tasks listed below to derive the flow's new sending rate, Rate(f).
>       A flow's UPDATE function uses a few local (i.e., per-flow)
>       temporary variables, which are all initialized to 0: DELTA,
>       new_S_CR, and S_P.
> 
>       (a)For all the flows in its FG (including itself), it calculates
>          the sum of all the calculated rates, new_S_CR.  Then, it
>          calculates DELTA: the difference between FSE_R(f) and CC_R(f).
911,912c909,910
<    (3b)  FSE_R(2) = 2.  DELTA is positive, hence S_CR = 9 + 1 = 10;
<          DR(2) = 2.
---
>    (3b)FSE_R(2) = 2.  DELTA is positive, hence S_CR = 9 + 1 = 10; DR(2) =
>       2.
943,944c941,942
<    (3b)  FSE_R(1) = 7, DELTA is positive, hence S_CR = 10 + 1 = 11;
<          DR(1) = min(2, 7) = 2.
---
>    (3b)FSE_R(1) = 7, DELTA is positive, hence S_CR = 10 + 1 = 11; DR(1) =
>       min(2, 7) = 2.
1043d1040
< 
1053d1049
< 
1063d1058
< 
