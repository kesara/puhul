209,212c209,213
<    Latency:  The time a message takes to travel from source to
<          destination.  It may be approximated as RTT/2 (round-trip
<          time), assuming the networks are symmetrical.  In this context,
<          we will consider the statistical median formula.
---
>    Latency:
>          The time a message takes to travel from source to destination.
>          It may be approximated as RTT/2 (round-trip time), assuming the
>          networks are symmetrical.  In this context, we will consider
>          the statistical median formula.
214c215,216
<    Jitter:  Latency variation.  There are some formulas to calculate
---
>    Jitter:
>          Latency variation.  There are some formulas to calculate
218,219c220,222
<    Bandwidth:  Bit rate of communication.  To ensure quality, a protocol
<          must ensure the availability of the bandwidth needed by the
---
>    Bandwidth:
>          Bit rate of communication.  To ensure quality, a protocol must
>          ensure the availability of the bandwidth needed by the
222,224c225,228
<    Packet loss:  The percentage of packet loss is closely related to
<          bandwidth and jitter.  Packet loss affects bandwidth because a
<          high packet loss sometimes implies retransmissions that also
---
>    Packet loss:
>          The percentage of packet loss is closely related to bandwidth
>          and jitter.  Packet loss affects bandwidth because a high
>          packet loss sometimes implies retransmissions that also
468,481c472,485
<       (a)  Q4S-aware-network scenario: The network is Q4S aware and
<            reacts by itself to these alerts.  In this scenario, Q4S-
<            ALERT messages are sent by the server to the client, and
<            network elements inspect and process these alert messages.
<            The alerting mode in this scenario is called Q4S-aware-
<            network alerting mode.
< 
<       (b)  Reactive scenario: As shown in Figure 1, the network is not
<            Q4S aware.  In this scenario, alert notifications are sent to
<            a specific node, called an Actuator, which is in charge of
<            making decisions regarding what actions to trigger: either to
<            change application behavior to adapt it to network conditions
<            and/or invoke a network policy server in order to reconfigure
<            the network and request better quality for application flows.
---
>       (a)Q4S-aware-network scenario: The network is Q4S aware and reacts
>          by itself to these alerts.  In this scenario, Q4S-ALERT
>          messages are sent by the server to the client, and network
>          elements inspect and process these alert messages.  The
>          alerting mode in this scenario is called Q4S-aware-network
>          alerting mode.
> 
>       (b)Reactive scenario: As shown in Figure 1, the network is not Q4S
>          aware.  In this scenario, alert notifications are sent to a
>          specific node, called an Actuator, which is in charge of making
>          decisions regarding what actions to trigger: either to change
>          application behavior to adapt it to network conditions and/or
>          invoke a network policy server in order to reconfigure the
>          network and request better quality for application flows.
501,506c505,509
<            format will be implementation dependent.  In this way, we
<            will call the messages sent from the server stack to the
<            Actuator "notifications" (e.g., alert notifications) and the
<            messages sent from the Actuator to the server stack in
<            response to notifications "acknowledges" (e.g., alert
<            acknowledges).
---
>          format will be implementation dependent.  In this way, we will
>          call the messages sent from the server stack to the Actuator
>          "notifications" (e.g., alert notifications) and the messages
>          sent from the Actuator to the server stack in response to
>          notifications "acknowledges" (e.g., alert acknowledges).
570,578c573,581
<    (a)  Measurements do not meet the requirements: in this case, the
<         stage 0 is repeated after sending an alert from the server to
<         the client or from the server stack to the Actuator, depending
<         on the alerting mode defined in the Handshake phase.  Notice
<         that measurements continue to be taken but no alerts are sent
<         during the "alert-pause" time.  In the Reactive scenario, the
<         Actuator will decide either to forward the alert notification to
<         the network policy server or to the application, depending on
<         where reconfiguration actions have to be taken.
---
>    (a)Measurements do not meet the requirements: in this case, the stage
>       0 is repeated after sending an alert from the server to the client
>       or from the server stack to the Actuator, depending on the
>       alerting mode defined in the Handshake phase.  Notice that
>       measurements continue to be taken but no alerts are sent during
>       the "alert-pause" time.  In the Reactive scenario, the Actuator
>       will decide either to forward the alert notification to the
>       network policy server or to the application, depending on where
>       reconfiguration actions have to be taken.
580,581c583,584
<    (b)  Measurements do meet the requirements: in this case, client
<         moves to stage 1 by sending a new READY message.
---
>    (b)Measurements do meet the requirements: in this case, client moves
>       to stage 1 by sending a new READY message.
590,591c593,594
<         case, the client moves to the beginning of Stage 0 for
<         initiating the negotiation measurements again.
---
>       case, the client moves to the beginning of Stage 0 for initiating
>       the negotiation measurements again.
924c927,928
<    Method:  This specification defines seven methods: BEGIN for starting
---
>    Method:
>          This specification defines seven methods: BEGIN for starting
935,941c939,946
<    Q4S-Version:  Both request and response messages include the version
<          of Q4S in use.  To be compliant with this specification,
<          applications sending Q4S messages MUST include a Q4S-Version of
<          "Q4S/1.0".  The Q4S-Version string is case insensitive, but
<          implementations MUST send uppercase.  Unlike HTTP/1.1, Q4S
<          treats the version number as a literal string.  In practice,
<          this should make no difference.
---
>    Q4S-Version:
>          Both request and response messages include the version of Q4S
>          in use.  To be compliant with this specification, applications
>          sending Q4S messages MUST include a Q4S-Version of "Q4S/1.0".
>          The Q4S-Version string is case insensitive, but implementations
>          MUST send uppercase.  Unlike HTTP/1.1, Q4S treats the version
>          number as a literal string.  In practice, this should make no
>          difference.
972c977,978
<    1xx:  Provisional -- request received, continuing to process the
---
>    1xx:
>          Provisional -- request received, continuing to process the
975c981,982
<    2xx:  Success -- the action was successfully received, understood,
---
>    2xx:
>          Success -- the action was successfully received, understood,
978c985,986
<    3xx:  Redirection -- further action needs to be taken in order to
---
>    3xx:
>          Redirection -- further action needs to be taken in order to
981c989,990
<    4xx:  Request Failure -- the request contains bad syntax or cannot be
---
>    4xx:
>          Request Failure -- the request contains bad syntax or cannot be
984c993,994
<    5xx:  Server Error -- the server failed to fulfill an apparently
---
>    5xx:
>          Server Error -- the server failed to fulfill an apparently
987c997,998
<    6xx:  Global Failure -- the request cannot be fulfilled at any
---
>    6xx:
>          Global Failure -- the request cannot be fulfilled at any
1018,1034c1029,1046
<    Session-Id:  the value for this header field is the same sess-id used
<          in SDP (embedded in the SDP "o=" line) and is assigned by the
<          server.  The messages without SDP MUST include this header
<          field.  If a message has an SDP body, this header field is
<          optional.  The method of sess-id allocation is up to the
<          creating tool, but it is suggested that a UTC timestamp be used
<          to ensure uniqueness.
< 
<    Sequence-Number:  sequential and cyclic positive integer number
<          assigned to PING and BWIDTH messages and acknowledged in 200 OK
<          responses.
< 
<    Timestamp:  this optional header field contains the system time (with
<          the best possible accuracy).  It indicates the time in which
<          the PING request was sent.  If this header field is present in
<          PING messages, then the 200 OK response messages MUST include
<          this value.
---
>    Session-Id:
>          the value for this header field is the same sess-id used in SDP
>          (embedded in the SDP "o=" line) and is assigned by the server.
>          The messages without SDP MUST include this header field.  If a
>          message has an SDP body, this header field is optional.  The
>          method of sess-id allocation is up to the creating tool, but it
>          is suggested that a UTC timestamp be used to ensure uniqueness.
> 
>    Sequence-Number:
>          sequential and cyclic positive integer number assigned to PING
>          and BWIDTH messages and acknowledged in 200 OK responses.
> 
>    Timestamp:
>          this optional header field contains the system time (with the
>          best possible accuracy).  It indicates the time in which the
>          PING request was sent.  If this header field is present in PING
>          messages, then the 200 OK response messages MUST include this
>          value.
1036c1048,1049
<    Stage:  this is used in the client's READY requests and the server's
---
>    Stage:
>          this is used in the client's READY requests and the server's
1046,1055c1059,1069
<    User-Agent:  this header field contains information about the
<          implementation of the user agent.  This is for statistical
<          purposes, the tracing of protocol violations, and the automated
<          recognition of user agents for the sake of tailoring responses
<          to avoid particular user agent limitations.  User agents SHOULD
<          include this field with requests.  The field MAY contain
<          multiple product tokens and comments identifying the agent and
<          any sub-products that form a significant part of the user
<          agent.  By convention, the product tokens are listed in order
<          of their significance for identifying the application.
---
>    User-Agent:
>          this header field contains information about the implementation
>          of the user agent.  This is for statistical purposes, the
>          tracing of protocol violations, and the automated recognition
>          of user agents for the sake of tailoring responses to avoid
>          particular user agent limitations.  User agents SHOULD include
>          this field with requests.  The field MAY contain multiple
>          product tokens and comments identifying the agent and any sub-
>          products that form a significant part of the user agent.  By
>          convention, the product tokens are listed in order of their
>          significance for identifying the application.
1512,1538c1526,1556
<    Handshake phase:  in which the server is contacted by the client, and
<       in the answer message, the quality constraints for the application
<       are communicated in the embedded SDP.
< 
<    Negotiation phase:  in which the quality of the connection is
<       measured in both directions (latency, jitter, bandwidth, and
<       packet loss), and Q4S messages may be sent in order to alert if
<       the measured quality does not meet the constraints.  This phase is
<       iterative until quality constraints are reached, or the session is
<       canceled after a number of measurement cycles with consistent
<       violation of the quality constraints.  The number of measurement
<       cycles executed depends on the "qos-level", which is incremented
<       in each cycle until a maximum "qos-level" value is reached.  Just
<       after reaching the quality requirements, Q4S provides a simple
<       optional mechanism using HTTP to start the application.
< 
<    Continuity phase:  in which quality is continuously measured.  In
<       this phase, the measurements MUST avoid disturbing the application
<       by consuming network resources.  If quality constraints are not
<       met, the server stack will notify the Actuator with an alert
<       notification.  If later the quality improves, the server stack
<       will notify the Actuator, in this case with a recovery
<       notification.  After several alert notifications with no quality
<       improvements, the Q4S stack SHOULD move to the Termination phase.
< 
<    Termination phase:  in which the Q4S session is terminated.  The
<       application may be closed also or may not start.
---
>    Handshake phase:
>       in which the server is contacted by the client, and in the answer
>       message, the quality constraints for the application are
>       communicated in the embedded SDP.
> 
>    Negotiation phase:
>       in which the quality of the connection is measured in both
>       directions (latency, jitter, bandwidth, and packet loss), and Q4S
>       messages may be sent in order to alert if the measured quality
>       does not meet the constraints.  This phase is iterative until
>       quality constraints are reached, or the session is canceled after
>       a number of measurement cycles with consistent violation of the
>       quality constraints.  The number of measurement cycles executed
>       depends on the "qos-level", which is incremented in each cycle
>       until a maximum "qos-level" value is reached.  Just after reaching
>       the quality requirements, Q4S provides a simple optional mechanism
>       using HTTP to start the application.
> 
>    Continuity phase:
>       in which quality is continuously measured.  In this phase, the
>       measurements MUST avoid disturbing the application by consuming
>       network resources.  If quality constraints are not met, the server
>       stack will notify the Actuator with an alert notification.  If
>       later the quality improves, the server stack will notify the
>       Actuator, in this case with a recovery notification.  After
>       several alert notifications with no quality improvements, the Q4S
>       stack SHOULD move to the Termination phase.
> 
>    Termination phase:
>       in which the Q4S session is terminated.  The application may be
>       closed also or may not start.
1625,1627c1643,1646
<    Q4S-aware-network:  Q4S-ALERT messages are triggered by the server to
<          the client.  In this case, the network is supposed to be Q4S
<          aware, and reacts by itself to these alerts.
---
>    Q4S-aware-network:
>          Q4S-ALERT messages are triggered by the server to the client.
>          In this case, the network is supposed to be Q4S aware, and
>          reacts by itself to these alerts.
1629c1648,1649
<    Reactive:  alert notifications are sent by the server stack to the
---
>    Reactive:
>          alert notifications are sent by the server stack to the
2134,2146c2154,2167
<    In the Q4S-aware-network scenario:  a Q4S-ALERT method will be
<       triggered by the server to the client, and the client will answer
<       with the same Q4S-ALERT method.  After receiving the same Q4S-
<       ALERT from the counterpart, no other alerts will be triggered by
<       the server during the "alert-pause" period of time in order to
<       allow the network to react, but measurements will continue to be
<       taken to achieve early detection of improved network quality
<       conditions and a fast application start.
< 
<    In the Reactive scenario:  an alert notification will be sent by the
<       server stack to the Actuator, and the Actuator will answer with an
<       alert acknowledgement.  After receiving the alert acknowledgement
<       from the Actuator, the server stack will not send other alert
---
>    In the Q4S-aware-network scenario:
>       a Q4S-ALERT method will be triggered by the server to the client,
>       and the client will answer with the same Q4S-ALERT method.  After
>       receiving the same Q4S-ALERT from the counterpart, no other alerts
>       will be triggered by the server during the "alert-pause" period of
>       time in order to allow the network to react, but measurements will
>       continue to be taken to achieve early detection of improved
>       network quality conditions and a fast application start.
> 
>    In the Reactive scenario:
>       an alert notification will be sent by the server stack to the
>       Actuator, and the Actuator will answer with an alert
>       acknowledgement.  After receiving the alert acknowledgement from
>       the Actuator, the server stack will not send other alert
2457,2463c2478,2483
<    (a)  Q4S-aware-network alerting mode: the server MUST send a Q4S-
<         ALERT message to the client including the digital Signature
<         header field, and the client MUST answer with the same Q4S-ALERT
<         message.  The Signature header field contains the signed hash
<         value of the SDP body in order to protect all the SDP data, and
<         therefore it MUST contain the "measurement" parameters in the
<         body.
---
>    (a)Q4S-aware-network alerting mode: the server MUST send a Q4S-ALERT
>       message to the client including the digital Signature header
>       field, and the client MUST answer with the same Q4S-ALERT message.
>       The Signature header field contains the signed hash value of the
>       SDP body in order to protect all the SDP data, and therefore it
>       MUST contain the "measurement" parameters in the body.
2506,2511c2526,2531
<         notification to the Actuator, and the Actuator MUST answer with
<         an acknowledgement to the received alert notification.  The
<         alert notification sent to the Actuator by the server stack
<         doesn't follow Q4S message style but should have all the
<         information the Actuator will need for the actions to be taken,
<         which will be implementation dependent.
---
>       notification to the Actuator, and the Actuator MUST answer with an
>       acknowledgement to the received alert notification.  The alert
>       notification sent to the Actuator by the server stack doesn't
>       follow Q4S message style but should have all the information the
>       Actuator will need for the actions to be taken, which will be
>       implementation dependent.
2845,2848c2865,2867
<    2.  During the Continuity phase, violation of constraints is
<        detected; the "qos-level" is increased to 1, a Q4S-ALERT is sent
<        by the server to the client, and an "alert-pause" timer is
<        started.
---
>    2. During the Continuity phase, violation of constraints is detected;
>       the "qos-level" is increased to 1, a Q4S-ALERT is sent by the
>       server to the client, and an "alert-pause" timer is started.
2851,2853c2870,2872
<        constraints is detected; the "qos-level" is increased to 2, a
<        Q4S-ALERT is sent by the server to the client, and an "alert-
<        pause" timer is started.
---
>       constraints is detected; the "qos-level" is increased to 2, a Q4S-
>       ALERT is sent by the server to the client, and an "alert-pause"
>       timer is started.
2983c3002,3003
<    X)  When it sends messages over TCP (methods BEGIN, READY, Q4S-ALERT,
---
>    X)
>        When it sends messages over TCP (methods BEGIN, READY, Q4S-ALERT,
2992c3012,3013
<    Y)  During the measurement of latency, jitter, and packet loss, the
---
>    Y)
>        During the measurement of latency, jitter, and packet loss, the
2998c3019,3020
<    Z)  During the bandwidth and packet loss measurement stage, the
---
>    Z)
>        During the bandwidth and packet loss measurement stage, the
3028,3032c3050,3054
<    If SDP is included:  the Session-Id is embedded into the SDP,
<       therefore the inclusion of the Session-Id header field is
<       optional, but if present, must have the same value.  Measurements
<       are embedded into the SDP only for Q4S-ALERT messages in order to
<       be signed.
---
>    If SDP is included:
>       the Session-Id is embedded into the SDP, therefore the inclusion
>       of the Session-Id header field is optional, but if present, must
>       have the same value.  Measurements are embedded into the SDP only
>       for Q4S-ALERT messages in order to be signed.
3050c3072,3073
<    R)  When the client sends messages over TCP (methods BEGIN, READY
---
>    R)
>        When the client sends messages over TCP (methods BEGIN, READY
3058c3081,3082
<    S)  During the measurement of latency, jitter, and packet loss, the
---
>    S)
>        During the measurement of latency, jitter, and packet loss, the
3064c3088,3089
<    T)  During bandwidth and packet loss measurement, the server sends
---
>    T)
>        During bandwidth and packet loss measurement, the server sends
3138,3139c3163,3164
<    (1)  Compute target bandwidth / 8000 bits.  In the example above, it
<         is 11 Mbps / 8000 = 1375 messages per second.
---
>    (1)Compute target bandwidth / 8000 bits.  In the example above, it is
>       11 Mbps / 8000 = 1375 messages per second.
3141,3145c3166,3169
<    (2)  Divide the number of messages per second by 1000 to determine
<         the number of messages per millisecond: 1375 / 1000 = 1.375.
<         The integer value is the number of messages per millisecond (in
<         this case, one).  The pending bandwidth is now 375 messages per
<         second.
---
>    (2)Divide the number of messages per second by 1000 to determine the
>       number of messages per millisecond: 1375 / 1000 = 1.375.  The
>       integer value is the number of messages per millisecond (in this
>       case, one).  The pending bandwidth is now 375 messages per second.
3147,3148c3171,3172
<    (3)  To achieve the 375 messages per second, use a submultiple of
<         1000, which must be less than 375:
---
>    (3)To achieve the 375 messages per second, use a submultiple of 1000,
>       which must be less than 375:
3269,3275c3293,3300
<    Starting mode:  the end user may run Q4S against several delivery
<       nodes and after some seconds choose the best one to start the
<       multimedia session.
< 
<    Prevention mode:  during a streaming session, the user keeps several
<       Q4S dialogs against different alternative delivery nodes.  In case
<       of congestion, the end user MAY change to the best alternative
---
>    Starting mode:
>       the end user may run Q4S against several delivery nodes and after
>       some seconds choose the best one to start the multimedia session.
> 
>    Prevention mode:
>       during a streaming session, the user keeps several Q4S dialogs
>       against different alternative delivery nodes.  In case of
>       congestion, the end user MAY change to the best alternative
3384,3391c3409,3418
<    Description:  The service associated with this request is in charge
<          of the establishment of new Q4S sessions, and during the
<          session, manages the handoff to a new protocol phase
<          (Handshake, Negotiation and Continuity) as well as sends alerts
<          when measurements do not meet the requirements.
< 
<    Reference:  This document.  This service does not use IP-layer
<          broadcast, multicast, or anycast communication.
---
>    Description:
>          The service associated with this request is in charge of the
>          establishment of new Q4S sessions, and during the session,
>          manages the handoff to a new protocol phase (Handshake,
>          Negotiation and Continuity) as well as sends alerts when
>          measurements do not meet the requirements.
> 
>    Reference:
>          This document.  This service does not use IP-layer broadcast,
>          multicast, or anycast communication.
3561d3587
< 
3567d3592
< 
3573d3597
< 
3579d3602
< 
3585d3607
< 
3595d3616
< 
3601d3621
< 
3607d3626
< 
3613d3631
< 
3619d3636
< 
3625d3641
< 
3631d3646
< 
3637d3651
< 
3648d3661
< 
3658d3670
< 
3667d3678
< 
3678d3688
< 
3689d3698
< 
