1480,1488c1480,1487
<    (a)  sec_policy_child <= sec_policy_parent (<= for subset).  This
<         means that the set of security tuples specified on the security
<         policy of a child directory is always a subset of its parent
<         directory.
< 
<    (b)  sec_policy_child ^ sec_policy_parent != {} (^ for intersection,
<         {} for the empty set).  This means that the set of security
<         tuples specified on the security policy of a child directory
<         always has a non-empty intersection with that of the parent.
---
>    (a)sec_policy_child <= sec_policy_parent (<= for subset).  This means
>       that the set of security tuples specified on the security policy
>       of a child directory is always a subset of its parent directory.
> 
>    (b)sec_policy_child ^ sec_policy_parent != {} (^ for intersection, {}
>       for the empty set).  This means that the set of security tuples
>       specified on the security policy of a child directory always has a
>       non-empty intersection with that of the parent.
1491,1494c1490,1493
<         set of security tuples specified on the security policy of a
<         child directory may not intersect with that of the parent.  In
<         other words, there are no restrictions on how the system
<         administrator may set up these tuples.
---
>       set of security tuples specified on the security policy of a child
>       directory may not intersect with that of the parent.  In other
>       words, there are no restrictions on how the system administrator
>       may set up these tuples.
1648,1649c1647,1648
<    2.   Minor versions may add operations to the COMPOUND and
<         CB_COMPOUND procedures.
---
>    2. Minor versions may add operations to the COMPOUND and CB_COMPOUND
>       procedures.
1655,1656c1654,1655
<            represents sets of attributes and to the fattr4 that
<            represents sets of attribute values.
---
>          represents sets of attributes and to the fattr4 that represents
>          sets of attribute values.
1666,1667c1665,1666
<            new attributes in the midst of the current definitions would
<            be too burdensome.
---
>          new attributes in the midst of the current definitions would be
>          too burdensome.
1680,1683c1679,1682
<         *  adding bits to flag fields, such as new attributes to
<            GETATTR's bitmap4 data type, and providing corresponding
<            variants of opaque arrays, such as a notify4 used together
<            with such bitmaps
---
>       *  adding bits to flag fields, such as new attributes to GETATTR's
>          bitmap4 data type, and providing corresponding variants of
>          opaque arrays, such as a notify4 used together with such
>          bitmaps
1698,1699c1697,1698
<         This prevents the potential reuse of a particular operation
<         "slot" in a future minor version.
---
>       This prevents the potential reuse of a particular operation "slot"
>       in a future minor version.
1707,1713c1706,1712
<         Specifying that an operation MUST NOT be implemented is
<         equivalent to obsoleting an operation.  For the client, it means
<         that the operation MUST NOT be sent to the server.  For the
<         server, an NFS error can be returned as opposed to "dropping"
<         the request as an XDR decode error.  This approach allows for
<         the obsolescence of an operation while maintaining its structure
<         so that a future minor version can reintroduce the operation.
---
>       Specifying that an operation MUST NOT be implemented is equivalent
>       to obsoleting an operation.  For the client, it means that the
>       operation MUST NOT be sent to the server.  For the server, an NFS
>       error can be returned as opposed to "dropping" the request as an
>       XDR decode error.  This approach allows for the obsolescence of an
>       operation while maintaining its structure so that a future minor
>       version can reintroduce the operation.
1718,1719c1717,1718
<         2.  Minor versions may declare that a flag bit or enumeration
<             value MUST NOT be implemented.
---
>       2. Minor versions may declare that a flag bit or enumeration value
>          MUST NOT be implemented.
1724,1725c1723,1724
<    10.  Minor versions may upgrade features from OPTIONAL to
<         RECOMMENDED, or RECOMMENDED to REQUIRED.
---
>    10.Minor versions may upgrade features from OPTIONAL to RECOMMENDED,
>       or RECOMMENDED to REQUIRED.
1735,1743c1734,1741
<         feature as REQUIRED.  On the other hand, some classes of
<         features are infrastructural and have broad effects.  Allowing
<         infrastructural features to be RECOMMENDED or OPTIONAL
<         complicates implementation of the minor version.
< 
<    13.  A client MUST NOT attempt to use a stateid, filehandle, or
<         similar returned object from the COMPOUND procedure with minor
<         version X for another COMPOUND procedure with minor version Y,
<         where X != Y.
---
>       feature as REQUIRED.  On the other hand, some classes of features
>       are infrastructural and have broad effects.  Allowing
>       infrastructural features to be RECOMMENDED or OPTIONAL complicates
>       implementation of the minor version.
> 
>    13.A client MUST NOT attempt to use a stateid, filehandle, or similar
>       returned object from the COMPOUND procedure with minor version X
>       for another COMPOUND procedure with minor version Y, where X != Y.
2464,2471c2462,2468
<    over four billion (2^(32)) replies in the reply cache is not
<    practical.  In practice, previous versions of NFS have chosen to
<    store a fixed number of replies in the cache, and to use a least
<    recently used (LRU) approach to replacing cache entries with new
<    entries when the cache is full.  In NFSv4.1, the number of
<    outstanding requests is bounded by the size of the slot table, and a
<    sequence ID per slot is used to tell the replier when it is safe to
<    delete a cached reply.
---
>    over four billion (2^32) replies in the reply cache is not practical.
>    In practice, previous versions of NFS have chosen to store a fixed
>    number of replies in the cache, and to use a least recently used
>    (LRU) approach to replacing cache entries with new entries when the
>    cache is full.  In NFSv4.1, the number of outstanding requests is
>    bounded by the size of the slot table, and a sequence ID per slot is
>    used to tell the replier when it is safe to delete a cached reply.
2485c2482
<    unsigned value, and is therefore in the range 0..0xFFFFFFFF (2^(32) -
---
>    unsigned value, and is therefore in the range 0..0xFFFFFFFF (2^32 -
2491c2488
<    ID set to zero (i.e., (2^(32) - 1) + 1 mod 2^(32)).
---
>    ID set to zero (i.e., (2^32 - 1) + 1 mod 2^32).
3330,3332c3327,3329
<        effectively the same as the second scenario, but a disadvantage
<        is that each user needs to be allocated at least one session
<        each, so the approach suffers from lack of economy.
---
>       effectively the same as the second scenario, but a disadvantage is
>       that each user needs to be allocated at least one session each, so
>       the approach suffers from lack of economy.
3927,3935c3924,3931
<    2.  If the attempts succeed, the session is still alive, and this is
<        a strong indicator that the server's network address has moved.
<        The client might send an EXCHANGE_ID on the connection that
<        returned NFS4ERR_BADSESSION to see if there are opportunities for
<        client ID trunking (i.e., the same client ID and so_major_id
<        value are returned).  The client might use DNS to see if the
<        moved network address was replaced with another, so that the
<        performance and availability benefits of session trunking can
<        continue.
---
>    2. If the attempts succeed, the session is still alive, and this is a
>       strong indicator that the server's network address has moved.  The
>       client might send an EXCHANGE_ID on the connection that returned
>       NFS4ERR_BADSESSION to see if there are opportunities for client ID
>       trunking (i.e., the same client ID and so_major_id value are
>       returned).  The client might use DNS to see if the moved network
>       address was replaced with another, so that the performance and
>       availability benefits of session trunking can continue.
3943,3944c3939,3940
<        those network addresses.  If the same server owner is returned
<        but a new client ID is returned, this is a strong indicator of a
---
>       those network addresses.  If the same server owner is returned but
>       a new client ID is returned, this is a strong indicator of a
3946,3952c3942,3948
<        are returned, then this is a strong indication that the server
<        did delete the session, and the client will need to send a
<        CREATE_SESSION if it has no other sessions for that client ID.
<        If a different server owner is returned, the client can use DNS
<        to find other network addresses.  If it does not, or if DNS does
<        not find any other addresses for the server, then the client will
<        be unable to provide NFSv4.1 service, and fatal errors should be
---
>       are returned, then this is a strong indication that the server did
>       delete the session, and the client will need to send a
>       CREATE_SESSION if it has no other sessions for that client ID.  If
>       a different server owner is returned, the client can use DNS to
>       find other network addresses.  If it does not, or if DNS does not
>       find any other addresses for the server, then the client will be
>       unable to provide NFSv4.1 service, and fatal errors should be
7262,7265c7258,7260
<        creating acl, dacl, or sacl attributes are implementation
<        defined.  If either the dacl or sacl attribute is supported, then
<        the ACL4_DEFAULTED flag SHOULD be set on the newly created
<        attributes.
---
>       creating acl, dacl, or sacl attributes are implementation defined.
>       If either the dacl or sacl attribute is supported, then the
>       ACL4_DEFAULTED flag SHOULD be set on the newly created attributes.
8258,8260c8253,8255
<        session.  If CREATE_SESSION fails with NFS4ERR_STALE_CLIENTID,
<        the client must establish a new client ID (see Section 8.1) and
<        re-establish its lock state with the new client ID, after the
---
>       session.  If CREATE_SESSION fails with NFS4ERR_STALE_CLIENTID, the
>       client must establish a new client ID (see Section 8.1) and re-
>       establish its lock state with the new client ID, after the
8264,8273c8259,8267
<        session returns NFS4ERR_DEADSESSION, this indicates that a
<        session is no longer usable for new, i.e., not satisfied from the
<        reply cache, operations.  Once all pending operations are
<        determined to be either performed before the retry or not
<        performed, the client sends a CREATE_SESSION request with the
<        client ID to re-establish the session.  If CREATE_SESSION fails
<        with NFS4ERR_STALE_CLIENTID, the client must establish a new
<        client ID (see Section 8.1) and re-establish its lock state after
<        the CREATE_SESSION, with the new client ID, succeeds
<        (Section 8.4.2.1).
---
>       session returns NFS4ERR_DEADSESSION, this indicates that a session
>       is no longer usable for new, i.e., not satisfied from the reply
>       cache, operations.  Once all pending operations are determined to
>       be either performed before the retry or not performed, the client
>       sends a CREATE_SESSION request with the client ID to re-establish
>       the session.  If CREATE_SESSION fails with NFS4ERR_STALE_CLIENTID,
>       the client must establish a new client ID (see Section 8.1) and
>       re-establish its lock state after the CREATE_SESSION, with the new
>       client ID, succeeds (Section 8.4.2.1).
8558,8559c8552,8553
<    2.  Client A and server experience mutual network partition, such
<        that client A is unable to renew its lease.
---
>    2. Client A and server experience mutual network partition, such that
>       client A is unable to renew its lease.
8588,8590c8582,8584
<    3.   Client A and server experience mutual network partition, such
<         that client A is unable to reclaim all of its locks within the
<         grace period.
---
>    3. Client A and server experience mutual network partition, such that
>       client A is unable to reclaim all of its locks within the grace
>       period.
8592,8593c8586,8587
<    4.   Server's reclaim grace period ends.  Client A has either no
<         locks or an incomplete set of locks known to the server.
---
>    4. Server's reclaim grace period ends.  Client A has either no locks
>       or an incomplete set of locks known to the server.
8595,8596c8589,8590
<    5.   Client B acquires a lock that would have conflicted with a lock
<         of client A that was not reclaimed.
---
>    5. Client B acquires a lock that would have conflicted with a lock of
>       client A that was not reclaimed.
8673,8675c8667,8669
<    2.  Record sufficient state in stable storage such that all known
<        edge conditions involving server restart, including the two noted
<        in this section, are detected.  It is acceptable to erroneously
---
>    2. Record sufficient state in stable storage such that all known edge
>       conditions involving server restart, including the two noted in
>       this section, are detected.  It is acceptable to erroneously
12834,12842c12828,12835
<    2.  Making an initial determination of whether migration has
<        occurred.  The initial determination will be based on whether the
<        EXCHANGE_ID results indicate that the current location element is
<        server-trunkable with that used to access the file system when
<        access was terminated by receiving NFS4ERR_MOVED.  If it is, then
<        migration has not occurred.  In that case, the transition is
<        dealt with, at least initially, as one involving continued access
<        to the same file system on the same server through a new network
<        address.
---
>    2. Making an initial determination of whether migration has occurred.
>       The initial determination will be based on whether the EXCHANGE_ID
>       results indicate that the current location element is server-
>       trunkable with that used to access the file system when access was
>       terminated by receiving NFS4ERR_MOVED.  If it is, then migration
>       has not occurred.  In that case, the transition is dealt with, at
>       least initially, as one involving continued access to the same
>       file system on the same server through a new network address.
12851,12863c12844,12855
<    4.  Verifying the trunking relationship assumed in step 2 as
<        discussed in Section 2.10.5.1.  Although this step will generally
<        confirm the initial determination, it is possible for
<        verification to invalidate the initial determination of network
<        address shift (without migration) and instead determine that
<        migration had occurred.  There is no need to redo step 3 above,
<        since it will be possible to continue use of the session
<        established already.
< 
<    5.  Obtaining access to existing locking state and/or re-obtaining
<        it.  How this is done depends on the final determination of
<        whether migration has occurred and can be done as described below
<        in Section 11.13.4 in the case of migration or as described in
---
>    4. Verifying the trunking relationship assumed in step 2 as discussed
>       in Section 2.10.5.1.  Although this step will generally confirm
>       the initial determination, it is possible for verification to
>       invalidate the initial determination of network address shift
>       (without migration) and instead determine that migration had
>       occurred.  There is no need to redo step 3 above, since it will be
>       possible to continue use of the session established already.
> 
>    5. Obtaining access to existing locking state and/or re-obtaining it.
>       How this is done depends on the final determination of whether
>       migration has occurred and can be done as described below in
>       Section 11.13.4 in the case of migration or as described in
12879,12882c12871,12874
<    B:  In the case that the network address is session-trunkable with
<        one used previously, a BIND_CONN_TO_SESSION is used to access
<        that session using the new network address.  Otherwise, or if the
<        bind operation fails, a CREATE_SESSION is done.
---
>    B: In the case that the network address is session-trunkable with one
>       used previously, a BIND_CONN_TO_SESSION is used to access that
>       session using the new network address.  Otherwise, or if the bind
>       operation fails, a CREATE_SESSION is done.
13199,13200c13191,13192
<    4.  Those requests that accessed the migrating file system in order
<        to obtain location or status information.
---
>    4. Those requests that accessed the migrating file system in order to
>       obtain location or status information.
15209,15214c15201,15206
<    1.  Update the file's size using the last write offset provided by
<        the client as either the true file size or as a hint of the file
<        size.  If the metadata server has a method available, any new
<        value for file size should be sanity-checked.  For example, the
<        file must not be truncated if the client presents a last write
<        offset less than the file's current size.
---
>    1. Update the file's size using the last write offset provided by the
>       client as either the true file size or as a hint of the file size.
>       If the metadata server has a method available, any new value for
>       file size should be sanity-checked.  For example, the file must
>       not be truncated if the client presents a last write offset less
>       than the file's current size.
15217,15219c15209,15211
<        must have sufficient knowledge from other sources to determine
<        the file's size.  For example, the metadata server queries the
<        storage devices with the control protocol.
---
>       must have sufficient knowledge from other sources to determine the
>       file's size.  For example, the metadata server queries the storage
>       devices with the control protocol.
15489,15490c15481,15482
<        the LAYOUTGET must be waited for because it may be carrying
<        layout information that will need to be returned to deal with the
---
>       the LAYOUTGET must be waited for because it may be carrying layout
>       information that will need to be returned to deal with the
15494,15495c15486,15487
<        server will not respond to the LAYOUTGET until the
<        CB_LAYOUTRECALL is processed.
---
>       server will not respond to the LAYOUTGET until the CB_LAYOUTRECALL
>       is processed.
15535,15536c15527,15528
<        CB_LAYOUTRECALL.  The server returns NFS4ERR_RECALLCONFLICT to
<        the client, which indicates to the client that there is a pending
---
>       CB_LAYOUTRECALL.  The server returns NFS4ERR_RECALLCONFLICT to the
>       client, which indicates to the client that there is a pending
15540,15545c15532,15537
<        CB_LAYOUTRECALL, but the LAYOUTGET arrived before the
<        LAYOUTRETURN and the response to CB_LAYOUTRECALL that completed
<        that processing.  The "seqid" in the layout stateid of LAYOUTGET
<        is equal to or greater than that of the "seqid" in
<        CB_LAYOUTRECALL.  The server has not received a response to the
<        CB_LAYOUTRECALL, so it returns NFS4ERR_RECALLCONFLICT.
---
>       CB_LAYOUTRECALL, but the LAYOUTGET arrived before the LAYOUTRETURN
>       and the response to CB_LAYOUTRECALL that completed that
>       processing.  The "seqid" in the layout stateid of LAYOUTGET is
>       equal to or greater than that of the "seqid" in CB_LAYOUTRECALL.
>       The server has not received a response to the CB_LAYOUTRECALL, so
>       it returns NFS4ERR_RECALLCONFLICT.
15548,15553c15540,15545
<        CB_LAYOUTRECALL; the server received the CB_LAYOUTRECALL
<        response, but the LAYOUTGET arrived before the LAYOUTRETURN that
<        completed that processing.  The "seqid" in the layout stateid of
<        LAYOUTGET is equal to that of the "seqid" in CB_LAYOUTRECALL.
<        The server has received a response to the CB_LAYOUTRECALL, so it
<        returns NFS4ERR_RETURNCONFLICT.
---
>       CB_LAYOUTRECALL; the server received the CB_LAYOUTRECALL response,
>       but the LAYOUTGET arrived before the LAYOUTRETURN that completed
>       that processing.  The "seqid" in the layout stateid of LAYOUTGET
>       is equal to that of the "seqid" in CB_LAYOUTRECALL.  The server
>       has received a response to the CB_LAYOUTRECALL, so it returns
>       NFS4ERR_RETURNCONFLICT.
15596c15588
<    maximum VALID_SEQID_RANGE is (2^(32) - 2) (accounting for zero not
---
>    maximum VALID_SEQID_RANGE is (2^32 - 2) (accounting for zero not
15869,15871c15861,15862
<       1.  The client can obtain a layout via LAYOUTGET after the
<           server's grace period and write the data to the storage
<           devices.
---
>       1. The client can obtain a layout via LAYOUTGET after the server's
>          grace period and write the data to the storage devices.
16003,16006c15994,15997
<    1.  The storage device uses NFSv4.1 as the storage protocol, i.e.,
<        the same physical hardware is used to implement both a metadata
<        and data server.  See Section 13.1 for a description of how
<        multiple roles are handled.
---
>    1. The storage device uses NFSv4.1 as the storage protocol, i.e., the
>       same physical hardware is used to implement both a metadata and
>       data server.  See Section 13.1 for a description of how multiple
>       roles are handled.
16012,16015c16003,16006
<        immaterial.  This is because it is always clear to the pNFS
<        client and server, from the upper-layer protocol being used
<        (NFSv4.1 or non-NFSv4.1), to which role the request to the common
<        server network address is directed.
---
>       immaterial.  This is because it is always clear to the pNFS client
>       and server, from the upper-layer protocol being used (NFSv4.1 or
>       non-NFSv4.1), to which role the request to the common server
>       network address is directed.
16339,16342c16330,16333
<        each list can be one or more elements, and each element
<        represents a data server address that may serve equally as the
<        target of I/O operations (see Section 13.5).  The length of this
<        array might be different than the stripe count.
---
>       each list can be one or more elements, and each element represents
>       a data server address that may serve equally as the target of I/O
>       operations (see Section 13.5).  The length of this array might be
>       different than the stripe count.
16371,16376c16362,16367
<        nfsv4_1_file_layouthint4, a compact representation of how the
<        data on a file on each data server is packed, whether the client
<        should send COMMIT operations to the metadata server or data
<        server, and the stripe unit size.  If a server returns two or
<        more overlapping layouts, each stripe unit size in each
<        overlapping layout MUST be the same.
---
>       nfsv4_1_file_layouthint4, a compact representation of how the data
>       on a file on each data server is packed, whether the client should
>       send COMMIT operations to the metadata server or data server, and
>       the stripe unit size.  If a server returns two or more overlapping
>       layouts, each stripe unit size in each overlapping layout MUST be
>       the same.
16381,16386c16372,16376
<    4.  nfl_pattern_offset: This field is the logical offset into the
<        file where the striping pattern starts.  It is required for
<        converting the client's logical I/O offset (e.g., the current
<        offset in a POSIX file descriptor before the read() or write()
<        system call is sent) into the stripe unit number (see
<        Section 13.4.1).
---
>    4. nfl_pattern_offset: This field is the logical offset into the file
>       where the striping pattern starts.  It is required for converting
>       the client's logical I/O offset (e.g., the current offset in a
>       POSIX file descriptor before the read() or write() system call is
>       sent) into the stripe unit number (see Section 13.4.1).
16394,16395c16384,16385
<        For example, via the LAYOUTGET operation, a client might request
<        a layout starting at offset 1000 of a file that has its striping
---
>       For example, via the LAYOUTGET operation, a client might request a
>       layout starting at offset 1000 of a file that has its striping
16399,16401c16389,16391
<        data servers in each element of the nflda_multipath_ds_list
<        array.  The number of elements in nfl_fh_list depends on whether
<        sparse or dense packing is being used.
---
>       data servers in each element of the nflda_multipath_ds_list array.
>       The number of elements in nfl_fh_list depends on whether sparse or
>       dense packing is being used.
16406,16407c16396,16397
<           -  Zero.  This means that filehandles used for each data
<              server are the same as the filehandle returned by the OPEN
---
>          -  Zero.  This means that filehandles used for each data server
>             are the same as the filehandle returned by the OPEN
16415,16416c16405,16406
<              data server in nflda_multipath_ds_list[X], the filehandle
<              in nfl_fh_list[X] MUST be used.
---
>             data server in nflda_multipath_ds_list[X], the filehandle in
>             nfl_fh_list[X] MUST be used.
16426,16428c16416,16417
<           time there exists i and j, (i != j), such that the
<           intersection of
<           nflda_multipath_ds_list[nflda_stripe_indices[i]] and
---
>          time there exists i and j, (i != j), such that the intersection
>          of nflda_multipath_ds_list[nflda_stripe_indices[i]] and
16895,16897c16884,16886
<        within this class, with the following exception.  The exception
<        is that if the operation uses a stateid that is incompatible with
<        a data-server personality (e.g., a special stateid or the stateid
---
>       within this class, with the following exception.  The exception is
>       that if the operation uses a stateid that is incompatible with a
>       data-server personality (e.g., a special stateid or the stateid
16899,16902c16888,16891
<        is in class 3, as described below.  A COMPOUND containing
<        multiple class 1 operations (and operations of no other class)
<        MAY be sent to a server with multiple concurrent data server and
<        non-data-server personalities.
---
>       is in class 3, as described below.  A COMPOUND containing multiple
>       class 1 operations (and operations of no other class) MAY be sent
>       to a server with multiple concurrent data server and non-data-
>       server personalities.
25893,25894c25882,25883
<        The principal that was defined in the RPC header's credential
<        and/or verifier at the time the client record was established.
---
>       The principal that was defined in the RPC header's credential and/
>       or verifier at the time the client record was established.
25983,25984c25972,25973
<        or lost connection, or the client is trying to determine if it
<        can perform trunking.
---
>       or lost connection, or the client is trying to determine if it can
>       perform trunking.
25989,25991c25978,25980
<        Since the record has been confirmed, the client must have
<        received the server's reply from the initial EXCHANGE_ID request.
<        Since the server has a confirmed record, and since
---
>       Since the record has been confirmed, the client must have received
>       the server's reply from the initial EXCHANGE_ID request.  Since
>       the server has a confirmed record, and since
26000,26002c25989,25991
<        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set, and if the
<        server has the following confirmed record, then this request is
<        likely the result of a chance collision between the values of the
---
>       If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set, and if the server
>       has the following confirmed record, then this request is likely
>       the result of a chance collision between the values of the
26006,26007c25995
<        { ownerid_arg, *, old_principal_arg, old_clientid_ret, confirmed
<        }
---
>       { ownerid_arg, *, old_principal_arg, old_clientid_ret, confirmed }
26050,26053c26038,26040
<        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set, and if the
<        server has the following confirmed client record, then this
<        request is likely from a previously confirmed client that has
<        restarted.
---
>       If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is not set, and if the server
>       has the following confirmed client record, then this request is
>       likely from a previously confirmed client that has restarted.
26064,26065c26051,26052
<        had maintained that information across restart, this request
<        would not have been sent.  If the server supports neither the
---
>       had maintained that information across restart, this request would
>       not have been sent.  If the server supports neither the
26083,26086c26070,26073
<        *  If the server subsequently receives a successful
<           CREATE_SESSION that confirms clientid_ret, then the server
<           atomically destroys the confirmed record and makes the
<           unconfirmed record confirmed as described in Section 18.36.3.
---
>       *  If the server subsequently receives a successful CREATE_SESSION
>          that confirms clientid_ret, then the server atomically destroys
>          the confirmed record and makes the unconfirmed record confirmed
>          as described in Section 18.36.3.
26088,26089c26075,26076
<        *  If the server instead subsequently receives an EXCHANGE_ID
<           with the client owner equal to ownerid_arg, one strategy is to
---
>       *  If the server instead subsequently receives an EXCHANGE_ID with
>          the client owner equal to ownerid_arg, one strategy is to
26096,26097c26083,26084
<        the following confirmed record, then this request is an attempt
<        at an update.
---
>       the following confirmed record, then this request is an attempt at
>       an update.
26102,26105c26089,26091
<        Since the record has been confirmed, the client must have
<        received the server's reply from the initial EXCHANGE_ID request.
<        The server allows the update, and the client record is left
<        intact.
---
>       Since the record has been confirmed, the client must have received
>       the server's reply from the initial EXCHANGE_ID request.  The
>       server allows the update, and the client record is left intact.
26109,26110c26095,26096
<        If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server has
<        no confirmed record corresponding ownerid_arg, then the server
---
>       If EXCHGID4_FLAG_UPD_CONFIRMED_REC_A is set, and the server has no
>       confirmed record corresponding ownerid_arg, then the server
26497,26507c26483,26493
<        previous CREATE_SESSION request, and the server returns the
<        cached result.  If csa_sequenceid is not equal to the sequence ID
<        in the slot, and is more than one greater (accounting for
<        wraparound), then the server returns the error
<        NFS4ERR_SEQ_MISORDERED, and does not change the slot.  If
<        csa_sequenceid is equal to the slot's sequence ID + 1 (accounting
<        for wraparound), then the slot's sequence ID is set to
<        csa_sequenceid, and the CREATE_SESSION processing goes to the
<        next phase.  A subsequent new CREATE_SESSION call over the same
<        client ID MUST use a csa_sequenceid that is one greater than the
<        sequence ID in the slot.
---
>       previous CREATE_SESSION request, and the server returns the cached
>       result.  If csa_sequenceid is not equal to the sequence ID in the
>       slot, and is more than one greater (accounting for wraparound),
>       then the server returns the error NFS4ERR_SEQ_MISORDERED, and does
>       not change the slot.  If csa_sequenceid is equal to the slot's
>       sequence ID + 1 (accounting for wraparound), then the slot's
>       sequence ID is set to csa_sequenceid, and the CREATE_SESSION
>       processing goes to the next phase.  A subsequent new
>       CREATE_SESSION call over the same client ID MUST use a
>       csa_sequenceid that is one greater than the sequence ID in the
>       slot.
26511,26515c26497,26501
<        client ID.  Otherwise, the client ID confirmation phase is
<        skipped and only the session creation phase occurs.  Any case in
<        which there is more than one record with identical values for
<        client ID represents a server implementation error.  Operation in
<        the potential valid cases is summarized as follows.
---
>       client ID.  Otherwise, the client ID confirmation phase is skipped
>       and only the session creation phase occurs.  Any case in which
>       there is more than one record with identical values for client ID
>       represents a server implementation error.  Operation in the
>       potential valid cases is summarized as follows.
26551,26553c26537,26539
<              Neither of these cases is permissible.  Processing stops
<              and NFS4ERR_CLID_INUSE is returned to the client.  No
<              changes are made to any client records on the server.
---
>             Neither of these cases is permissible.  Processing stops and
>             NFS4ERR_CLID_INUSE is returned to the client.  No changes
>             are made to any client records on the server.
26568,26572c26554,26558
<        sent has a sequence ID equal to zero, the server can simply
<        return what is in the reply cache: NFS4ERR_SEQ_MISORDERED.  The
<        client initializes its reply cache for receiving callbacks in the
<        same way, and similarly, the first CB_SEQUENCE operation on a
<        slot after session creation MUST have a sequence ID of one.
---
>       sent has a sequence ID equal to zero, the server can simply return
>       what is in the reply cache: NFS4ERR_SEQ_MISORDERED.  The client
>       initializes its reply cache for receiving callbacks in the same
>       way, and similarly, the first CB_SEQUENCE operation on a slot
>       after session creation MUST have a sequence ID of one.
26581,26583c26567,26569
<        change, then a non-retry MUST be sent.  The server will
<        eventually dispose of any session that was created on the
<        original connection.
---
>       change, then a non-retry MUST be sent.  The server will eventually
>       dispose of any session that was created on the original
>       connection.
30307c30293
<    theory be up to 2^(32) - 1 bytes in length, but in practice NFSv4.1
---
>    theory be up to 2^32 - 1 bytes in length, but in practice NFSv4.1
30368,30369c30354,30355
<    1.  The name of the notification type.  This name must have the
<        prefix "NOTIFY_DEVICEID4_".  This name must be unique.
---
>    1. The name of the notification type.  This name must have the prefix
>       "NOTIFY_DEVICEID4_".  This name must be unique.
30372,30374c30358,30360
<        the request from the registrant will use TBD1 instead of an
<        actual value.  IANA MUST use a whole number that can be no higher
<        than 2^(32)-1, and should be the next available value.  The value
---
>       the request from the registrant will use TBD1 instead of an actual
>       value.  IANA MUST use a whole number that can be no higher than
>       2^32-1, and should be the next available value.  The value
30381,30382c30367,30368
<    3.  The Standards Track RFC(s) that describe the notification.  If
<        the RFC(s) have not yet been published, the registrant will use
---
>    3. The Standards Track RFC(s) that describe the notification.  If the
>       RFC(s) have not yet been published, the registrant will use
30387,30389c30373,30374
<        revision to the NFSv4 protocol.  If the value is L, it means a
<        new pNFS layout type.  Other values can be used with IESG
<        Approval.
---
>       revision to the NFSv4 protocol.  If the value is L, it means a new
>       pNFS layout type.  Other values can be used with IESG Approval.
30395,30396c30380,30381
<        minor version of NFSv4 approved, a Designated Expert should
<        review the registry to make recommended updates as needed.
---
>       minor version of NFSv4 approved, a Designated Expert should review
>       the registry to make recommended updates as needed.
30449,30453c30434,30438
<        higher than 2^(32)-1, and should be the next available value.
<        The value must be unique.  A Designated Expert must be used to
<        ensure that when the name of the recallable type and its value
<        are added to the NFSv4 XDR description [10], the result continues
<        to be a valid XDR description.
---
>       higher than 2^32-1, and should be the next available value.  The
>       value must be unique.  A Designated Expert must be used to ensure
>       that when the name of the recallable type and its value are added
>       to the NFSv4 XDR description [10], the result continues to be a
>       valid XDR description.
30460,30463c30445,30448
<        indicated by a single US-ASCII value.  If the value is N, it
<        means a minor revision to the NFSv4 protocol.  If the value is L,
<        it means a new pNFS layout type.  Other values can be used with
<        IESG Approval.
---
>       indicated by a single US-ASCII value.  If the value is N, it means
>       a minor revision to the NFSv4 protocol.  If the value is L, it
>       means a new pNFS layout type.  Other values can be used with IESG
>       Approval.
30465,30470c30450,30455
<    5.  The minor versions of NFSv4 that are allowed to use the
<        recallable object type.  While these are numeric values, IANA
<        will not allocate and assign them; the author of the relevant
<        RFCs with IESG Approval assigns these numbers.  Each time there
<        is a new minor version of NFSv4 approved, a Designated Expert
<        should review the registry to make recommended updates as needed.
---
>    5. The minor versions of NFSv4 that are allowed to use the recallable
>       object type.  While these are numeric values, IANA will not
>       allocate and assign them; the author of the relevant RFCs with
>       IESG Approval assigns these numbers.  Each time there is a new
>       minor version of NFSv4 approved, a Designated Expert should review
>       the registry to make recommended updates as needed.
30528,30533c30513,30518
<        the request from the registrant will use TBD1 instead of an
<        actual value.  The value assigned must be unique.  A Designated
<        Expert must be used to ensure that when the name of the layout
<        type and its value are added to the NFSv4.1 layouttype4
<        enumerated data type in the NFSv4.1 XDR description [10], the
<        result continues to be a valid XDR description.
---
>       the request from the registrant will use TBD1 instead of an actual
>       value.  The value assigned must be unique.  A Designated Expert
>       must be used to ensure that when the name of the layout type and
>       its value are added to the NFSv4.1 layouttype4 enumerated data
>       type in the NFSv4.1 XDR description [10], the result continues to
>       be a valid XDR description.
30535,30536c30520,30521
<    3.  The Standards Track RFC(s) that describe the notification.  If
<        the RFC(s) have not yet been published, the registrant will use
---
>    3. The Standards Track RFC(s) that describe the notification.  If the
>       RFC(s) have not yet been published, the registrant will use
30543,30545c30528,30529
<        revision to the NFSv4 protocol.  If the value is L, it means a
<        new pNFS layout type.  Other values can be used with IESG
<        Approval.
---
>       revision to the NFSv4 protocol.  If the value is L, it means a new
>       pNFS layout type.  Other values can be used with IESG Approval.
30551,30552c30535,30536
<        minor version of NFSv4 approved, a Designated Expert should
<        review the registry to make recommended updates as needed.
---
>       minor version of NFSv4 approved, a Designated Expert should review
>       the registry to make recommended updates as needed.
30621,30622c30605,30606
<              for CB_NOTIFY_DEVICEID; each entry is to be presented in
<              the form described in Section 22.3.
---
>             for CB_NOTIFY_DEVICEID; each entry is to be presented in the
>             form described in Section 22.3.
30627,30629c30611,30613
<           server would restrict a READ or WRITE operation, how would
<           pNFS via the layout similarly restrict a corresponding input
<           or output operation?
---
>          server would restrict a READ or WRITE operation, how would pNFS
>          via the layout similarly restrict a corresponding input or
>          output operation?
30684,30686c30668,30670
<        with a "${" followed by a registered domain name, followed by
<        ":", or it must start with "${FCFS.ietf.org".  The name must be
<        no more than 64 UTF-8 characters long.  The name must be unique.
---
>       with a "${" followed by a registered domain name, followed by ":",
>       or it must start with "${FCFS.ietf.org".  The name must be no more
>       than 64 UTF-8 characters long.  The name must be unique.
30690,30695c30674,30679
<        yet been published, the registrant will use RFCTBD1, RFCTBD2,
<        etc. instead of an actual RFC number.  Note that the RFCs do not
<        have to be a part of an NFS minor version.  For assignments made
<        on a First Come First Serve basis, an explanation (consuming no
<        more than 1024 bytes, or more if IANA permits) of the purpose of
<        the variable.  A reference to the explanation can be substituted.
---
>       yet been published, the registrant will use RFCTBD1, RFCTBD2, etc.
>       instead of an actual RFC number.  Note that the RFCs do not have
>       to be a part of an NFS minor version.  For assignments made on a
>       First Come First Serve basis, an explanation (consuming no more
>       than 1024 bytes, or more if IANA permits) of the purpose of the
>       variable.  A reference to the explanation can be substituted.
30748,30749c30732,30733
<    1.  A value of the ${ietf.org:CPU_ARCH} variable.  The value must be
<        1 to 32 UTF-8 characters long.  The value must be unique.
---
>    1. A value of the ${ietf.org:CPU_ARCH} variable.  The value must be 1
>       to 32 UTF-8 characters long.  The value must be unique.
30751,30753c30735,30737
<    2.  An explanation (consuming no more than 1024 bytes, or more if
<        IANA permits) of what CPU architecture the value denotes.  A
<        reference to the explanation can be substituted.
---
>    2. An explanation (consuming no more than 1024 bytes, or more if IANA
>       permits) of what CPU architecture the value denotes.  A reference
>       to the explanation can be substituted.
30781,30783c30765,30767
<    2.  An explanation (consuming no more than 1024 bytes, or more if
<        IANA permits) of what CPU architecture the value denotes.  A
<        reference to the explanation can be substituted.
---
>    2. An explanation (consuming no more than 1024 bytes, or more if IANA
>       permits) of what CPU architecture the value denotes.  A reference
>       to the explanation can be substituted.
30968,30969c30952,30958
<    [35]       Bradner, S., "The Internet Standards Process -- Revision
<               3", BCP 9, RFC 2026, October 1996.
---
>    [35]       Best Current Practice 9,
>               <https://www.rfc-editor.org/info/bcp9>.
>               At the time of writing, this BCP comprises the following:
> 
>               Bradner, S., "The Internet Standards Process -- Revision
>               3", BCP 9, RFC 2026, DOI 10.17487/RFC2026, October 1996,
>               <https://www.rfc-editor.org/info/rfc2026>.
30972c30961,30963
<               of Proposed Standards", BCP 9, RFC 7127, January 2014.
---
>               of Proposed Standards", BCP 9, RFC 7127,
>               DOI 10.17487/RFC7127, January 2014,
>               <https://www.rfc-editor.org/info/rfc7127>.
30976c30967,30968
<               Standard", BCP 9, RFC 5657, September 2009.
---
>               Standard", BCP 9, RFC 5657, DOI 10.17487/RFC5657,
>               September 2009, <https://www.rfc-editor.org/info/rfc5657>.
30980c30972,30973
<               October 2011.
---
>               DOI 10.17487/RFC6410, October 2011,
>               <https://www.rfc-editor.org/info/rfc6410>.
30984c30977,30978
<               December 2013.
---
>               DOI 10.17487/RFC7100, December 2013,
>               <https://www.rfc-editor.org/info/rfc7100>.
30987,30989c30981,30982
<               an IETF Area", BCP 9, RFC 7475, March 2015.
< 
<               <https://www.rfc-editor.org/info/bcp9>
---
>               an IETF Area", BCP 9, RFC 7475, DOI 10.17487/RFC7475,
>               March 2015, <https://www.rfc-editor.org/info/rfc7475>.
31820d31812
< 
31830d31821
< 
