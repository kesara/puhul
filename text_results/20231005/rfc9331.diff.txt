326,356c326,358
<    Classic Congestion Control:  A congestion control behaviour that can
<       coexist with standard Reno [RFC5681] without causing significantly
<       negative impact on its flow rate [RFC5033].  With Classic
<       congestion controls, such as Reno or CUBIC, because flow rate has
<       scaled since TCP congestion control was first designed in 1988, it
<       now takes hundreds of round trips (and growing) to recover after a
<       congestion signal (whether a loss or an ECN mark) as shown in the
<       examples in Section 5.1 of the L4S architecture [RFC9330] and in
<       [RFC3649].  Therefore, control of queuing and utilization becomes
<       very slack, and the slightest disturbances (e.g., from new flows
<       starting) prevent a high rate from being attained.
< 
<    Scalable Congestion Control:  A congestion control where the average
<       time from one congestion signal to the next (the recovery time)
<       remains invariant as flow rate scales, all other factors being
<       equal.  This maintains the same degree of control over queuing and
<       utilization whatever the flow rate, as well as ensuring that high
<       throughput is robust to disturbances.  For instance, DCTCP
<       averages 2 congestion signals per round trip, whatever the flow
<       rate, as do other recently developed Scalable congestion controls,
<       e.g., Relentless TCP [RELENTLESS], Prague for TCP and QUIC
<       [PRAGUE-CC] [PragueLinux], the L4S ECN part of Bottleneck
<       Bandwidth and Round-trip propagation time (BBRv2) [BBRv2]
<       [BBR-CC], and the L4S variant of SCReAM for real-time media
<       [SCReAM-L4S] [RFC8298].  See Section 4.3 for more explanation.
< 
<    Classic Service:  The Classic service is intended for all the
<       congestion control behaviours that coexist with Reno [RFC5681]
<       (e.g., Reno itself, CUBIC [RFC8312], Compound [CTCP], and TFRC
<       [RFC5348]).  The term 'Classic queue' means a queue providing the
<       Classic service.
---
>    Classic Congestion Control:
>       A congestion control behaviour that can coexist with standard Reno
>       [RFC5681] without causing significantly negative impact on its
>       flow rate [RFC5033].  With Classic congestion controls, such as
>       Reno or CUBIC, because flow rate has scaled since TCP congestion
>       control was first designed in 1988, it now takes hundreds of round
>       trips (and growing) to recover after a congestion signal (whether
>       a loss or an ECN mark) as shown in the examples in Section 5.1 of
>       the L4S architecture [RFC9330] and in [RFC3649].  Therefore,
>       control of queuing and utilization becomes very slack, and the
>       slightest disturbances (e.g., from new flows starting) prevent a
>       high rate from being attained.
> 
>    Scalable Congestion Control:
>       A congestion control where the average time from one congestion
>       signal to the next (the recovery time) remains invariant as flow
>       rate scales, all other factors being equal.  This maintains the
>       same degree of control over queuing and utilization whatever the
>       flow rate, as well as ensuring that high throughput is robust to
>       disturbances.  For instance, DCTCP averages 2 congestion signals
>       per round trip, whatever the flow rate, as do other recently
>       developed Scalable congestion controls, e.g., Relentless TCP
>       [RELENTLESS], Prague for TCP and QUIC [PRAGUE-CC] [PragueLinux],
>       the L4S ECN part of Bottleneck Bandwidth and Round-trip
>       propagation time (BBRv2) [BBRv2] [BBR-CC], and the L4S variant of
>       SCReAM for real-time media [SCReAM-L4S] [RFC8298].  See
>       Section 4.3 for more explanation.
> 
>    Classic Service:
>       The Classic service is intended for all the congestion control
>       behaviours that coexist with Reno [RFC5681] (e.g., Reno itself,
>       CUBIC [RFC8312], Compound [CTCP], and TFRC [RFC5348]).  The term
>       'Classic queue' means a queue providing the Classic service.
379,387c381,390
<    Reno-friendly:  The subset of Classic traffic that is friendly to the
<       standard Reno congestion control defined for TCP in [RFC5681].
<       The TFRC spec [RFC5348] indirectly implies that 'friendly' is
<       defined as "generally within a factor of two of the sending rate
<       of a TCP flow under the same conditions".  Reno-friendly is used
<       here in place of 'TCP-friendly', given the latter has become
<       imprecise, because the TCP protocol is now used with so many
<       different congestion control behaviours, and Reno is used in non-
<       TCP transports, such as QUIC [RFC9000].
---
>    Reno-friendly:
>       The subset of Classic traffic that is friendly to the standard
>       Reno congestion control defined for TCP in [RFC5681].  The TFRC
>       spec [RFC5348] indirectly implies that 'friendly' is defined as
>       "generally within a factor of two of the sending rate of a TCP
>       flow under the same conditions".  Reno-friendly is used here in
>       place of 'TCP-friendly', given the latter has become imprecise,
>       because the TCP protocol is now used with so many different
>       congestion control behaviours, and Reno is used in non-TCP
>       transports, such as QUIC [RFC9000].
402c405,406
<    Site:  A home, mobile device, small enterprise, or campus where the
---
>    Site:
>       A home, mobile device, small enterprise, or campus where the
571,572c575,577
<    SCTP:  A suitable ECN feedback mechanism for SCTP could add a chunk
<       to report the number of received CE marks (as described in a long-
---
>    SCTP:
>       A suitable ECN feedback mechanism for SCTP could add a chunk to
>       report the number of received CE marks (as described in a long-
577,587c582,593
<    RTP over UDP:  A prerequisite for Scalable congestion control is for
<       both (all) ends of one media-level hop to signal ECN support
<       [RFC6679] and use the new generic RTCP feedback format of
<       [RFC8888].  The presence of ECT(1) implies that both (all) ends of
<       that media-level hop support ECN.  However, the converse does not
<       apply.  So each end of a media-level hop can independently choose
<       not to use a Scalable congestion control, even if both ends
<       support ECN.
< 
<    QUIC:  Support for sufficiently fine-grained ECN feedback is provided
<       by IETF QUIC transport v1 [RFC9000].
---
>    RTP over UDP:
>       A prerequisite for Scalable congestion control is for both (all)
>       ends of one media-level hop to signal ECN support [RFC6679] and
>       use the new generic RTCP feedback format of [RFC8888].  The
>       presence of ECT(1) implies that both (all) ends of that media-
>       level hop support ECN.  However, the converse does not apply.  So
>       each end of a media-level hop can independently choose not to use
>       a Scalable congestion control, even if both ends support ECN.
> 
>    QUIC:
>       Support for sufficiently fine-grained ECN feedback is provided by
>       IETF QUIC transport v1 [RFC9000].
838,842c844,849
<    Severity:  Where long-running L4S and Classic flows coincide in a
<       shared queue, testing of one L4S congestion control (TCP Prague)
<       has found that the imbalance in average throughput between an L4S
<       and a Classic flow can reach 25:1 in favour of L4S in the worst
<       case [ecn-fallback].  However, when capacity is most scarce, the
---
>    Severity:
>       Where long-running L4S and Classic flows coincide in a shared
>       queue, testing of one L4S congestion control (TCP Prague) has
>       found that the imbalance in average throughput between an L4S and
>       a Classic flow can reach 25:1 in favour of L4S in the worst case
>       [ecn-fallback].  However, when capacity is most scarce, the
2251,2268c2258,2277
<    Monitoring:  Monitoring involves collection of the measurement data
<       to be analysed.  Monitoring is expressed as a "MUST" for
<       uncontrolled environments, although the placement of the
<       monitoring function is left open.  Whether monitoring has to be
<       applied in real time is expressed as a "SHOULD".  This allows for
<       the possibility that the operator of an L4S sender (e.g., a
<       Content Distribution Network (CDN)) might prefer to test out-of-
<       band for signs of Classic ECN AQMs, perhaps to avoid continually
<       consuming resources to monitor live traffic.
< 
<    Detection:  Detection involves analysis of the monitored data to
<       detect the likelihood of a Classic ECN AQM.  Detection can either
<       directly detect actual coexistence problems between flows or aim
<       to identify AQM technologies that are likely to present
<       coexistence problems, based on knowledge of AQMs deployed at the
<       time.  The requirements recommend that detection occurs live in
<       real time.  However, detection is allowed to be deferred (e.g., it
<       might involve further testing targeted at candidate AQMs).
---
>    Monitoring:
>       Monitoring involves collection of the measurement data to be
>       analysed.  Monitoring is expressed as a "MUST" for uncontrolled
>       environments, although the placement of the monitoring function is
>       left open.  Whether monitoring has to be applied in real time is
>       expressed as a "SHOULD".  This allows for the possibility that the
>       operator of an L4S sender (e.g., a Content Distribution Network
>       (CDN)) might prefer to test out-of-band for signs of Classic ECN
>       AQMs, perhaps to avoid continually consuming resources to monitor
>       live traffic.
> 
>    Detection:
>       Detection involves analysis of the monitored data to detect the
>       likelihood of a Classic ECN AQM.  Detection can either directly
>       detect actual coexistence problems between flows or aim to
>       identify AQM technologies that are likely to present coexistence
>       problems, based on knowledge of AQMs deployed at the time.  The
>       requirements recommend that detection occurs live in real time.
>       However, detection is allowed to be deferred (e.g., it might
>       involve further testing targeted at candidate AQMs).
2740,2750c2749,2760
<    Consumes the last ECN codepoint:  The L4S service could potentially
<       supersede the service provided by Classic ECN; therefore, using
<       ECT(1) to identify L4S packets could ultimately mean that the
<       ECT(0) codepoint was 'wasted' purely to distinguish one form of
<       ECN from its successor.
< 
<    ECN hard in some lower layers:  It is not always possible to support
<       the equivalent of an IP-ECN field in an AQM acting in a buffer
<       below the IP layer [ECN-ENCAP].  Then, depending on the lower-
<       layer scheme, the L4S service might have to drop rather than mark
<       frames even though they might encapsulate an ECN-capable packet.
---
>    Consumes the last ECN codepoint:
>       The L4S service could potentially supersede the service provided
>       by Classic ECN; therefore, using ECT(1) to identify L4S packets
>       could ultimately mean that the ECT(0) codepoint was 'wasted'
>       purely to distinguish one form of ECN from its successor.
> 
>    ECN hard in some lower layers:
>       It is not always possible to support the equivalent of an IP-ECN
>       field in an AQM acting in a buffer below the IP layer [ECN-ENCAP].
>       Then, depending on the lower-layer scheme, the L4S service might
>       have to drop rather than mark frames even though they might
>       encapsulate an ECN-capable packet.
2827,2838c2837,2848
<    Insufficient anti-replay window in some pre-existing VPNs:  If delay
<       is reduced for a subset of the flows within a VPN, the anti-replay
<       feature of some VPNs is known to potentially mistake the
<       difference in delay for a replay attack.  Section 6.2 recommends
<       that the anti-replay window at the VPN egress is sufficiently
<       sized, as required by the relevant specifications.  However, in
<       some VPN implementations, the maximum anti-replay window is
<       insufficient to cater for a large delay difference at prevailing
<       packet rates.  Section 6.2 suggests alternative work-rounds for
<       such cases, but end users using L4S over a VPN will need to be
<       able to recognize the symptoms of this problem, in order to seek
<       out these work-rounds.
---
>    Insufficient anti-replay window in some pre-existing VPNs:
>       If delay is reduced for a subset of the flows within a VPN, the
>       anti-replay feature of some VPNs is known to potentially mistake
>       the difference in delay for a replay attack.  Section 6.2
>       recommends that the anti-replay window at the VPN egress is
>       sufficiently sized, as required by the relevant specifications.
>       However, in some VPN implementations, the maximum anti-replay
>       window is insufficient to cater for a large delay difference at
>       prevailing packet rates.  Section 6.2 suggests alternative work-
>       rounds for such cases, but end users using L4S over a VPN will
>       need to be able to recognize the symptoms of this problem, in
>       order to seek out these work-rounds.
2896,2926c2906,2940
<    Should work end to end:  The IP-ECN field generally propagates end to
<       end across the Internet without being wiped or mangled, at least
<       over fixed networks.  Unlike the DSCP, the setting of the ECN
<       field is at least meant to be forwarded unchanged by networks that
<       do not support ECN.
< 
<    Should work in tunnels:  The L4S identifiers work across and within
<       any tunnel that propagates the IP-ECN field in any of the variant
<       ways it has been defined since ECN-tunneling was first specified
<       in the year 2001 [RFC3168].  However, it is likely that some
<       tunnels still do not implement ECN propagation at all.
< 
<    Should work for many link technologies:  At most, but not all, path
<       bottlenecks there is IP awareness, so that L4S AQMs can be located
<       where the IP-ECN field can be manipulated.  Bottlenecks at lower-
<       layer nodes without IP awareness have to either use drop to signal
<       congestion or have a specific congestion notification facility
<       defined for that link technology, including propagation to and
<       from IP-ECN.  The programme to define these is progressing, and in
<       each case so far, the scheme already defined for ECN inherently
<       supports L4S as well (see Section 6.1).
< 
<    Could migrate to one codepoint:  If all Classic ECN senders
<       eventually evolve to use the L4S service, the ECT(0) codepoint
<       could be reused for some future purpose but only once use of
<       ECT(0) packets has reduced to zero, or near zero, which might
<       never happen.
< 
<    L4 not required:  Being based on the IP-ECN field, this scheme does
<       not need the network to access transport-layer flow IDs.
<       Nonetheless, it does not preclude solutions that do.
---
>    Should work end to end:
>       The IP-ECN field generally propagates end to end across the
>       Internet without being wiped or mangled, at least over fixed
>       networks.  Unlike the DSCP, the setting of the ECN field is at
>       least meant to be forwarded unchanged by networks that do not
>       support ECN.
> 
>    Should work in tunnels:
>       The L4S identifiers work across and within any tunnel that
>       propagates the IP-ECN field in any of the variant ways it has been
>       defined since ECN-tunneling was first specified in the year 2001
>       [RFC3168].  However, it is likely that some tunnels still do not
>       implement ECN propagation at all.
> 
>    Should work for many link technologies:
>       At most, but not all, path bottlenecks there is IP awareness, so
>       that L4S AQMs can be located where the IP-ECN field can be
>       manipulated.  Bottlenecks at lower-layer nodes without IP
>       awareness have to either use drop to signal congestion or have a
>       specific congestion notification facility defined for that link
>       technology, including propagation to and from IP-ECN.  The
>       programme to define these is progressing, and in each case so far,
>       the scheme already defined for ECN inherently supports L4S as well
>       (see Section 6.1).
> 
>    Could migrate to one codepoint:
>       If all Classic ECN senders eventually evolve to use the L4S
>       service, the ECT(0) codepoint could be reused for some future
>       purpose but only once use of ECT(0) packets has reduced to zero,
>       or near zero, which might never happen.
> 
>    L4 not required:
>       Being based on the IP-ECN field, this scheme does not need the
>       network to access transport-layer flow IDs.  Nonetheless, it does
>       not preclude solutions that do.
