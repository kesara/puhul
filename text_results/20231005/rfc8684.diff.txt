198,214c198,216
<    External Constraints:  The protocol must function through the vast
<       majority of existing middleboxes such as NATs, firewalls, and
<       proxies, and as such must resemble existing TCP as far as possible
<       on the wire.  Furthermore, the protocol must not assume that the
<       segments it sends on the wire arrive unmodified at the
<       destination: they may be split or coalesced; TCP options may be
<       removed or duplicated.
< 
<    Application Constraints:  The protocol must be usable with no change
<       to existing applications that use the common TCP API (although it
<       is reasonable that not all features would be available to such
<       legacy applications).  Furthermore, the protocol must provide the
<       same service model as regular TCP to the application.
< 
<    Fallback:  The protocol should be able to fall back to standard TCP
<       with no interference from the user, to be able to communicate with
<       legacy hosts.
---
>    External Constraints:
>       The protocol must function through the vast majority of existing
>       middleboxes such as NATs, firewalls, and proxies, and as such must
>       resemble existing TCP as far as possible on the wire.
>       Furthermore, the protocol must not assume that the segments it
>       sends on the wire arrive unmodified at the destination: they may
>       be split or coalesced; TCP options may be removed or duplicated.
> 
>    Application Constraints:
>       The protocol must be usable with no change to existing
>       applications that use the common TCP API (although it is
>       reasonable that not all features would be available to such legacy
>       applications).  Furthermore, the protocol must provide the same
>       service model as regular TCP to the application.
> 
>    Fallback:
>       The protocol should be able to fall back to standard TCP with no
>       interference from the user, to be able to communicate with legacy
>       hosts.
252,268c254,277
<    Path:  A sequence of links between a sender and a receiver, defined
<       in this context by a 4-tuple of source and destination
<       address/port pairs.
< 
<    Subflow:  A flow of TCP segments operating over an individual path,
<       which forms part of a larger MPTCP connection.  A subflow is
<       started and terminated similarly to a regular TCP connection.
< 
<    (MPTCP) Connection:  A set of one or more subflows, over which an
<       application can communicate between two hosts.  There is a
<       one-to-one mapping between a connection and an application socket.
< 
<    Data-level:  The payload data is nominally transferred over a
<       connection, which in turn is transported over subflows.  Thus, the
<       term "data-level" is synonymous with "connection-level", in
<       contrast to "subflow-level", which refers to properties of an
<       individual subflow.
---
>    Path:
>       A sequence of links between a sender and a receiver, defined in
>       this context by a 4-tuple of source and destination address/port
>       pairs.
> 
>    Subflow:
>       A flow of TCP segments operating over an individual path, which
>       forms part of a larger MPTCP connection.  A subflow is started and
>       terminated similarly to a regular TCP connection.
> 
>    (MPTCP) Connection:
>       A set of one or more subflows, over which an application can
>       communicate between two hosts.  There is a one-to-one mapping
>       between a connection and an application socket.
> 
>    Data-level:
>       The payload data is nominally transferred over a connection, which
>       in turn is transported over subflows.  Thus, the term "data-level"
>       is synonymous with "connection-level", in contrast to "subflow-
>       level", which refers to properties of an individual subflow.
> 
>    Token:
>       A locally unique identifier given to a multipath connection by a
>       host.  May also be referred to as a "Connection ID".
270,273c279,280
<    Token:  A locally unique identifier given to a multipath connection
<       by a host.  May also be referred to as a "Connection ID".
< 
<    Host:  An end host operating an MPTCP implementation, and either
---
>    Host:
>       An end host operating an MPTCP implementation, and either
906c913,914
<    B:            The second bit, labeled "B", is an extensibility flag.
---
>    B:          
>                  The second bit, labeled "B", is an extensibility flag.
924c932,933
<    C:            The third bit, labeled "C", is set to 1 to indicate
---
>    C:          
>                  The third bit, labeled "C", is set to 1 to indicate
934c943,944
<    D through H:  The remaining bits, labeled "D" through "H", are used
---
>    D through H:
>                  The remaining bits, labeled "D" through "H", are used
2593,2600c2603,2611
<    Sequence number:  The (in-header) TCP sequence number is specific to
<       the subflow.  To allow the receiver to reorder application data,
<       an additional data-level sequence space is used.  In this
<       data-level sequence space, the initial SYN and the final DATA_FIN
<       occupy 1 octet of sequence space.  This is done to ensure that
<       these signals are acknowledged at the connection level.  There is
<       an explicit mapping of data sequence space to subflow sequence
<       space, which is signaled through TCP options in data packets.
---
>    Sequence number:
>       The (in-header) TCP sequence number is specific to the subflow.
>       To allow the receiver to reorder application data, an additional
>       data-level sequence space is used.  In this data-level sequence
>       space, the initial SYN and the final DATA_FIN occupy 1 octet of
>       sequence space.  This is done to ensure that these signals are
>       acknowledged at the connection level.  There is an explicit
>       mapping of data sequence space to subflow sequence space, which is
>       signaled through TCP options in data packets.
2602c2613,2614
<    ACK:  The ACK field in the TCP header acknowledges only the subflow
---
>    ACK:
>       The ACK field in the TCP header acknowledges only the subflow
2608,2635c2620,2651
<    Duplicate ACK:  A duplicate ACK that includes any MPTCP signaling
<       (with the exception of the DSS option) MUST NOT be treated as a
<       signal of congestion.  To limit the chances of non-MPTCP-aware
<       entities mistakenly interpreting duplicate ACKs as a signal of
<       congestion, MPTCP SHOULD NOT send more than two duplicate ACKs
<       containing (non-DSS) MPTCP signals in a row.
< 
<    Receive Window:  The receive window in the TCP header indicates the
<       amount of free buffer space for the whole data-level connection
<       (as opposed to the amount of space for this subflow) that is
<       available at the receiver.  The semantics are the same as for
<       regular TCP, but to maintain these semantics the receive window
<       must be interpreted at the sender as relative to the sequence
<       number given in the DATA_ACK rather than the subflow ACK in the
<       TCP header.  In this way, the original role of flow control is
<       preserved.  Note that some middleboxes may change the receive
<       window, and so a host SHOULD use the maximum value of those
<       recently seen on the constituent subflows for the connection-level
<       receive window and also needs to maintain a subflow-level window
<       for subflow-level processing.
< 
<    FIN:  The FIN flag in the TCP header applies only to the subflow it
<       is sent on -- not to the whole connection.  For connection-level
<       FIN semantics, the DATA_FIN option is used.
< 
<    RST:  The RST flag in the TCP header applies only to the subflow it
<       is sent on -- not to the whole connection.  The MP_FASTCLOSE
<       option provides the Fast Close functionality of a RST at the MPTCP
---
>    Duplicate ACK:
>       A duplicate ACK that includes any MPTCP signaling (with the
>       exception of the DSS option) MUST NOT be treated as a signal of
>       congestion.  To limit the chances of non-MPTCP-aware entities
>       mistakenly interpreting duplicate ACKs as a signal of congestion,
>       MPTCP SHOULD NOT send more than two duplicate ACKs containing
>       (non-DSS) MPTCP signals in a row.
> 
>    Receive Window:
>       The receive window in the TCP header indicates the amount of free
>       buffer space for the whole data-level connection (as opposed to
>       the amount of space for this subflow) that is available at the
>       receiver.  The semantics are the same as for regular TCP, but to
>       maintain these semantics the receive window must be interpreted at
>       the sender as relative to the sequence number given in the
>       DATA_ACK rather than the subflow ACK in the TCP header.  In this
>       way, the original role of flow control is preserved.  Note that
>       some middleboxes may change the receive window, and so a host
>       SHOULD use the maximum value of those recently seen on the
>       constituent subflows for the connection-level receive window and
>       also needs to maintain a subflow-level window for subflow-level
>       processing.
> 
>    FIN:
>       The FIN flag in the TCP header applies only to the subflow it is
>       sent on -- not to the whole connection.  For connection-level FIN
>       semantics, the DATA_FIN option is used.
> 
>    RST:
>       The RST flag in the TCP header applies only to the subflow it is
>       sent on -- not to the whole connection.  The MP_FASTCLOSE option
>       provides the Fast Close functionality of a RST at the MPTCP
2638,2642c2654,2659
<    Address List:  Address list management (i.e., knowledge of the local
<       and remote hosts' lists of available IP addresses) is handled on a
<       per-connection basis (as opposed to per subflow, per host, or per
<       pair of communicating hosts).  This permits the application of
<       per-connection local policy.  Adding an address to one connection
---
>    Address List:
>       Address list management (i.e., knowledge of the local and remote
>       hosts' lists of available IP addresses) is handled on a per-
>       connection basis (as opposed to per subflow, per host, or per pair
>       of communicating hosts).  This permits the application of per-
>       connection local policy.  Adding an address to one connection
2647,2652c2664,2670
<    5-tuple:  The 5-tuple (protocol, local address, local port, remote
<       address, remote port) presented by kernel APIs to the application
<       layer in a non-multipath-aware application is that of the first
<       subflow, even if the subflow has since been closed and removed
<       from the connection.  This decision, and other related API issues,
<       are discussed in more detail in [RFC6897].
---
>    5-tuple:
>       The 5-tuple (protocol, local address, local port, remote address,
>       remote port) presented by kernel APIs to the application layer in
>       a non-multipath-aware application is that of the first subflow,
>       even if the subflow has since been closed and removed from the
>       connection.  This decision, and other related API issues, are
>       discussed in more detail in [RFC6897].
2964c2982
<            +------+--------+-----------------------+-----------+
---
>            +======+========+=======================+===========+
2986c3004
<      +-------+-----------------+----------------------+-------------+
---
>      +=======+=================+======================+=============+
3046c3064
<        +----------+---------------------------------+-------------+
---
>        +==========+=================================+=============+
3086c3104
<       +------+-----------------------------+-----------------------+
---
>       +======+=============================+=======================+
3543,3545c3561,3564
<    Local.Token (32 bits):  This is the token chosen by the local host on
<       this MPTCP connection.  The token must be unique among all
<       established MPTCP connections and is generated from the local key.
---
>    Local.Token (32 bits):
>       This is the token chosen by the local host on this MPTCP
>       connection.  The token must be unique among all established MPTCP
>       connections and is generated from the local key.
3550,3551c3569,3571
<    Remote.Token (32 bits):  This is the token chosen by the remote host
<       on this MPTCP connection, generated from the remote key.
---
>    Remote.Token (32 bits):
>       This is the token chosen by the remote host on this MPTCP
>       connection, generated from the remote key.
3553,3554c3573,3575
<    Remote.Key (64 bits):  This is the key chosen by the remote host on
<       this MPTCP connection.
---
>    Remote.Key (64 bits):
>       This is the key chosen by the remote host on this MPTCP
>       connection.
3556,3560c3577,3581
<    MPTCP.Checksum (flag):  This flag is set to true if at least one of
<       the hosts has set the "A" bit in the MP_CAPABLE options exchanged
<       during connection establishment; otherwise, it is set to false.
<       If this flag is set, the checksum must be computed in all DSS
<       options.
---
>    MPTCP.Checksum (flag):
>       This flag is set to true if at least one of the hosts has set the
>       "A" bit in the MP_CAPABLE options exchanged during connection
>       establishment; otherwise, it is set to false.  If this flag is
>       set, the checksum must be computed in all DSS options.
3564,3577c3585,3601
<    SND.UNA (64 bits):  This is the data sequence number of the next byte
<       to be acknowledged, at the MPTCP connection level.  This variable
<       is updated upon reception of a DSS option containing a DATA_ACK.
< 
<    SND.NXT (64 bits):  This is the data sequence number of the next byte
<       to be sent.  SND.NXT is used to determine the value of the DSN in
<       the DSS option.
< 
<    SND.WND (32 bits):  This is the send window.  32 bits if the features
<       in RFC 7323 are used; 16 bits otherwise.  MPTCP maintains the send
<       window at the MPTCP connection level, and the same window is
<       shared by all subflows.  All subflows use the MPTCP connection-
<       level SND.WND to compute the SEQ.WND value that is sent in each
<       transmitted segment.
---
>    SND.UNA (64 bits):
>       This is the data sequence number of the next byte to be
>       acknowledged, at the MPTCP connection level.  This variable is
>       updated upon reception of a DSS option containing a DATA_ACK.
> 
>    SND.NXT (64 bits):
>       This is the data sequence number of the next byte to be sent.
>       SND.NXT is used to determine the value of the DSN in the DSS
>       option.
> 
>    SND.WND (32 bits):
>       This is the send window.  32 bits if the features in RFC 7323 are
>       used; 16 bits otherwise.  MPTCP maintains the send window at the
>       MPTCP connection level, and the same window is shared by all
>       subflows.  All subflows use the MPTCP connection-level SND.WND to
>       compute the SEQ.WND value that is sent in each transmitted
>       segment.
3581,3584c3605,3609
<    RCV.NXT (64 bits):  This is the data sequence number of the next byte
<       that is expected on the MPTCP connection.  This state variable is
<       modified upon reception of in-order data.  The value of RCV.NXT is
<       used to specify the DATA_ACK that is sent in the DSS option on all
---
>    RCV.NXT (64 bits):
>       This is the data sequence number of the next byte that is expected
>       on the MPTCP connection.  This state variable is modified upon
>       reception of in-order data.  The value of RCV.NXT is used to
>       specify the DATA_ACK that is sent in the DSS option on all
3587,3589c3612,3615
<    RCV.WND (32 bits):  This is the connection-level receive window,
<       which is the maximum of the RCV.WND on all the subflows.  32 bits
<       if the features in RFC 7323 are used; 16 bits otherwise.
---
>    RCV.WND (32 bits):
>       This is the connection-level receive window, which is the maximum
>       of the RCV.WND on all the subflows.  32 bits if the features in
>       RFC 7323 are used; 16 bits otherwise.
3605,3611c3631,3639
<    SND.UNA (32 bits):  This is the sequence number of the next byte to
<       be acknowledged on the subflow.  This variable is updated upon
<       reception of each TCP acknowledgment on the subflow.
< 
<    SND.NXT (32 bits):  This is the sequence number of the next byte to
<       be sent on the subflow.  SND.NXT is used to set the value of
<       SEG.SEQ upon transmission of the next segment.
---
>    SND.UNA (32 bits):
>       This is the sequence number of the next byte to be acknowledged on
>       the subflow.  This variable is updated upon reception of each TCP
>       acknowledgment on the subflow.
> 
>    SND.NXT (32 bits):
>       This is the sequence number of the next byte to be sent on the
>       subflow.  SND.NXT is used to set the value of SEG.SEQ upon
>       transmission of the next segment.
3615,3623c3643,3652
<    RCV.NXT (32 bits):  This is the sequence number of the next byte that
<       is expected on the subflow.  This state variable is modified upon
<       reception of in-order segments.  The value of RCV.NXT is copied to
<       the SEG.ACK field of the next segments transmitted on the subflow.
< 
<    RCV.WND (32 bits):  This is the subflow-level receive window that is
<       updated with the window field from the segments received on this
<       subflow.  32 bits if the features in RFC 7323 are used; 16 bits
<       otherwise.
---
>    RCV.NXT (32 bits):
>       This is the sequence number of the next byte that is expected on
>       the subflow.  This state variable is modified upon reception of
>       in-order segments.  The value of RCV.NXT is copied to the SEG.ACK
>       field of the next segments transmitted on the subflow.
> 
>    RCV.WND (32 bits):
>       This is the subflow-level receive window that is updated with the
>       window field from the segments received on this subflow.  32 bits
>       if the features in RFC 7323 are used; 16 bits otherwise.
3758d3786
< 
3767d3794
< 
3777d3803
< 
3786d3811
< 
3794d3818
< 
