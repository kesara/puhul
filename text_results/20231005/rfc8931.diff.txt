232,233c232,233
<    RFRAG Acknowledgment Request:  An RFRAG with the Acknowledgment
<       Request flag ("X" flag) set.
---
>    RFRAG Acknowledgment Request:
>       An RFRAG with the Acknowledgment Request flag ("X" flag) set.
246,247c246,247
<    Reverse direction:  The reverse direction of a path, which is taken
<       by the RFRAG-ACK.
---
>    Reverse direction:
>       The reverse direction of a path, which is taken by the RFRAG-ACK.
442c442,443
<    X:  1 bit; Ack-Request.  When set, the fragmenting endpoint requires
---
>    X:
>       1 bit; Ack-Request.  When set, the fragmenting endpoint requires
445c446,447
<    E:  1 bit; Explicit Congestion Notification.  The "E" flag is cleared
---
>    E:
>       1 bit; Explicit Congestion Notification.  The "E" flag is cleared
449,461c451,466
<    Fragment_Size:  10-bit unsigned integer.  The size of this fragment
<       in a unit that depends on link-layer technology.  Unless
<       overridden by a more specific specification, that unit is the
<       byte, which allows fragments up to 1023 bytes.
< 
<    Datagram_Tag:  8 bits.  An identifier of the datagram that is locally
<       unique to the link-layer sender.
< 
<    Sequence:  5-bit unsigned integer.  The sequence number of the
<       fragment in the acknowledgment bitmap.  Fragments are numbered as
<       [0..N], where N is in [0..31].  A Sequence of 0 indicates the
<       first fragment in a datagram, but non-zero values are not
<       indicative of the position in the reassembly buffer.
---
>    Fragment_Size:
>       10-bit unsigned integer.  The size of this fragment in a unit that
>       depends on link-layer technology.  Unless overridden by a more
>       specific specification, that unit is the byte, which allows
>       fragments up to 1023 bytes.
> 
>    Datagram_Tag:
>       8 bits.  An identifier of the datagram that is locally unique to
>       the link-layer sender.
> 
>    Sequence:
>       5-bit unsigned integer.  The sequence number of the fragment in
>       the acknowledgment bitmap.  Fragments are numbered as [0..N],
>       where N is in [0..31].  A Sequence of 0 indicates the first
>       fragment in a datagram, but non-zero values are not indicative of
>       the position in the reassembly buffer.
565a571
>  
572,580c578,587
<    Datagram_Tag:  8 bits; an identifier of the datagram that is locally
<       unique to the link-layer recipient.
< 
<    RFRAG Acknowledgment Bitmap:  An RFRAG Acknowledgment Bitmap, whereby
<       setting the bit at offset x indicates that fragment x was
<       received, as shown in Figure 2.  A NULL bitmap indicates that the
<       fragmentation process is aborted.  A FULL bitmap indicates that
<       the fragmentation process is complete; all fragments were received
<       at the reassembly endpoint.
---
>    Datagram_Tag:
>       8 bits; an identifier of the datagram that is locally unique to
>       the link-layer recipient.
> 
>    RFRAG Acknowledgment Bitmap:
>       An RFRAG Acknowledgment Bitmap, whereby setting the bit at offset
>       x indicates that fragment x was received, as shown in Figure 2.  A
>       NULL bitmap indicates that the fragmentation process is aborted.
>       A FULL bitmap indicates that the fragmentation process is
>       complete; all fragments were received at the reassembly endpoint.
911,917c918,925
<    inter-frame gap:  The inter-frame gap indicates the minimum amount of
<       time between transmissions.  The inter-frame gap controls the rate
<       at which fragments are sent, the ratio of air time, and the amount
<       of memory in intermediate nodes that a particular datagram will
<       use.  It can be used as a flow control, a congestion control, and/
<       or a collision control measure.  It MUST be set at a minimum to a
<       value that protects the propagation of one transmission against
---
>    inter-frame gap:
>       The inter-frame gap indicates the minimum amount of time between
>       transmissions.  The inter-frame gap controls the rate at which
>       fragments are sent, the ratio of air time, and the amount of
>       memory in intermediate nodes that a particular datagram will use.
>       It can be used as a flow control, a congestion control, and/or a
>       collision control measure.  It MUST be set at a minimum to a value
>       that protects the propagation of one transmission against
924,945c932,956
<    MinFragmentSize:  The MinFragmentSize is the minimum value for the
<       Fragment_Size.  It MUST be lower than the minimum value of
<       smallest 1-hop MTU that can be encountered along the path.
< 
<    OptFragmentSize:  The OptFragmentSize is the value for the
<       Fragment_Size that the fragmenting endpoint should use to start
<       with.  It is greater than or equal to MinFragmentSize.  It is less
<       than or equal to MaxFragmentSize.  For the first fragment, it must
<       account for the expansion of the IPv6 addresses and of the Hop
<       Limit field within MTU.  For all fragments, it is a balance
<       between the expected fluidity and the overhead of link-layer and
<       6LoWPAN headers.  For a small MTU, the idea is to keep it close to
<       the maximum, whereas for larger MTUs, it might make sense to keep
<       it short enough so that the duty cycle of the transmitter is
<       bounded, e.g., to transmit at least 10 frames per second.
< 
<    MaxFragmentSize:  The MaxFragmentSize is the maximum value for the
<       Fragment_Size.  It MUST be lower than the maximum value of the
<       smallest 1-hop MTU that can be encountered along the path.  A
<       large value augments the chances of buffer bloat and transmission
<       loss.  The value MUST be less than 512 if the unit that is defined
<       for the PHY layer is the byte.
---
>    MinFragmentSize:
>       The MinFragmentSize is the minimum value for the Fragment_Size.
>       It MUST be lower than the minimum value of smallest 1-hop MTU that
>       can be encountered along the path.
> 
>    OptFragmentSize:
>       The OptFragmentSize is the value for the Fragment_Size that the
>       fragmenting endpoint should use to start with.  It is greater than
>       or equal to MinFragmentSize.  It is less than or equal to
>       MaxFragmentSize.  For the first fragment, it must account for the
>       expansion of the IPv6 addresses and of the Hop Limit field within
>       MTU.  For all fragments, it is a balance between the expected
>       fluidity and the overhead of link-layer and 6LoWPAN headers.  For
>       a small MTU, the idea is to keep it close to the maximum, whereas
>       for larger MTUs, it might make sense to keep it short enough so
>       that the duty cycle of the transmitter is bounded, e.g., to
>       transmit at least 10 frames per second.
> 
>    MaxFragmentSize:
>       The MaxFragmentSize is the maximum value for the Fragment_Size.
>       It MUST be lower than the maximum value of the smallest 1-hop MTU
>       that can be encountered along the path.  A large value augments
>       the chances of buffer bloat and transmission loss.  The value MUST
>       be less than 512 if the unit that is defined for the PHY layer is
>       the byte.
969,971c980,983
<    MinARQTimeOut:  The minimum amount of time a node should wait for an
<       RFRAG Acknowledgment before it takes the next action.  It MUST be
<       more than the maximum expected round-trip time in the respective
---
>    MinARQTimeOut:
>       The minimum amount of time a node should wait for an RFRAG
>       Acknowledgment before it takes the next action.  It MUST be more
>       than the maximum expected round-trip time in the respective
974,985c986,999
<    OptARQTimeOut:  The initial value of the RTO, which is the amount of
<       time that a fragmenting endpoint should wait for an RFRAG
<       Acknowledgment before it takes the next action.  It is greater
<       than or equal to MinARQTimeOut.  It is less than or equal to
<       MaxARQTimeOut.  See Appendix C for recommendations on computing
<       the round-trip time.  By default, a value of 3 times the maximum
<       expected round-trip time in the respective network is RECOMMENDED.
< 
<    MaxARQTimeOut:  The maximum amount of time a node should wait for the
<       RFRAG Acknowledgment before it takes the next action.  It must
<       cover the longest expected round-trip time and be several times
<       less than the timeout that covers the recomposition buffer at the
---
>    OptARQTimeOut:
>       The initial value of the RTO, which is the amount of time that a
>       fragmenting endpoint should wait for an RFRAG Acknowledgment
>       before it takes the next action.  It is greater than or equal to
>       MinARQTimeOut.  It is less than or equal to MaxARQTimeOut.  See
>       Appendix C for recommendations on computing the round-trip time.
>       By default, a value of 3 times the maximum expected round-trip
>       time in the respective network is RECOMMENDED.
> 
>    MaxARQTimeOut:
>       The maximum amount of time a node should wait for the RFRAG
>       Acknowledgment before it takes the next action.  It must cover the
>       longest expected round-trip time and be several times less than
>       the timeout that covers the recomposition buffer at the
991,992c1005,1013
<    MaxFragRetries:  The maximum number of retries for a particular
<       fragment.  A default value of 3 is RECOMMENDED.  An upper bound
---
>    MaxFragRetries:
>       The maximum number of retries for a particular fragment.  A
>       default value of 3 is RECOMMENDED.  An upper bound can be
>       estimated to ensure that the datagram is either fully transmitted
>       or dropped before an upper layer decides to retry it.
> 
>    MaxDatagramRetries:
>       The maximum number of retries from scratch for a particular
>       datagram.  A default value of 1 is RECOMMENDED.  An upper bound
996,1001d1016
<    MaxDatagramRetries:  The maximum number of retries from scratch for a
<       particular datagram.  A default value of 1 is RECOMMENDED.  An
<       upper bound can be estimated to ensure that the datagram is either
<       fully transmitted or dropped before an upper layer decides to
<       retry it.
< 
1006,1007c1021,1023
<    UseECN:  Indicates whether the fragmenting endpoint should react to
<       ECN.  The fragmenting endpoint may react to ECN by varying the
---
>    UseECN:
>       Indicates whether the fragmenting endpoint should react to ECN.
>       The fragmenting endpoint may react to ECN by varying the
1276,1286c1292,1304
<       Firmware update:  For example, a new version of the LLN node
<          software is downloaded from a system manager over unicast or
<          multicast services.  Such a reflashing operation typically
<          involves updating a large number of similar LLN nodes over a
<          relatively short period of time.
< 
<       Packages of commands:  A number of commands or a full
<          configuration can be packaged as a single message to ensure
<          consistency and enable atomic execution or complete rollback.
<          Until such commands are fully received and interpreted, the
<          intended operation will not take effect.
---
>       Firmware update:
>          For example, a new version of the LLN node software is
>          downloaded from a system manager over unicast or multicast
>          services.  Such a reflashing operation typically involves
>          updating a large number of similar LLN nodes over a relatively
>          short period of time.
> 
>       Packages of commands:
>          A number of commands or a full configuration can be packaged as
>          a single message to ensure consistency and enable atomic
>          execution or complete rollback.  Until such commands are fully
>          received and interpreted, the intended operation will not take
>          effect.
1290,1296c1308,1316
<       Waveform captures:  A number of consecutive samples are measured
<          at a high rate for a short time and then are transferred from a
<          sensor to a gateway or an edge server as a single large report.
< 
<       Data logs:  LLN nodes may generate large logs of sampled data for
<          later extraction.  LLN nodes may also generate system logs to
<          assist in diagnosing problems on the node or network.
---
>       Waveform captures:
>          A number of consecutive samples are measured at a high rate for
>          a short time and then are transferred from a sensor to a
>          gateway or an edge server as a single large report.
> 
>       Data logs:
>          LLN nodes may generate large logs of sampled data for later
>          extraction.  LLN nodes may also generate system logs to assist
>          in diagnosing problems on the node or network.
1298,1299c1318,1319
<       Large data packets:  Rich data types might require more than one
<          fragment.
---
>       Large data packets:
>          Rich data types might require more than one fragment.
1347,1348c1367,1374
<    Number of fragments:  The recovery mechanism must support highly
<       fragmented packets, with a maximum of 32 fragments per packet.
---
>    Number of fragments:
>       The recovery mechanism must support highly fragmented packets,
>       with a maximum of 32 fragments per packet.
> 
>    Minimum acknowledgment overhead:
>       Because the radio is half duplex, and because of silent time spent
>       in the various medium access mechanisms, an acknowledgment
>       consumes roughly as many resources as a data fragment.
1350,1353d1375
<    Minimum acknowledgment overhead:  Because the radio is half duplex,
<       and because of silent time spent in the various medium access
<       mechanisms, an acknowledgment consumes roughly as many resources
<       as a data fragment.
1360,1366c1382,1390
<    Controlled latency:  The recovery mechanism must succeed or give up
<       within the time boundary imposed by the recovery process of the
<       upper-layer protocols.
< 
<    Optional congestion control:  The aggregation of multiple concurrent
<       flows may lead to the saturation of the radio network and
<       congestion collapse.
---
>    Controlled latency:
>       The recovery mechanism must succeed or give up within the time
>       boundary imposed by the recovery process of the upper-layer
>       protocols.
> 
>    Optional congestion control:
>       The aggregation of multiple concurrent flows may lead to the
>       saturation of the radio network and congestion collapse.
> 
1519d1542
< 
