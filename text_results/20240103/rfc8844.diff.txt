64,65c64,65
<      3.2.  The "external_id_hash" TLS Extension
<        3.2.1.  Calculating "external_id_hash" for WebRTC Identity
---
>      3.2.  The external_id_hash TLS Extension
>        3.2.1.  Calculating external_id_hash for WebRTC Identity
166c166
<    A similar attack can be mounted based solely on the SDP "fingerprint"
---
>    A similar attack can be mounted based solely on the SDP fingerprint
243c243
<    of the "fingerprint" attribute without additional bindings or WebRTC
---
>    of the fingerprint attribute without additional bindings or WebRTC
248c248
<    identities or the value of SDP "tls-id" attributes.
---
>    identities or the value of SDP tls-id attributes.
254c254
<    to avoid modifications to "fingerprint", "tls-id", and "identity"
---
>    to avoid modifications to fingerprint, tls-id, and identity
304,305c304,305
<    endpoints MUST use the "external_session_id" extension (see
<    Section 4.3) in addition to the "external_id_hash" (Section 3.2) so
---
>    endpoints MUST use the external_session_id extension (see
>    Section 4.3) in addition to the external_id_hash (Section 3.2) so
354c354
< 3.2.  The "external_id_hash" TLS Extension
---
> 3.2.  The external_id_hash TLS Extension
356c356
<    The "external_id_hash" TLS extension carries a hash of the identity
---
>    The external_id_hash TLS extension carries a hash of the identity
360,362c360,362
<    The "extension_data" for the "external_id_hash" extension contains a
<    "ExternalIdentityHash" struct, described below using the syntax
<    defined in Section 3 of [TLS13]:
---
>    The extension_data for the external_id_hash extension contains a
>    ExternalIdentityHash struct, described below using the syntax defined
>    in Section 3 of [TLS13]:
378c378
<    "external_id_hash" extension in its ClientHello or -- if a client
---
>    external_id_hash extension in its ClientHello or -- if a client
380c380
<    empty extension has a zero-length "binding_hash" field.
---
>    empty extension has a zero-length binding_hash field.
382c382
<    A peer that receives an "external_id_hash" extension that does not
---
>    A peer that receives an external_id_hash extension that does not
384c384
<    immediately fail the TLS handshake with an "illegal_parameter" alert.
---
>    immediately fail the TLS handshake with an illegal_parameter alert.
392c392
<    "external_id_hash" extension MAY accept a TLS connection rather than
---
>    external_id_hash extension MAY accept a TLS connection rather than
395c395
<    The endpoint performs the validation of the "external_id_hash"
---
>    The endpoint performs the validation of the external_id_hash
401,403c401,403
<    An "external_id_hash" extension with a "binding_hash" field that is
<    any length other than 0 or 32 is invalid and MUST cause the receiving
<    endpoint to generate a fatal "decode_error" alert.
---
>    An external_id_hash extension with a binding_hash field that is any
>    length other than 0 or 32 is invalid and MUST cause the receiving
>    endpoint to generate a fatal decode_error alert.
405c405
<    In TLS 1.3, an "external_id_hash" extension sent by a server MUST be
---
>    In TLS 1.3, an external_id_hash extension sent by a server MUST be
408c408
< 3.2.1.  Calculating "external_id_hash" for WebRTC Identity
---
> 3.2.1.  Calculating external_id_hash for WebRTC Identity
413,416c413,416
<    [JSON].  The content of the "external_id_hash" extension is produced
<    by hashing the resulting octets with SHA-256 [SHA].  This produces
<    the 32 octets of the "binding_hash" parameter, which is the sole
<    contents of the extension.
---
>    [JSON].  The content of the external_id_hash extension is produced by
>    hashing the resulting octets with SHA-256 [SHA].  This produces the
>    32 octets of the binding_hash parameter, which is the sole contents
>    of the extension.
418,419c418,419
<    The SDP "identity" attribute includes the base64 [BASE64] encoding of
<    the UTF-8 encoding of the same JSON text.  The "external_id_hash"
---
>    The SDP identity attribute includes the base64 [BASE64] encoding of
>    the UTF-8 encoding of the same JSON text.  The external_id_hash
421c421
<    the SDP "identity" attribute, hashing the resulting octets using
---
>    the SDP identity attribute, hashing the resulting octets using
423,424c423,424
<    In pseudocode form, using the "identity-assertion-value" field from
<    the SDP "identity" attribute grammar as defined in [WEBRTC-SEC]:
---
>    In pseudocode form, using the identity-assertion-value field from the
>    SDP identity attribute grammar as defined in [WEBRTC-SEC]:
428c428
<    Note:  The base64 of the SDP "identity" attribute is decoded to avoid
---
>    Note:  The base64 of the SDP identity attribute is decoded to avoid
439c439
<    SHA-256.  This produces the 32-octet "binding_hash" value used for
---
>    SHA-256.  This produces the 32-octet binding_hash value used for
441c441
<    "signed-identity-digest" parameter from the "Identity" header field
---
>    signed-identity-digest parameter from the Identity header field
563c563
<    the same certificate -- and therefore the SDP "fingerprint" attribute
---
>    the same certificate -- and therefore the SDP fingerprint attribute
586c586
<    using the SDP "tls-id" attribute [DTLS-SDP].  This field is already
---
>    using the SDP tls-id attribute [DTLS-SDP].  This field is already
590c590
<    A new "external_session_id" extension is added to the TLS or DTLS
---
>    A new external_session_id extension is added to the TLS or DTLS
592c592
<    call or real-time session.  This carries the value of the "tls-id"
---
>    call or real-time session.  This carries the value of the tls-id
598c598
<    The "external_session_id" TLS extension carries the unique identifier
---
>    The external_session_id TLS extension carries the unique identifier
600c600
<    the "tls-id" attribute from the SDP that the endpoint generated when
---
>    the tls-id attribute from the SDP that the endpoint generated when
605,607c605,607
<    The "extension_data" for the "external_session_id" extension contains
<    an ExternalSessionId struct, described below using the syntax defined
<    in [TLS13]:
---
>    The extension_data for the external_session_id extension contains an
>    ExternalSessionId struct, described below using the syntax defined in
>    [TLS13]:
613,616c613,616
<    For SDP, the "session_id" field of the extension includes the value
<    of the "tls-id" SDP attribute as defined in [DTLS-SDP] (that is, the
<    "tls-id-value" ABNF production).  The value of the "tls-id" attribute
<    is encoded using ASCII [ASCII].
---
>    For SDP, the session_id field of the extension includes the value of
>    the tls-id SDP attribute as defined in [DTLS-SDP] (that is, the tls-
>    id-value ABNF production).  The value of the tls-id attribute is
>    encoded using ASCII [ASCII].
624c624
<    The "external_session_id" extension is included in a ClientHello, and
---
>    The external_session_id extension is included in a ClientHello, and
629,630c629,630
<    Endpoints MUST check that the "session_id" parameter in the extension
<    that they receive includes the "tls-id" attribute value that they
---
>    Endpoints MUST check that the session_id parameter in the extension
>    that they receive includes the tls-id attribute value that they
635c635
<    endpoint that receives an "external_session_id" extension that is not
---
>    endpoint that receives an external_session_id extension that is not
637c637
<    a fatal "illegal_parameter" alert.
---
>    a fatal illegal_parameter alert.
639c639
<    The endpoint performs the validation of the "external_id_hash"
---
>    The endpoint performs the validation of the external_id_hash
649,650c649,650
<    In TLS 1.3, an "external_session_id" extension sent by a server MUST
<    be sent in the EncryptedExtensions message.
---
>    In TLS 1.3, an external_session_id extension sent by a server MUST be
>    sent in the EncryptedExtensions message.
652,655c652,654
<    This defense is not effective if an attacker can rewrite "tls-id"
<    values in signaling.  Only the mechanism in "external_id_hash" is
<    able to defend against an attacker that can compromise session
<    integrity.
---
>    This defense is not effective if an attacker can rewrite tls-id
>    values in signaling.  Only the mechanism in external_id_hash is able
>    to defend against an attacker that can compromise session integrity.
679c678
<    Use of the "external_session_id" does not guarantee that the identity
---
>    Use of the external_session_id does not guarantee that the identity
728c727
<    *  The "external_id_hash" extension defined in Section 3.2 has been
---
>    *  The external_id_hash extension defined in Section 3.2 has been
732,734c731,733
<    *  The "external_session_id" extension defined in Section 4.3 has
<       been assigned a code point of 56; it is recommended and is marked
<       as "CH, EE" in TLS 1.3.
---
>    *  The external_session_id extension defined in Section 4.3 has been
>       assigned a code point of 56; it is recommended and is marked as
>       "CH, EE" in TLS 1.3.
887d885
< 
893d890
< 
