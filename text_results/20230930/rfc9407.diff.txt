168,172c168,174
<    Source Symbol:  A symbol that is transmitted between the ingress and
<       egress of the network.
< 
<    Coded Symbol:  A linear combination over a finite field of a set of
<       source symbols.
---
>    Source Symbol:
>       A symbol that is transmitted between the ingress and egress of the
>       network.
> 
>    Coded Symbol:
>       A linear combination over a finite field of a set of source
>       symbols.
178,179c180,182
<    Encoding Coefficients:  Elements of the finite field characterizing
<       the linear combination used to generate coded symbols.
---
>    Encoding Coefficients:
>       Elements of the finite field characterizing the linear combination
>       used to generate coded symbols.
187,188c190,192
<    Coded Packet:  A coded packet contains a coded symbol, the coded
<       symbol's ID, and encoding vector.
---
>    Coded Packet:
>       A coded packet contains a coded symbol, the coded symbol's ID, and
>       encoding vector.
192,212c196,219
<    Output Symbol:  A symbol generated by the Tetrys encoder.  For a non-
<       systematic mode, all output symbols are coded symbols.  For a
<       systematic mode, output symbols MAY be the input symbols and a
<       number of coded symbols that are linear combinations of the input
<       symbols plus the encoding vectors.
< 
<    Feedback Packet:  A feedback packet is a packet containing
<       information about the decoded or received source symbols.  It MAY
<       also contain additional information about the Packet Error Rate or
<       the number of various packets in the receiver decoding window.
< 
<    Elastic Encoding Window:  An encoder-side buffer that stores all the
<       unacknowledged source packets of the input flow involved in the
<       coding process.
< 
<    Coding Coefficient Generator Identifier (CCGI):  A unique identifier
<       that defines a function or an algorithm allowing the generation of
<       the encoding vector.
< 
<    Code Rate:  Defines the rate between the number of input symbols and
<       the number of output symbols.
---
>    Output Symbol:
>       A symbol generated by the Tetrys encoder.  For a non-systematic
>       mode, all output symbols are coded symbols.  For a systematic
>       mode, output symbols MAY be the input symbols and a number of
>       coded symbols that are linear combinations of the input symbols
>       plus the encoding vectors.
> 
>    Feedback Packet:
>       A feedback packet is a packet containing information about the
>       decoded or received source symbols.  It MAY also contain
>       additional information about the Packet Error Rate or the number
>       of various packets in the receiver decoding window.
> 
>    Elastic Encoding Window:
>       An encoder-side buffer that stores all the unacknowledged source
>       packets of the input flow involved in the coding process.
> 
>    Coding Coefficient Generator Identifier (CCGI):
>       A unique identifier that defines a function or an algorithm
>       allowing the generation of the encoding vector.
> 
>    Code Rate:
>       Defines the rate between the number of input symbols and the
>       number of output symbols.
274,282c281,290
<    The Tetrys Building Block:  This building block embeds both the
<       Tetrys decoder and Tetrys encoder; thus, it is used during
<       encoding and decoding processes.  It must be noted that Tetrys
<       does not mandate a specific building block.  Instead, any building
<       block compatible with the elastic encoding window feature of
<       Tetrys may be used.
< 
<    The Window Management Building Block:  This building block is in
<       charge of managing the encoding window at a Tetrys sender.
---
>    The Tetrys Building Block:
>       This building block embeds both the Tetrys decoder and Tetrys
>       encoder; thus, it is used during encoding and decoding processes.
>       It must be noted that Tetrys does not mandate a specific building
>       block.  Instead, any building block compatible with the elastic
>       encoding window feature of Tetrys may be used.
> 
>    The Window Management Building Block:
>       This building block is in charge of managing the encoding window
>       at a Tetrys sender.
363,414c371,427
<    Tetrys version number (V):  4 bits.  Indicates the Tetrys version
<       number.  The Tetrys version number for this specification is 1.
< 
<    Congestion control flag (C):  2 bits.  C set to 0b00 indicates the
<       Congestion Control Information (CCI) field is 0 bits in length.  C
<       set to 0b01 indicates the CCI field is 32 bits in length.  C set
<       to 0b10 indicates the CCI field is 64 bits in length.  C set to
<       0b11 indicates the CCI field is 96 bits in length.
< 
<    Transport Session Identifier flag (S):  1 bit.  This is the number of
<       full 32-bit words in the TSI field.  The TSI field is 32*S bits in
<       length; i.e., the length is either 0 bits or 32 bits.
< 
<    Reserved (Resv):  9 bits.  These bits are reserved.  In this version
<       of the specification, they MUST be set to zero by senders and MUST
<       be ignored by receivers.
< 
<    Header length (HDR_LEN):  8 bits.  The total length of the Tetrys
<       header in units of 32-bit words.  The length of the Tetrys header
<       MUST be a multiple of 32 bits.  This field may be used to directly
<       access the portion of the packet beyond the Tetrys header, i.e.,
<       to the first next header if it exists, to the packet payload if it
<       exists and there is no other header, or to the end of the packet
<       if there are no other headers or packet payload.
< 
<    Tetrys packet type (PKT_TYPE):  8 bits.  There are three types of
<       packets: the PKT_TYPE_SOURCE (0b00) defined in Section 5.2, the
<       PKT_TYPE_CODED (0b01) defined in Section 5.3 and the
<       PKT_TYPE_WND_UPT (0b11) for window update packets defined in
<       Section 5.4.
< 
<    Congestion Control Information (CCI):  0, 32, 64, or 96 bits.  Used
<       to carry congestion control information.  For example, the
<       congestion control information could include layer numbers,
<       logical channel numbers, and sequence numbers.  This field is
<       opaque for this specification.  This field MUST be 0 bits (absent)
<       if C is set to 0b00.  This field MUST be 32 bits if C is set to
<       0b01.  This field MUST be 64 bits if C is set to 0b10.  This field
<       MUST be 96 bits if C is set to 0b11.
< 
<    Transport Session Identifier (TSI):  0 or 32 bits.  The TSI uniquely
<       identifies a session among all sessions from a particular Tetrys
<       encoder.  The TSI is scoped by the IP address of the sender; thus,
<       the IP address of the sender and the TSI together uniquely
<       identify the session.  Although a TSI always uniquely identifies a
<       session conjointly with the IP address of the sender, whether the
<       TSI is included in the Tetrys header depends on what is used as
<       the TSI value.  If the underlying transport is UDP, then the
<       16-bit UDP source port number MAY serve as the TSI for the
<       session.  If there is no underlying TSI provided by the network,
<       transport, or any other layer, then the TSI MUST be included in
<       the Tetrys header.
---
>    Tetrys version number (V):
>       4 bits.  Indicates the Tetrys version number.  The Tetrys version
>       number for this specification is 1.
> 
>    Congestion control flag (C):
>       2 bits.  C set to 0b00 indicates the Congestion Control
>       Information (CCI) field is 0 bits in length.  C set to 0b01
>       indicates the CCI field is 32 bits in length.  C set to 0b10
>       indicates the CCI field is 64 bits in length.  C set to 0b11
>       indicates the CCI field is 96 bits in length.
> 
>    Transport Session Identifier flag (S):
>       1 bit.  This is the number of full 32-bit words in the TSI field.
>       The TSI field is 32*S bits in length; i.e., the length is either 0
>       bits or 32 bits.
> 
>    Reserved (Resv):
>       9 bits.  These bits are reserved.  In this version of the
>       specification, they MUST be set to zero by senders and MUST be
>       ignored by receivers.
> 
>    Header length (HDR_LEN):
>       8 bits.  The total length of the Tetrys header in units of 32-bit
>       words.  The length of the Tetrys header MUST be a multiple of 32
>       bits.  This field may be used to directly access the portion of
>       the packet beyond the Tetrys header, i.e., to the first next
>       header if it exists, to the packet payload if it exists and there
>       is no other header, or to the end of the packet if there are no
>       other headers or packet payload.
> 
>    Tetrys packet type (PKT_TYPE):
>       8 bits.  There are three types of packets: the PKT_TYPE_SOURCE
>       (0b00) defined in Section 5.2, the PKT_TYPE_CODED (0b01) defined
>       in Section 5.3 and the PKT_TYPE_WND_UPT (0b11) for window update
>       packets defined in Section 5.4.
> 
>    Congestion Control Information (CCI):
>       0, 32, 64, or 96 bits.  Used to carry congestion control
>       information.  For example, the congestion control information
>       could include layer numbers, logical channel numbers, and sequence
>       numbers.  This field is opaque for this specification.  This field
>       MUST be 0 bits (absent) if C is set to 0b00.  This field MUST be
>       32 bits if C is set to 0b01.  This field MUST be 64 bits if C is
>       set to 0b10.  This field MUST be 96 bits if C is set to 0b11.
> 
>    Transport Session Identifier (TSI):
>       0 or 32 bits.  The TSI uniquely identifies a session among all
>       sessions from a particular Tetrys encoder.  The TSI is scoped by
>       the IP address of the sender; thus, the IP address of the sender
>       and the TSI together uniquely identify the session.  Although a
>       TSI always uniquely identifies a session conjointly with the IP
>       address of the sender, whether the TSI is included in the Tetrys
>       header depends on what is used as the TSI value.  If the
>       underlying transport is UDP, then the 16-bit UDP source port
>       number MAY serve as the TSI for the session.  If there is no
>       underlying TSI provided by the network, transport, or any other
>       layer, then the TSI MUST be included in the Tetrys header.
459,480c472,493
<    Header Extension Type (HET):  8 bits.  The type of the header
<       extension.  This document defines several possible types.
<       Additional types may be defined in future versions of this
<       specification.  HET values from 0 to 127 are used for variable-
<       length header extensions.  HET values from 128 to 255 are used for
<       fixed-length, 32-bit header extensions.
< 
<    Header Extension Length (HEL):  8 bits.  The length of the whole
<       header extension field expressed in multiples of 32-bit words.
<       This field MUST be present for variable-length extensions (HETs
<       between 0 and 127) and MUST NOT be present for fixed-length
<       extensions (HETs between 128 and 255).
< 
<    Header Extension Content (HEC):  Length of the variable.  The content
<       of the header extension.  The format of this subfield depends on
<       the header extension type.  For fixed-length header extensions,
<       the HEC is 24 bits.  For variable-length header extensions, the
<       HEC field has a variable size as specified by the HEL field.  Note
<       that the length of each header extension MUST be a multiple of 32
<       bits.  Additionally, the total size of the Tetrys header,
<       including all header extensions and optional header fields, cannot
<       exceed 255 32-bit words.
---
>    Header Extension Type (HET):
>       8 bits.  The type of the header extension.  This document defines
>       several possible types.  Additional types may be defined in future
>       versions of this specification.  HET values from 0 to 127 are used
>       for variable-length header extensions.  HET values from 128 to 255
>       are used for fixed-length, 32-bit header extensions.
> 
>    Header Extension Length (HEL):
>       8 bits.  The length of the whole header extension field expressed
>       in multiples of 32-bit words.  This field MUST be present for
>       variable-length extensions (HETs between 0 and 127) and MUST NOT
>       be present for fixed-length extensions (HETs between 128 and 255).
> 
>    Header Extension Content (HEC):
>       Length of the variable.  The content of the header extension.  The
>       format of this subfield depends on the header extension type.  For
>       fixed-length header extensions, the HEC is 24 bits.  For variable-
>       length header extensions, the HEC field has a variable size as
>       specified by the HEL field.  Note that the length of each header
>       extension MUST be a multiple of 32 bits.  Additionally, the total
>       size of the Tetrys header, including all header extensions and
>       optional header fields, cannot exceed 255 32-bit words.
504,505c517,519
<    Common Packet Header:  A common packet header (as common header
<       format) where packet type is set to 0b00.
---
>    Common Packet Header:
>       A common packet header (as common header format) where packet type
>       is set to 0b00.
545,546c559,561
<    Common Packet Header:  A common packet header (as common header
<       format) where packet type is set to 0b01.
---
>    Common Packet Header:
>       A common packet header (as common header format) where packet type
>       is set to 0b01.
550,554c565,571
<    Encoding Vector:  An encoding vector to define the linear combination
<       used (coefficients and source symbols).
< 
<    Encoded Payload Size:  The coded payload size used if the source
<       symbols have a variable size (optional, Section 5.3.1).
---
>    Encoding Vector:
>       An encoding vector to define the linear combination used
>       (coefficients and source symbols).
> 
>    Encoded Payload Size:
>       The coded payload size used if the source symbols have a variable
>       size (optional, Section 5.3.1).
639,651c656,672
<    Store the Encoding Coefficients (C):  1 bit to indicate if an
<       encoding vector contains information about the coefficients used.
< 
<    Having Source Symbols with Variable Size Encoding (V):  Set V to 0b01
<       if the combination that refers to the encoding vector is a
<       combination of source symbols with variable sizes.  In this case,
<       the coded packets MUST have the 'Encoded Payload Size' field.
< 
<    NB_IDS:  The number of source IDs stored in the encoding vector
<       (depending on I).
< 
<    Number of Coefficients (NB_COEFS):  The number of the coefficients
<       used to generate the associated coded symbol.
---
>    Store the Encoding Coefficients (C):
>       1 bit to indicate if an encoding vector contains information about
>       the coefficients used.
> 
>    Having Source Symbols with Variable Size Encoding (V):
>       Set V to 0b01 if the combination that refers to the encoding
>       vector is a combination of source symbols with variable sizes.  In
>       this case, the coded packets MUST have the 'Encoded Payload Size'
>       field.
> 
>    NB_IDS:
>       The number of source IDs stored in the encoding vector (depending
>       on I).
> 
>    Number of Coefficients (NB_COEFS):
>       The number of the coefficients used to generate the associated
>       coded symbol.
659,667c680,691
<    Information about the Source Symbol IDs (id_bit_vector):  If I is set
<       to 0b01, store the edge blocks as b_id * (NB_IDS * 2 - 1).  If I
<       is set to 0b10, store the edge blocks in a compressed way.
< 
<    The Coefficients (coef_bit_vector):  The coefficients stored
<       depending on the CCGI (4 or 8 bits for each coefficient).
< 
<    Padding:  Padding to have an encoding vector size that is a multiple
<       of 32 bits (for the ID and coefficient part).
---
>    Information about the Source Symbol IDs (id_bit_vector):
>       If I is set to 0b01, store the edge blocks as b_id * (NB_IDS * 2 -
>       1).  If I is set to 0b10, store the edge blocks in a compressed
>       way.
> 
>    The Coefficients (coef_bit_vector):
>       The coefficients stored depending on the CCGI (4 or 8 bits for
>       each coefficient).
> 
>    Padding:
>       Padding to have an encoding vector size that is a multiple of 32
>       bits (for the ID and coefficient part).
772,788c796,817
<    Common Packet Header:  A common packet header (as common header
<       format) where packet type is set to 0b10.
< 
<    nb_missing_src:  The number of missing source symbols in the receiver
<       since the beginning of the session.
< 
<    nb_not_used_coded_symb:  The number of coded symbols at the receiver
<       that have not already been used for decoding (e.g., the linear
<       combinations contain at least two unknown source symbols).
< 
<    first_src_id:  ID of the first source symbol to consider in the
<       selective acknowledgment (SACK) vector.
< 
<    plr:  Packet loss ratio expressed as a percentage normalized to an
<       8-bit unsigned integer.  For example, 2.5% will be stored as
<       floor(2.5 * 256/100) = 6.  Conversely, if 6 is the stored value,
<       the corresponding packet loss ratio expressed as a percentage is
---
>    Common Packet Header:
>       A common packet header (as common header format) where packet type
>       is set to 0b10.
> 
>    nb_missing_src:
>       The number of missing source symbols in the receiver since the
>       beginning of the session.
> 
>    nb_not_used_coded_symb:
>       The number of coded symbols at the receiver that have not already
>       been used for decoding (e.g., the linear combinations contain at
>       least two unknown source symbols).
> 
>    first_src_id:
>       ID of the first source symbol to consider in the selective
>       acknowledgment (SACK) vector.
> 
>    plr:
>       Packet loss ratio expressed as a percentage normalized to an 8-bit
>       unsigned integer.  For example, 2.5% will be stored as floor(2.5 *
>       256/100) = 6.  Conversely, if 6 is the stored value, the
>       corresponding packet loss ratio expressed as a percentage is
794,807c823,838
<    sack_size:  The size of the SACK vector in 32-bit words.  For
<       instance, with a value of 2, the SACK vector is 64 bits long.
< 
<    SACK vector:  Bit vector indicating symbols that must be removed in
<       the encoding window from the first source symbol ID.  In most
<       cases, these symbols were received by the receiver.  The other
<       cases concern some events with non-recoverable packets (i.e., in
<       the case of a burst of losses) where it is better to drop and
<       abandon some packets and remove them from the encoding window to
<       allow the recovery of the following packets.  The "First Source
<       Symbol" is included in this bit vector.  A bit equal to 1 at the
<       i-th position means that this window update packet removes the
<       source symbol of the ID equal to "First Source Symbol ID" + i from
<       the encoding window.
---
>    sack_size:
>       The size of the SACK vector in 32-bit words.  For instance, with a
>       value of 2, the SACK vector is 64 bits long.
> 
>    SACK vector:
>       Bit vector indicating symbols that must be removed in the encoding
>       window from the first source symbol ID.  In most cases, these
>       symbols were received by the receiver.  The other cases concern
>       some events with non-recoverable packets (i.e., in the case of a
>       burst of losses) where it is better to drop and abandon some
>       packets and remove them from the encoding window to allow the
>       recovery of the following packets.  The "First Source Symbol" is
>       included in this bit vector.  A bit equal to 1 at the i-th
>       position means that this window update packet removes the source
>       symbol of the ID equal to "First Source Symbol ID" + i from the
>       encoding window.
